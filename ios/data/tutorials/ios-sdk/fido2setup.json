{"variants":[{"paths":["\/tutorials\/ios-sdk\/fido2setup"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The following tutorial will guide you through the creation of a new application that uses the FIDO2 Assertion and Attestation ceremonies for user verification."}]}],"estimatedTimeInMinutes":40,"title":"Creating a FIDO2 Application","image":"eye-bee-m.jpeg","chapter":"FIDO2 Setup","kind":"hero","backgroundImage":"eye-bee-m.jpeg"},{"kind":"tasks","tasks":[{"anchor":"Creating-an-app-that-uses-the-FIDO2-Package","title":"Creating an app that uses the FIDO2 Package","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create and configure an iOS Application that uses the Verify SDK FIDO2 package."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Open XCode and create a new project."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"step_1_new_project.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Select the iOS App template."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"step_2_iOS_template.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Enter your app name. For this tutorial, we will use the name FIDO2Tutorial."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"step_3_name_project.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Select “Storyboard” from the Interface pop-up menu and “Swift” from the language drop-down, then click Next. Save the project somewhere on your device."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"step_4_swift_ui.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In your project, go to File -> Add Packages…"}]}],"caption":[],"type":"step","runtimePreview":null,"media":"step_5_add_package.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Enter "},{"type":"codeVoice","code":"https:\/\/github.com\/ibm-security-verify\/verify-sdk-ios.git"},{"type":"text","text":" in the input in the top right, and select “Add Package.”"}]}],"caption":[],"type":"step","runtimePreview":null,"media":"step_6_find_package.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Select “FIDO2” from the checklist menu, and then press “Add Package.”"}]}],"caption":[],"type":"step","runtimePreview":null,"media":"step_7_authentication_check.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now that your App is created, you should have a directory with the name you typed in step 3, with the files "},{"type":"codeVoice","code":"AppDelegate.swift"},{"type":"text","text":", "},{"type":"codeVoice","code":"SceneDelegate.swift"},{"type":"text","text":", "},{"type":"codeVoice","code":"ViewController.swift"},{"type":"text","text":", "},{"type":"codeVoice","code":"Main.storyboard"},{"type":"text","text":", "},{"type":"codeVoice","code":"LaunchScreen.storyboard"},{"type":"text","text":", and a directory called "},{"type":"codeVoice","code":"Assets"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null}]},{"anchor":"Create-helper-common-files","title":"Create helper & common files","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create the helper files that share common values and protocols for the rest of the program."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":"Main.storyboard","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The first step is to setup the UI. Your needs will likely vary from the UI created for this app. The "},{"type":"codeVoice","code":"Main.storyboard"},{"type":"text","text":" file for this tutorial will have the source code displayed here."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"AppHelper_1.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The first helper file we will create will be called "},{"type":"codeVoice","code":"AppHelper.swift"}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"AppHelper_2.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We will create some constants that will help make future code more precise."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"AppHelper_3.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We will create two enum descriptions that will appear a lot in the future. The first being store, which can be used to easily reference locally saved data for future use, and the second being a NetworkError enum for assistance in complex networking within functions."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"AppHelper_4.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Two more helper functions will be created. The first one will be acceptableStatusCodes, which will return an array in the inclusive range 200-299, which is a list of all status codes that constitute a success. The second function is a createBottomBorder function which will assist with handling the UI elements of the application."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"AppHelper_5.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The first of the extensions that will be added will be 3 to assist with the creation and manipulation of UI elements to serve the purposes of the application."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"AppHelper_6.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The last changes to be made to "},{"type":"codeVoice","code":"AppHelper.swift"},{"type":"text","text":" will be the addition of two extensions to "},{"type":"codeVoice","code":"Data"},{"type":"text","text":" and to "},{"type":"codeVoice","code":"Logger"},{"type":"text","text":". The Data extension will be a function that will return a Base-64 URL encoded string in the format required for the application. The "},{"type":"codeVoice","code":"Logger"},{"type":"text","text":" changes will be to assist with clarity when logging information for the application."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"CredentialUserData_1.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The FIDO service uses certain methods and user credential data which we will provide support for to make it’s integration easier. We will put this code in a new swift file called "},{"type":"codeVoice","code":"CredentialUserData.swift"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"CredentialUserData_2.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The FIDO server returns many attributes that are related to a user, so we will create an enum that can store this information."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"CredentialUserData_3.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The reponses for assertation and attestation will be of a certain type, so we will create protocols which match these response types, containing the necessary variables."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"CredentialUserData_4.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The final addition to the "},{"type":"codeVoice","code":"CredentialUserData.swift"},{"type":"text","text":" file is the creation of structures to represent ISVAssertion and ISVAAssertion responses."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"IVCreds_1.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The last helper file to be created will be called "},{"type":"codeVoice","code":"IVCreds.swift"},{"type":"text","text":", and will contain structures and extensions to manage IV credential data."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"IVCreds_2.swift","content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"IVCreds.swift"},{"type":"text","text":" will contain a public struct that will represent the IV creds received from the reverse proxy. This will store the username along with any attributes."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"IVCreds_3.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An extension of IVCreds will be created that will contain two functions, "},{"type":"codeVoice","code":"buildURL"},{"type":"text","text":", which will construct an IVCreds URL from a given string, and getWhoAmI, which will give the return value from the whoAmI URL."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null}]},{"anchor":"Creating-the-FIDO-functionality","title":"Creating the FIDO functionality","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a file containing all of the functionality required to use the FIDO service."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":"FidoService_1.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a new file called "},{"type":"codeVoice","code":"FidoService.swift"},{"type":"text","text":". This will contain the main functionality of the application and utilise the functions provided by the FIDO2 SDK."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"FidoService_2.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The first step in the FIDO2 process is the fetching of attestation options. We will write a function that takes in the relyingPartyURL, an access token, and some parameters, which will perform this functionality."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"FidoService_3.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The FIDO Service uses these options for the creation of an authenticator, which our program must be able to do. This can be done via a createAuthenticator function."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"FidoService_4.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To complete Assertation, the program must be aware of the available options. This can be achieved by using the Assertation specific functions of the FIDO2 SDK, which will be done via the implementation of a fetchAssertationOptions function."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"FidoService_5.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now that we can get the assertation options, we need a way to make the assertation to the authenticator for validation."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null}]},{"anchor":"Create-landing-page-and-login-screens","title":"Create landing page and login screens","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now that we have all the helpers and FIDO functionality in place, the last step is to connect it to our UI. We will create ViewControllers for the different pages of our application."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":"LandingViewController_1.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The first view controller to make will be the landing page. For this, we will make a new file called "},{"type":"codeVoice","code":"LandingViewController.swift"},{"type":"text","text":". According to our "},{"type":"codeVoice","code":"Main.storyboard"},{"type":"text","text":", this page will have 2 views on it each containing 1 button, which correspond to the ISV and ISVA configurations of FIDO. We define this view controller and set the appearances of the buttons. When the code is written, the IBOutlets should automatically connect to our storyboard UI elements."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"LoginViewController_1.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The Cloud Based ISVA deployment requires users to login to their tenants in order to register for FIDO. This will be handled on a login view controller which will be called "},{"type":"codeVoice","code":"LoginViewController.swift"},{"type":"text","text":". This will log a user in and pass the data forward to the attestation view controller for registration."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"LoginViewController_2.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The login view controller will use a number of variables to control on screen elements, which need to be defined. A function to manage the loading of onscreen elements when the screen is loaded will also be defined."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"LoginViewController_3.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The prepare function for the LoginViewController will be overrided in order to set up the viewController to the state required."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"LoginViewController_4.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The functionality of the login button will be added via a IBAction called onLoginm with the sender set to a UIButton. This will perform the login attempt against the tenant after performing validations on the input. This requires the tenant application to support resource owner password credential (ROPC) for authentication. A createRelyingParty function will also be created that will assist the functionality of the onLogin function."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"LoginViewController_5.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In order to be able to perform the login, a login function will be created. This function is called by the onLogin IBAction defined in the previous step. This will use the username and password inputs in the text fields of the UI to perform authentication."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"LoginViewController_6.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The final step for the "},{"type":"codeVoice","code":"LoginViewController.swift"},{"type":"text","text":" file is the addition of a function to complete the registration with FIDO, called fidoRegistration. This function is called in the onLogin function, and will begin the registration process after a successful login."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"WhoAmIViewController_1.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An on-premise ISV deployment will require a different login page than a cloud based one. We will make a new file called "},{"type":"codeVoice","code":"WhoAmIViewController.swift"},{"type":"text","text":", which will be able to support this. This will be far simpler than the LoginViewController. First step is to create a new file, with some basic code in it to store references to screen elements, and define constraints of the view."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"WhoAmIViewController_2.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We now create a function called onWhoAmI, which will be triggered by a UI button. This will call the IVCreds getWhoAmI function using the supplied information."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null}]},{"anchor":"Create-UI-for-attestation-and-assertion-functionality","title":"Create UI for attestation and assertion functionality","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Creating pages to handle the actual implementation of the FIDO2 service, via the attestation and assertion ceremonies."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":"AttestationViewController_1.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The next UI screen following both the WhoAmI & the Login view controllers is the AttestationViewController, which prompts a user to initiate the registration via input of a button press. We will create a new file called "},{"type":"codeVoice","code":"AttestationViewController.swift"},{"type":"text","text":", and create some variables to represent screen elements."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"AttestationViewController_2.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We create a set of variables to represent input parameters for attestation, which control values represented in on screen elements. We also create a prepare and viewDidLoad function to control the screen loading and how it should be handled. The prepare function shall set the values of the initialised variables."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"AttestationViewController_3.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To complete the AttestationViewController, we need to add functionality to the ‘Initiate Registration’ button, in the form of an onOptionsClick function."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"AttestationInfoViewController_1.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Once a user has pressed the “Initiate Registration” button, the application will move onto the AttestationInfoViewController screen, where a user can input the nickname of their credential and confirm their registration. This will be the "},{"type":"codeVoice","code":"AttestationInfoViewController.swift"},{"type":"text","text":" page, and pressing the “Register” button will complete the FIDO regisration."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"AttestationInfoViewController_2.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The AttestationInfoViewController needs some variables to control the information needed for registration, as well as a function to set up the environment when the view loads."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"AttestationInfoViewController_3.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"There are two buttons on the screen, each one will need a function created to handle a press event. These will be called onCancelClick & onRegisterClick for the cancel and register buttons respectively. The cancel button will take a user back to the landing page, and the onRegisterClick will initiate the registration process on the chosen service."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"AttestationInfoViewController_4.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Extensions to the AttestationInfoViewController will be made using a PublicKeyCredentialDelegate protocol, and will contain functions that will handle errors and attestation results from the server."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"AssertionViewController_1.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Once FIDO2 registration is complete, in order to authenticate a user the assertion ceremony must be completed. The following pages will handle the Assertion request and the assertion confirmation screens. The first page we will create will be an "},{"type":"codeVoice","code":"AssertionViewController.swift"},{"type":"text","text":". We will define the screen element variables which will automatically link to the values defined in our storyboard file."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"AssertionViewController_2.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We will create the constants used for the application, as well as the functions to handle vartiable initialisation and constraints when the page is needed."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"AssertionViewController_3.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In order to improve the conciseness of repeated code, we will define some functions that will animate the logo on screen, and set the appearance of the screen based on the settings of the device."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"AssertionViewController_4.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"As defined in the "},{"type":"codeVoice","code":"Main.storyboard"},{"type":"text","text":" file, there are two buttons on the screen for authenticators. Remove and authenticate. We will add the functionality for these two functions, with authenticate triggering an assertation to the service, and remove will remove the authenticator from the device, but will still require manual deletion from the relying party."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"AssertionViewController_5.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Similar to the attestation view controller, we shall create an extension for the AssertationViewController conforming to the PublicKeyCredentialDelegate protocal, which will handle errors and the results from the assertion request."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"AssertionInfoViewController_1.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The final view controller to be created will show on screen the status of the assertation process, and inform the user if it was a success or a fail. This new file will be called "},{"type":"codeVoice","code":"AssertionInfoViewController.swift"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"AssertionInfoViewController_2.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The viewDidLoad function for this viewController contains a lot of functionality, which will perform the authentication after it has been handed control by the AssertionViewController. As this page is only loaded once the assertation has been requested, the network request shall be made as the page loads. Two constant variables will also be defined for use in this file."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"AssertionInfoViewController_3.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Next step is to create functions for handling the rendering of the data to the screen once it has been receieved from the assertion request. This is done by the modification of screen elements, and the creation of new ones."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"AssertionInfoViewController_4.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The final step of the project is the creation of a function to handle the close button on the screen, which will simply perform a segue, that will call unwindToAssertionView."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null}]}]}],"identifier":{"url":"doc:\/\/com.ibm.iOS-SDK\/tutorials\/iOS-SDK\/FIDO2Setup","interfaceLanguage":"swift"},"kind":"project","metadata":{"title":"Creating a FIDO2 Application","categoryPathComponent":"fido2","role":"project","category":"FIDO2 SDK"},"hierarchy":{"modules":[{"reference":"doc:\/\/com.ibm.iOS-SDK\/tutorials\/fido2\/FIDO2-Setup","projects":[{"reference":"doc:\/\/com.ibm.iOS-SDK\/tutorials\/iOS-SDK\/FIDO2Setup","sections":[{"kind":"task","reference":"doc:\/\/com.ibm.iOS-SDK\/tutorials\/iOS-SDK\/FIDO2Setup#Creating-an-app-that-uses-the-FIDO2-Package"},{"kind":"task","reference":"doc:\/\/com.ibm.iOS-SDK\/tutorials\/iOS-SDK\/FIDO2Setup#Create-helper-common-files"},{"kind":"task","reference":"doc:\/\/com.ibm.iOS-SDK\/tutorials\/iOS-SDK\/FIDO2Setup#Creating-the-FIDO-functionality"},{"kind":"task","reference":"doc:\/\/com.ibm.iOS-SDK\/tutorials\/iOS-SDK\/FIDO2Setup#Create-landing-page-and-login-screens"},{"kind":"task","reference":"doc:\/\/com.ibm.iOS-SDK\/tutorials\/iOS-SDK\/FIDO2Setup#Create-UI-for-attestation-and-assertion-functionality"}]}]}],"reference":"doc:\/\/com.ibm.iOS-SDK\/tutorials\/fido2","paths":[["doc:\/\/com.ibm.iOS-SDK\/tutorials\/fido2","doc:\/\/com.ibm.iOS-SDK\/tutorials\/fido2\/$volume","doc:\/\/com.ibm.iOS-SDK\/tutorials\/fido2\/FIDO2-Setup"]]},"references":{"doc://com.ibm.iOS-SDK/tutorials/iOS-SDK/FIDO2Setup#Create-UI-for-attestation-and-assertion-functionality":{"role":"pseudoSymbol","title":"Create UI for attestation and assertion functionality","abstract":[{"type":"text","text":"The following tutorial will guide you through the creation of a new application that uses the FIDO2 Assertion and Attestation ceremonies for user verification."}],"identifier":"doc:\/\/com.ibm.iOS-SDK\/tutorials\/iOS-SDK\/FIDO2Setup#Create-UI-for-attestation-and-assertion-functionality","kind":"section","type":"section","url":"\/tutorials\/ios-sdk\/fido2setup#Create-UI-for-attestation-and-assertion-functionality"},"AssertionInfoViewController_3.swift":{"syntax":"swift","content":["\/\/","\/\/ Copyright contributors to the IBM Security Verify FIDO2 Sample App for iOS project","\/\/","","import Foundation","import UIKit","import os.log","import FIDO2","","class AssertionInfoViewController: UIViewController {","    \/\/ MARK: Control variables","    @IBOutlet weak var activityIndicator: UIActivityIndicatorView!","    @IBOutlet weak var buttonClose: UIButton!","    @IBOutlet weak var stackviewProperties: UIStackView!","    @IBOutlet weak var labelProgress: UILabel!","    ","    \/\/ MARK: Variables","    var assertion: PublicKeyCredential<AuthenticatorAssertionResponse>?","    var success = false","    ","    override func viewDidLoad() {","        super.viewDidLoad()","        ","        activityIndicator.startAnimating()","        self.activityIndicator.isHidden = false","        ","        let relyingPartyUrl = UserDefaults.standard.string(forKey: Store.relyingPartyUrl.rawValue)!","        let accessToken = UserDefaults.standard.string(forKey: Store.accessToken.rawValue)!","        let username = UserDefaults.standard.string(forKey: Store.username.rawValue) ?? \"\"","        ","        let assertionUrl = \"\\(relyingPartyUrl)\/assertion\/result\"","        ","        \/\/ Perform the authentication","        if let server = UserDefaults.standard.string(forKey: Store.server.rawValue) {","            if server == isva {","                FidoService.shared.assertAuthenticator(assertionUrl, accessToken: accessToken, username: username, assertion: assertion!, type: ISVAAssertionResponse.self) { result in","                    DispatchQueue.main.async {","                        self.activityIndicator.stopAnimating()","                        self.activityIndicator.isHidden = true","                        self.labelProgress.isHidden = true","                    }","                    ","                    switch result {","                    case .success(let response):","                        Logger.app.info(\"Authenticator successfully signed!\")","                        self.success = true","                        ","                        DispatchQueue.main.async {","                            self.displayCredentialProperties(userData: response)","                        }","                                ","                    case .failure(let error):","                        let alertController = UIAlertController(title: \"FIDO2 Example\", message: error.localizedDescription, preferredStyle: .alert)","                        alertController.addAction(UIAlertAction(title: \"OK\", style: .default, handler: { action in","                            DispatchQueue.main.async {","                                self.performSegue(withIdentifier: \"unwindToAssertionView\", sender: self)","                            }","                        }))","","                        DispatchQueue.main.async {","                            self.present(alertController, animated: true)","                        }","                    }","                }","            }","            else {","                FidoService.shared.assertAuthenticator(assertionUrl, accessToken: accessToken, username: username, assertion: assertion!, type: ISVAssertionResponse.self) { result in","                    DispatchQueue.main.async {","                        self.activityIndicator.stopAnimating()","                        self.activityIndicator.isHidden = true","                        self.labelProgress.isHidden = true","                    }","                    ","                    switch result {","                    case .success(let response):","                        Logger.app.info(\"Authenticator successfully signed!\")","                        self.success = true","                        ","                        DispatchQueue.main.async {","                            self.displayCredentialProperties(userData: response)","                        }","                                ","                    case .failure(let error):","                        let alertController = UIAlertController(title: \"FIDO2 Example\", message: error.localizedDescription, preferredStyle: .alert)","                        alertController.addAction(UIAlertAction(title: \"OK\", style: .default, handler: { action in","                            DispatchQueue.main.async {","                                self.performSegue(withIdentifier: \"unwindToAssertionView\", sender: self)","                            }","                        }))","","                        DispatchQueue.main.async {","                            self.present(alertController, animated: true)","                        }","                    }","                }","            }","        }","    }","    ","    \/\/\/ Renders the credential user data to the screen.","    \/\/\/ - parameter userData: An instance of `CredentialUserData`","    private func displayCredentialProperties<T: AssertionResponse>(userData: T) {","        if let response = userData as? ISVAAssertionResponse {","            \/\/ If there is an icon, create it","            if let imageString = response.attributes[.icon] as? String, let url = URL(string: imageString), let data = try? Data(contentsOf: url), let image = UIImage(data: data) {","                ","                let property = createImage(image: image)","                stackviewProperties.addArrangedSubview(property)","            }","            ","            \/\/ Dynamically add the labels to the stackview","            let property1 = createLabels(heading: \"Username\", text: response.username)","            stackviewProperties.addArrangedSubview(property1)","        ","            let property2 = createLabels(heading: \"Display name\", text: response.displayName)","            stackviewProperties.addArrangedSubview(property2)","            ","            let property3 = createLabels(heading: \"Email\", text: response.email)","            stackviewProperties.addArrangedSubview(property3)","            ","            let property4 = createLabels(heading: \"Authenticator nickname\", text: response.nickname)","            stackviewProperties.addArrangedSubview(property4)","            ","            if let value = response.attributes[.description] as? String {","                let property = createLabels(heading: \"Authenticator description\", text: value)","                stackviewProperties.addArrangedSubview(property)","            }","            ","            if let value = response.attributes[.txAuthSimple] as? String {","                let property = createLabels(heading: \"Transaction confirmation\", text: value)","                stackviewProperties.addArrangedSubview(property)","            }","            ","            let property5 = createLabels(heading: \"Relying party\", text: response.rpId)","            stackviewProperties.addArrangedSubview(property5)","        }","        ","        if let response = userData as? ISVAssertionResponse {","            \/\/ If there is an icon, create it","            if let imageString = response.attributes[.icon] as? String, let url = URL(string: imageString), let data = try? Data(contentsOf: url), let image = UIImage(data: data) {","                ","                let property = createImage(image: image)","                stackviewProperties.addArrangedSubview(property)","            }","            ","            \/\/ Dynamically add the labels to the stackview","            let property1 = createLabels(heading: \"User id\", text: response.userId)","            stackviewProperties.addArrangedSubview(property1)","        ","            let property2 = createLabels(heading: \"Authenticator nickname\", text: response.nickname)","            stackviewProperties.addArrangedSubview(property2)","            ","            let property3 = createLabels(heading: \"Relying party\", text: response.rpId)","            stackviewProperties.addArrangedSubview(property3)","            ","            let property4 = createLabels(heading: \"Authenticator type\", text: response.type)","            stackviewProperties.addArrangedSubview(property4)","            ","            if let value = response.attributes[.attestationFormat] as? String {","                let property = createLabels(heading: \"Attestation format\", text: value)","                stackviewProperties.addArrangedSubview(property)","            }","            ","            if let value = response.attributes[.attestationType] as? String {","                let property = createLabels(heading: \"Attestation type\", text: value)","                stackviewProperties.addArrangedSubview(property)","            }","            ","            if let value = response.attributes[.description] as? String {","                let property = createLabels(heading: \"Description\", text: value)","                stackviewProperties.addArrangedSubview(property)","            }","        }","    }","    ","    private func createLabels(heading: String, text: String) -> UIStackView {","        \/\/ Create the 2 UILabels representing the title header and display text.","        let labelHeader = UILabel()","        labelHeader.text = heading","        labelHeader.textColor = .systemGray","        labelHeader.font = labelHeader.font.withSize(15)","        ","        let labelText = UILabel()","        labelText.text = text","        labelText.numberOfLines = 0","        labelText.lineBreakMode = .byWordWrapping","        ","        \/\/ Create a UIStackView to hold the labels.","        let stackview = UIStackView(arrangedSubviews: [labelHeader, labelText])","        stackview.axis = .vertical","        stackview.spacing = 12","        ","        return stackview","    }","    ","    private func createImage(image: UIImage) -> UIStackView {","        \/\/ Create the 2 UILabels representing the title header and display text.","        let imageView = UIImageView(frame: CGRect(x: 0, y: 0, width: 16, height: 16))","        imageView.image = image","        imageView.contentMode = .scaleAspectFit","        ","        \/\/ Create a UIStackView to hold the labels.","        let stackview = UIStackView(arrangedSubviews:[imageView])","        stackview.axis = .vertical","        stackview.spacing = 12","        stackview.alignment = .leading","        ","        return stackview","    }","}"],"fileName":"AssertionInfoViewController.swift","identifier":"AssertionInfoViewController_3.swift","type":"file","fileType":"swift","highlights":[{"line":99},{"line":100},{"line":101},{"line":102},{"line":103},{"line":104},{"line":105},{"line":106},{"line":107},{"line":108},{"line":109},{"line":110},{"line":111},{"line":112},{"line":113},{"line":114},{"line":115},{"line":116},{"line":117},{"line":118},{"line":119},{"line":120},{"line":121},{"line":122},{"line":123},{"line":124},{"line":125},{"line":126},{"line":127},{"line":128},{"line":129},{"line":130},{"line":131},{"line":132},{"line":133},{"line":134},{"line":135},{"line":136},{"line":137},{"line":138},{"line":139},{"line":140},{"line":141},{"line":142},{"line":143},{"line":144},{"line":145},{"line":146},{"line":147},{"line":148},{"line":149},{"line":150},{"line":151},{"line":152},{"line":153},{"line":154},{"line":155},{"line":156},{"line":157},{"line":158},{"line":159},{"line":160},{"line":161},{"line":162},{"line":163},{"line":164},{"line":165},{"line":166},{"line":167},{"line":168},{"line":169},{"line":170},{"line":171},{"line":172},{"line":173},{"line":174},{"line":175},{"line":176},{"line":177},{"line":178},{"line":179},{"line":180},{"line":181},{"line":182},{"line":183},{"line":184},{"line":185},{"line":186},{"line":187},{"line":188},{"line":189},{"line":190},{"line":191},{"line":192},{"line":193},{"line":194},{"line":195},{"line":196},{"line":197},{"line":198},{"line":199},{"line":200},{"line":201},{"line":202},{"line":203},{"line":204},{"line":205},{"line":206},{"line":207},{"line":208},{"line":209}]},"FidoService_5.swift":{"syntax":"swift","content":["\/\/","\/\/  FidoService.swift","\/\/","","import Foundation","import FIDO2","import os.log","","","public class FidoService {","    \/\/\/ Returns the shared defaults object.","    internal static let shared = FidoService()","    ","    \/\/ MARK: Networking functions","","    func fetchAttestationOptions(_ relyingPartyURL: String, accessToken: String, params: [String: Any]? = [:], completion: @escaping (Result<PublicKeyCredentialCreationOptions, NetworkError>) -> Void) {","        guard let url = URL(string: relyingPartyURL) else {","            completion(.failure(.badURL))","            return","        }","        ","        var request = URLRequest(url: url)","        request.httpMethod = \"POST\"","        request.setValue(\"application\/json\", forHTTPHeaderField: \"Content-type\")","        request.setValue(\"application\/json\", forHTTPHeaderField: \"Accept\")","        request.setValue(\"Bearer \\(accessToken)\", forHTTPHeaderField: \"Authorization\")","        ","        var parameters = [\"attestation\":\"direct\"] as [String: Any]","        ","        ","        \/\/ Append the additional params to the JSON request.","        if let params = params {","            parameters.merge(params) { (current, _) in current }","        }","        ","        guard let bodyData = try? JSONSerialization.data(withJSONObject: parameters, options: []) else {","            Logger.networking.debug(\"Unable to create request payload for WebAuthn.Attestation.options.\")","            completion(.failure(NetworkError.invalidData))","            return","        }","            ","        Logger.networking.info(\"HTTP request\\n\\(String(data: bodyData, encoding: .utf8)!, privacy: .public)\")","        request.httpBody = bodyData","        ","        URLSession.shared.dataTask(with: request) { (data, response, error) in","            guard let data = data, let _ = response, error == nil else {","                completion(.failure(.general(message: error!.localizedDescription)))","                return","            }","            ","            Logger.networking.info(\"HTTP response\\n\\(String(data: data, encoding: .utf8)!, privacy: .public)\")","            ","            do {","                guard let value = try? JSONDecoder().decode(PublicKeyCredentialCreationOptions.self, from: data) else {","                    Logger.networking.debug(\"Unable to parse PublicKeyCredentialCreationOptions.\")","                    completion(.failure(.general(message: \"Unable to parse PublicKeyCredentialCreationOptions.\")","                    ))","                    return","                }","                completion(.success(value))","            }","        }.resume()","    }","    ","    func createAuthenticator(_ relyingPartyURL: String, accessToken: String, server: String = isv, nickname: String, enabled: Bool = true, attestation: PublicKeyCredential<AuthenticatorAttestationResponse>, completion: @escaping (Result<Void, Error>) -> Void) {","        guard let url = URL(string: relyingPartyURL) else {","            completion(.failure(NetworkError.badURL))","            return","        }","        ","        \/\/ Convert into the data the FIDO server wants.","        let data: Data!","        if server == isv {","            let attestation = ISVAsstestationResponse(nickname, attestation: attestation)","            data = try? JSONEncoder().encode(attestation)","        }","        else {","            let attestation = ISVAAsstestationResponse(nickname, attestation: attestation)","            data = try? JSONEncoder().encode(attestation)","        }","        ","        guard let bodyData = data else {","           Logger.networking.debug(\"Unable to create request payload for WebAuthn.Attestation.create.\")","           completion(.failure(NetworkError.invalidData))","           return","       }","       ","       var request = URLRequest(url: url)","       request.httpMethod = \"POST\"","       request.setValue(\"application\/json\", forHTTPHeaderField: \"Content-type\")","       request.setValue(\"application\/json\", forHTTPHeaderField: \"Accept\")","       request.setValue(\"Bearer \\(accessToken)\", forHTTPHeaderField: \"Authorization\")","       request.httpBody = bodyData","       ","       Logger.networking.info(\"HTTP request\\n\\(String(data: bodyData, encoding: .utf8)!, privacy: .public)\")","       ","       URLSession.shared.dataTask(with: request) { (data, response, error) in","           guard let data = data, let _ = response, error == nil else {","               completion(.failure(NetworkError.general(message: error!.localizedDescription)))","               return","           }","           ","           Logger.networking.info(\"HTTP response\\n\\(String(data: data, encoding: .utf8)!, privacy: .public)\")","           \/\/ Check the response status code that isn't in the 200 range.","           if let httpResponse = response as? HTTPURLResponse, !acceptableStatusCodes.contains(httpResponse.statusCode) {","               \/\/ Attempt to read the response error data.","               completion(.failure(NetworkError.general(message: String(data: data, encoding: .utf8) ?? \"Invalid\")))","               return","           }","","           completion(.success(()))","       }.resume()","    }","    ","    func fetchAssertionOptions(_ relyingPartyURL: String, accessToken: String, params: [String: Any]? = [:], completion: @escaping (Result<PublicKeyCredentialRequestOptions, NetworkError>) -> Void) {","        guard let url = URL(string: relyingPartyURL) else {","            completion(.failure(.badURL))","            return","        }","        ","        var request = URLRequest(url: url)","        request.httpMethod = \"POST\"","        request.setValue(\"application\/json\", forHTTPHeaderField: \"Content-type\")","        request.setValue(\"application\/json\", forHTTPHeaderField: \"Accept\")","        request.setValue(\"Bearer \\(accessToken)\", forHTTPHeaderField: \"Authorization\")","        ","        var parameters = [\"userVerification\":\"required\"] as [String: Any]","        ","        \/\/ Append the additional params to the JSON request.","        if let params = params {","            parameters.merge(params) { (current, _) in current }","        }","        ","        guard let bodyData = try? JSONSerialization.data(withJSONObject: parameters, options: []) else {","            Logger.networking.debug(\"Unable to create request payload for WebAuthn.Assertion.options.\")","            completion(.failure(NetworkError.invalidData))","            return","        }","            ","        Logger.networking.info(\"HTTP request\\n\\(String(data: bodyData, encoding: .utf8)!, privacy: .public)\")","        request.httpBody = bodyData","        ","        URLSession.shared.dataTask(with: request) { (data, response, error) in","            guard let data = data, let _ = response, error == nil else {","                completion(.failure(.general(message: error!.localizedDescription)))","                return","            }","            ","            Logger.networking.info(\"HTTP response\\n\\(String(data: data, encoding: .utf8)!, privacy: .public)\")","            ","            do {","                guard let value = try? JSONDecoder().decode(PublicKeyCredentialRequestOptions.self, from: data) else {","                    Logger.networking.debug(\"Unable to parse PublicKeyCredentialRequestOptions.\")","                    completion(.failure(.general(message: \"Unable to parse PublicKeyCredentialRequestOptions.\")","                    ))","                    return","                }","                ","                completion(.success(value))","            }","        }.resume()","    }","    ","    func assertAuthenticator<T>(_ relyingPartyURL: String, accessToken: String, username: String, assertion: PublicKeyCredential<AuthenticatorAssertionResponse>, type: T.Type, completion: @escaping (Result<T, Error>) -> Void) where T : AssertionResponse {","        guard let url = URL(string: relyingPartyURL) else {","            completion(.failure(NetworkError.badURL))","            return","        }","            ","        guard let bodyData = try? JSONEncoder().encode(assertion) else {","           Logger.networking.debug(\"Unable to create request payload for WebAuthn.Assertion.get.\")","           completion(.failure(NetworkError.invalidData))","           return","        }","        ","        var request = URLRequest(url: url)","        request.httpMethod = \"POST\"","        request.setValue(\"application\/json\", forHTTPHeaderField: \"Content-type\")","        request.setValue(\"application\/json\", forHTTPHeaderField: \"Accept\")","        request.setValue(\"Bearer \\(accessToken)\", forHTTPHeaderField: \"Authorization\")","        request.httpBody = bodyData","        ","        Logger.networking.info(\"HTTP request\\n\\(String(data: bodyData, encoding: .utf8)!,privacy: .public)\")","        ","        URLSession.shared.dataTask(with: request) { (data, response, error) in","            guard let data = data, let _ = response, error == nil else {","                completion(.failure(NetworkError.general(message: error!.localizedDescription)))","                return","            }","            ","            Logger.networking.info(\"HTTP response\\n\\(String(data: data, encoding: .utf8)!, privacy: .public)\")","            ","            \/\/ Check the response status code that isn't in the 200 range.","            if let httpResponse = response as? HTTPURLResponse, !acceptableStatusCodes.contains(httpResponse.statusCode) {","                \/\/ Attempt to read the response error data.","                completion(.failure(NetworkError.general(message: String(data: data, encoding: .utf8) ?? \"Invalid\")))","                return","            }","","            \/\/ Parse the response being returned","            guard let result = try? JSONDecoder().decode(T.self, from: data) else {","                completion(.failure(NetworkError.invalidData))","                return","            }","            ","            completion(.success(result))","        }.resume()","    }","}"],"fileName":"FidoService.swift","identifier":"FidoService_5.swift","type":"file","fileType":"swift","highlights":[{"line":163},{"line":164},{"line":165},{"line":166},{"line":167},{"line":168},{"line":169},{"line":170},{"line":171},{"line":172},{"line":173},{"line":174},{"line":175},{"line":176},{"line":177},{"line":178},{"line":179},{"line":180},{"line":181},{"line":182},{"line":183},{"line":184},{"line":185},{"line":186},{"line":187},{"line":188},{"line":189},{"line":190},{"line":191},{"line":192},{"line":193},{"line":194},{"line":195},{"line":196},{"line":197},{"line":198},{"line":199},{"line":200},{"line":201},{"line":202},{"line":203},{"line":204},{"line":205},{"line":206},{"line":207},{"line":208}]},"AssertionViewController_2.swift":{"syntax":"swift","content":["\/\/","\/\/ Copyright contributors to the IBM Security Verify FIDO2 Sample App for iOS project","\/\/","","import Foundation","import UIKit","import FIDO2","import CryptoKit","","class AssertionViewController: UIViewController {","    \/\/ MARK: Control variables","    @IBOutlet weak var buttonAuthenticate: UIButton!","    @IBOutlet weak var buttonRemove: UIButton!","    @IBOutlet weak var labelDisplayName: UILabel!","    @IBOutlet weak var labelHostName: UILabel!","    @IBOutlet weak var labelNickName: UILabel!","    @IBOutlet weak var labelCreatedDate: UILabel!","    @IBOutlet weak var imageView: UIImageView!","    @IBOutlet weak var switchEauthExt: UISwitch!","    ","    \/\/ Random messages for the user to acknowledge before signing the assertion.","    let reasons = [\"Please confirm your pizza order of $49.99\",","                   \"Please verify that you intended to transfer $2,877.34.\",","                   \"Please confirm you purchased a new Apple MacBook.\",","                   \"Are you trying to access to the server room?\",","                   \"Your confirmation of to access the registration resource on this server is required.\",","                   \"Please confirm your order of 10 widgets.\"]","    ","    override func viewDidLoad() {","        super.viewDidLoad()","        ","        navigationController?.navigationBar.isHidden = true","        ","        \/\/ Populate the stored values.","        if let value = UserDefaults.standard.string(forKey: Store.relyingPartyUrl.rawValue), let url = URL(string: value), let hostname = url.host {","            labelHostName.text = hostname","        }","        ","        if let value = UserDefaults.standard.string(forKey: Store.nickname.rawValue) {","            labelNickName.text = value","        }","        ","        if let value = UserDefaults.standard.string(forKey: Store.displayName.rawValue) {","            labelDisplayName.text = value","        }","        ","        if let value = UserDefaults.standard.string(forKey: Store.createdDate.rawValue) {","            labelCreatedDate.text = value","        }","        ","        \/\/ Animate the registration logo","        setTraitAppearance()","        animateLogo()","        ","        buttonAuthenticate.setCornerRadius()","    }","    ","    \/\/\/ Called when the iOS interface environment changes.","    \/\/\/ - parameter previousTraitCollection: The `UITraitCollection` object before the interface environment changed.","    override func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {","        super.traitCollectionDidChange(previousTraitCollection)","","        if traitCollection.hasDifferentColorAppearance(comparedTo: previousTraitCollection) {","            setTraitAppearance()","        }","    }","    ","    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {","        if let viewController = segue.destination as? AssertionInfoViewController, let assertion = sender as? PublicKeyCredential<AuthenticatorAssertionResponse> {","            viewController.assertion = assertion","            viewController.isModalInPresentation = true","        }","    }","    ","    @IBAction func unwindToAssertionView(sender: UIStoryboardSegue) {","        if let viewController = sender.source as? AssertionInfoViewController {","            imageView.tintColor = viewController.success ? UIColor.systemGreen : UIColor.systemRed","            ","            animateLogo {","                DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + 3) {","                    self.setTraitAppearance()","                }","            }","        }","    }","}"],"fileName":"AssertionViewController.swift","identifier":"AssertionViewController_2.swift","type":"file","fileType":"swift","highlights":[{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52},{"line":53},{"line":54},{"line":55},{"line":56},{"line":57},{"line":58},{"line":59},{"line":60},{"line":61},{"line":62},{"line":63},{"line":64},{"line":65},{"line":66},{"line":67},{"line":68},{"line":69},{"line":70},{"line":71},{"line":72},{"line":73},{"line":74},{"line":75},{"line":76},{"line":77},{"line":78},{"line":79},{"line":80},{"line":81},{"line":82},{"line":83},{"line":84},{"line":85}]},"CredentialUserData_3.swift":{"syntax":"swift","content":["\/\/","\/\/ Copyright contributors to the IBM Security Verify FIDO2 Sample App for iOS project","\/\/","","import Foundation","import os.log","import FIDO2","","\/\/ MARK: Enums","","\/\/\/ The attributes that can be returned by the FIDO server for a user.","public enum CredentialUserAttribute: String {","    \/\/\/ The metadata icon of the authenticator","    case icon","    ","    \/\/\/ The unique identifier of the user.","    case userId","    ","    \/\/\/ The name of the user.","    case username","    ","    \/\/\/ The email of the user.","    case email","    ","    \/\/\/ The friendly name of the registration record","    case nickname","    ","    \/\/\/ The metadata description of the authenticator","    case description","    ","    \/\/\/ The AAGuid of the authenticator used ,","    case aaguid","    ","    \/\/\/ The relying party ID this enrollment belongs to.","    case rpId","    ","    \/\/\/ The format of attestation that was performed ,","    case attestationFormat","    ","    \/\/\/ The type of attestation that was performed ,","    case attestationType","    ","    \/\/\/ The attestation trust path of the authenticator.","    case attestationTrustPath","    ","    \/\/\/ The counter of this authenticator.","    case counter","    ","    \/\/\/ The public key issued by the authenticator.","    case credentialPublicKey","    ","    \/\/\/  The credential ID of the authenticator","    case credentialId","    ","    \/\/\/  The authenticator extension for txAuthSimple","    case txAuthSimple","}","","\/\/ MARK: Protocols","\/\/\/ The assertion response returned after a `WebAuthnAPIClient.Assertion.get()` operation.","public protocol AssertionResponse: Decodable {","    \/\/\/ The unique identifier of the user.","    var userId: String {","        get","    }","    ","    \/\/\/ The relying party ID this enrollment belongs to.","    var rpId: String {","        get","    }","    ","    \/\/\/ The friendly name of the registration record.","    var nickname: String {","        get","    }","    ","    \/\/\/ A name-value pair of user related credential attributes.","    var attributes: [CredentialUserAttribute: Any] {","        get","    }","}","","\/\/\/ The assertion response returned after a `WebAuthnAPIClient.Assertion.get()` operation.","public protocol AttestationResponse {","    \/\/\/ The friendly name of the registration record.","    var nickname: String {","        get","    }","    ","    var attestation: PublicKeyCredential<AuthenticatorAttestationResponse> {","        get","    }","}","","\/\/\/ The asstestation response is a placeholder protocol to support IBM Verify on-premise FIDO server implementations","public struct ISVAAsstestationResponse: AttestationResponse, Codable {","    public let attestation: PublicKeyCredential<AuthenticatorAttestationResponse>","    public let nickname: String","    ","    public init(_ nickname: String, attestation: PublicKeyCredential<AuthenticatorAttestationResponse>) {","        self.nickname = nickname","        self.attestation = attestation","    }","    ","    \/\/\/ Encodes this value into the given encoder.","    \/\/\/ - parameters to: The encoder to write data to.","    \/\/\/ - throws: This function throws an error if any values are invalid for the given encoder’s format.","    public func encode(to encoder: Encoder) throws {","        var container = encoder.container(keyedBy: CodingKeys.self)","        ","        try container.encode(nickname, forKey: .nickname)","        try attestation.encode(to: encoder)","    }","}","","\/\/\/ The asstestation response is a placeholder protocol to support IBM Verify cloud FIDO server implementations","public struct ISVAsstestationResponse: AttestationResponse, Codable {","    public let attestation: PublicKeyCredential<AuthenticatorAttestationResponse>","    public let nickname: String","    public let enabled: Bool","    ","    public init(_ nickname: String, enabled: Bool = true, attestation: PublicKeyCredential<AuthenticatorAttestationResponse>) {","        self.nickname = nickname","        self.enabled = enabled","        self.attestation = attestation","    }","    ","    \/\/\/ Encodes this value into the given encoder.","    \/\/\/ - parameters to: The encoder to write data to.","    \/\/\/ - throws: This function throws an error if any values are invalid for the given encoder’s format.","    public func encode(to encoder: Encoder) throws {","        var container = encoder.container(keyedBy: CodingKeys.self)","        ","        try container.encode(nickname, forKey: .nickname)","        try container.encode(enabled, forKey: .enabled)","        try attestation.encode(to: encoder)","    }","}","","\/\/ MARK: Structures"],"fileName":"CredentialUserData.swift","identifier":"CredentialUserData_3.swift","type":"file","fileType":"swift","highlights":[{"line":60},{"line":61},{"line":62},{"line":63},{"line":64},{"line":65},{"line":66},{"line":67},{"line":68},{"line":69},{"line":70},{"line":71},{"line":72},{"line":73},{"line":74},{"line":75},{"line":76},{"line":77},{"line":78},{"line":79},{"line":80},{"line":81},{"line":83},{"line":84},{"line":85},{"line":86},{"line":87},{"line":88},{"line":89},{"line":90},{"line":91},{"line":92},{"line":93},{"line":94},{"line":95},{"line":96},{"line":97},{"line":98},{"line":99},{"line":100},{"line":101},{"line":102},{"line":103},{"line":104},{"line":105},{"line":106},{"line":107},{"line":108},{"line":109},{"line":110},{"line":111},{"line":112},{"line":113},{"line":114},{"line":115},{"line":116},{"line":117},{"line":118},{"line":119},{"line":120},{"line":121},{"line":122},{"line":123},{"line":124},{"line":125},{"line":126},{"line":127},{"line":128},{"line":129},{"line":130},{"line":131},{"line":132},{"line":133},{"line":134},{"line":135},{"line":136},{"line":137},{"line":138},{"line":139}]},"AttestationInfoViewController_3.swift":{"syntax":"swift","content":["\/\/","\/\/ Copyright contributors to the IBM Security Verify FIDO2 Sample App for iOS project","\/\/","","import Foundation","import UIKit","import CryptoKit","import os.log","import FIDO2","","class AttestationInfoViewController: UIViewController {","    \/\/ MARK: Control variables","    @IBOutlet weak var buttonRegister: UIButton!","    @IBOutlet weak var buttonCancel: UIButton!","    @IBOutlet weak var textfieldNickname: UITextField!","    ","    \/\/ MARK: Variables","    var options: PublicKeyCredentialCreationOptions? = nil","    var accessToken: String? = nil","    var username: String? = nil","    var displayName: String? = nil","    var rpUrl: String? = nil","    var server = isv","    var params: [String: Any] = [:]","","","    override func viewDidLoad() {","        super.viewDidLoad()","        \/\/ Apply some styling to the visual controls.","        textfieldNickname.setBorderBottom()","        textfieldNickname.becomeFirstResponder()","        ","        buttonRegister.setCornerRadius()","                        ","        \/\/ Hides the keyboard","        textfieldNickname.delegate = self","    }","    ","    \/\/ MARK: Control events","    ","    @IBAction func onCancelClick(_ sender: UIButton) {","        dismiss(animated: true)","    }","    ","    @IBAction func onRegisterClick(_ sender: UIButton) {","        guard let options = options else {","            buttonRegister.isEnabled = false","            return","        }","        ","        \/\/ MARK: Metadata UUID","        \/\/ The UUID string represents an identifier to the aaguid.  When configured with FIDO metadata, authenticators are validated and provide additional characistics. Refer to the metadata.json in the Sources folder.","        var uuid = \"6dc9f22d-2c0a-4461-b878-de61e159ec61\"","        if server == isv {","            uuid = \"cdbdaea2-c415-5073-50f7-c04e968640b6\"","        }","        ","        let aaguid = UUID(uuidString: uuid)!","        let provider = PublicKeyCredentialProvider()","        provider.delegate = self","        provider.createCredentialAttestationRequest(aaguid, statementProvider: SelfAttestation(aaguid), options: options)","    }","    ","}","",""],"fileName":"AttestationInfoViewController.swift","identifier":"AttestationInfoViewController_3.swift","type":"file","fileType":"swift","highlights":[{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52},{"line":53},{"line":54},{"line":55},{"line":56},{"line":57},{"line":58},{"line":59},{"line":60},{"line":61},{"line":62},{"line":63},{"line":65},{"line":66}]},"WhoAmIViewController_2.swift":{"syntax":"swift","content":["\/\/","\/\/ Copyright contributors to the IBM Security Verify FIDO2 Sample App for iOS project","\/\/","","import UIKit","","class WhoAmIViewController: UIViewController {","    \/\/ MARK: Control variables","    @IBOutlet weak var textfieldRp: UITextField!","    @IBOutlet weak var textfieldAccessToken: UITextField!","    @IBOutlet weak var buttonWhoAmI: UIButton!","    ","    \/\/ MARK: Variable","    var accessToken: String?","    var rpUrl: String?","    ","    override func viewDidLoad() {","        super.viewDidLoad()","        ","        \/\/ Set styling","        textfieldRp.setBorderBottom()","        textfieldAccessToken.setBorderBottom()","        buttonWhoAmI.setCornerRadius()","        ","        \/\/ Handle UITextField events","        textfieldRp.delegate = self","        textfieldAccessToken.delegate = self","        ","        textfieldRp.becomeFirstResponder()","    }","    ","    \/\/ MARK: Control events","    ","    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {","        if let viewController = segue.destination as? AttestationViewController, let ivcreds = sender as? IVCreds {","            viewController.accessToken = textfieldAccessToken.text!","            viewController.rpUrl = textfieldRp.text!","            viewController.displayName = ivcreds.attributes![\"name\"] as? String","            viewController.userName = ivcreds.username","            viewController.server = isva","            viewController.isModalInPresentation = true","        }","    }","    ","    @IBAction func onWhoAmI(_ sender: UIButton) {","        \/\/ Validate before submitting.","        guard let relyingPartyUrl = textfieldRp.text, !relyingPartyUrl.isEmpty, let accessToken = textfieldAccessToken.text, !accessToken.isEmpty  else {","            let alertController = UIAlertController(title: \"FIDO2 Example\", message: \"Please enter all fields.\", preferredStyle: .alert)","            alertController.addAction(UIAlertAction(title: \"OK\", style: .default, handler: nil))","            ","            self.present(alertController, animated: true)","            return","        }","        ","        buttonWhoAmI.setActivity(true)","        ","        \/\/ Fetch WhoAmI first","        let url = IVCreds.buildURL(relyingPartyUrl)","        IVCreds.getWhoAmI(url, accessToken: accessToken) { result in","            self.buttonWhoAmI.setActivity(false)","            ","            switch result {","            case .success(let ivcreds):","                DispatchQueue.main.async {","                    self.performSegue(withIdentifier: \"ShowAttestation\", sender: ivcreds)","                }","            case .failure(let error):","                let alertController = UIAlertController(title: \"FIDO2 Example\", message: error.localizedDescription, preferredStyle: .alert)","                alertController.addAction(UIAlertAction(title: \"OK\", style: .default, handler: nil))","                ","                DispatchQueue.main.async {","                    self.present(alertController, animated: true)","                }","            }","        }","    }","    ","}"],"fileName":"WhoAmIViewController.swift","identifier":"WhoAmIViewController_2.swift","type":"file","fileType":"swift","highlights":[{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52},{"line":53},{"line":54},{"line":55},{"line":56},{"line":57},{"line":58},{"line":59},{"line":60},{"line":61},{"line":62},{"line":63},{"line":64},{"line":65},{"line":66},{"line":67},{"line":68},{"line":69},{"line":70},{"line":71},{"line":72},{"line":73},{"line":74},{"line":75},{"line":76},{"line":77}]},"FidoService_3.swift":{"syntax":"swift","content":["\/\/","\/\/  FidoService.swift","\/\/","","import Foundation","import FIDO2","import os.log","","","public class FidoService {","    \/\/\/ Returns the shared defaults object.","    internal static let shared = FidoService()","    ","    \/\/ MARK: Networking functions","","    func fetchAttestationOptions(_ relyingPartyURL: String, accessToken: String, params: [String: Any]? = [:], completion: @escaping (Result<PublicKeyCredentialCreationOptions, NetworkError>) -> Void) {","        guard let url = URL(string: relyingPartyURL) else {","            completion(.failure(.badURL))","            return","        }","        ","        var request = URLRequest(url: url)","        request.httpMethod = \"POST\"","        request.setValue(\"application\/json\", forHTTPHeaderField: \"Content-type\")","        request.setValue(\"application\/json\", forHTTPHeaderField: \"Accept\")","        request.setValue(\"Bearer \\(accessToken)\", forHTTPHeaderField: \"Authorization\")","        ","        var parameters = [\"attestation\":\"direct\"] as [String: Any]","        ","        ","        \/\/ Append the additional params to the JSON request.","        if let params = params {","            parameters.merge(params) { (current, _) in current }","        }","        ","        guard let bodyData = try? JSONSerialization.data(withJSONObject: parameters, options: []) else {","            Logger.networking.debug(\"Unable to create request payload for WebAuthn.Attestation.options.\")","            completion(.failure(NetworkError.invalidData))","            return","        }","            ","        Logger.networking.info(\"HTTP request\\n\\(String(data: bodyData, encoding: .utf8)!, privacy: .public)\")","        request.httpBody = bodyData","        ","        URLSession.shared.dataTask(with: request) { (data, response, error) in","            guard let data = data, let _ = response, error == nil else {","                completion(.failure(.general(message: error!.localizedDescription)))","                return","            }","            ","            Logger.networking.info(\"HTTP response\\n\\(String(data: data, encoding: .utf8)!, privacy: .public)\")","            ","            do {","                guard let value = try? JSONDecoder().decode(PublicKeyCredentialCreationOptions.self, from: data) else {","                    Logger.networking.debug(\"Unable to parse PublicKeyCredentialCreationOptions.\")","                    completion(.failure(.general(message: \"Unable to parse PublicKeyCredentialCreationOptions.\")","                    ))","                    return","                }","                completion(.success(value))","            }","        }.resume()","    }","    ","    func createAuthenticator(_ relyingPartyURL: String, accessToken: String, server: String = isv, nickname: String, enabled: Bool = true, attestation: PublicKeyCredential<AuthenticatorAttestationResponse>, completion: @escaping (Result<Void, Error>) -> Void) {","        guard let url = URL(string: relyingPartyURL) else {","            completion(.failure(NetworkError.badURL))","            return","        }","        ","        \/\/ Convert into the data the FIDO server wants.","        let data: Data!","        if server == isv {","            let attestation = ISVAsstestationResponse(nickname, attestation: attestation)","            data = try? JSONEncoder().encode(attestation)","        }","        else {","            let attestation = ISVAAsstestationResponse(nickname, attestation: attestation)","            data = try? JSONEncoder().encode(attestation)","        }","        ","        guard let bodyData = data else {","           Logger.networking.debug(\"Unable to create request payload for WebAuthn.Attestation.create.\")","           completion(.failure(NetworkError.invalidData))","           return","       }","       ","       var request = URLRequest(url: url)","       request.httpMethod = \"POST\"","       request.setValue(\"application\/json\", forHTTPHeaderField: \"Content-type\")","       request.setValue(\"application\/json\", forHTTPHeaderField: \"Accept\")","       request.setValue(\"Bearer \\(accessToken)\", forHTTPHeaderField: \"Authorization\")","       request.httpBody = bodyData","       ","       Logger.networking.info(\"HTTP request\\n\\(String(data: bodyData, encoding: .utf8)!, privacy: .public)\")","       ","       URLSession.shared.dataTask(with: request) { (data, response, error) in","           guard let data = data, let _ = response, error == nil else {","               completion(.failure(NetworkError.general(message: error!.localizedDescription)))","               return","           }","           ","           Logger.networking.info(\"HTTP response\\n\\(String(data: data, encoding: .utf8)!, privacy: .public)\")","           \/\/ Check the response status code that isn't in the 200 range.","           if let httpResponse = response as? HTTPURLResponse, !acceptableStatusCodes.contains(httpResponse.statusCode) {","               \/\/ Attempt to read the response error data.","               completion(.failure(NetworkError.general(message: String(data: data, encoding: .utf8) ?? \"Invalid\")))","               return","           }","","           completion(.success(()))","       }.resume()","    }","}"],"fileName":"FidoService.swift","identifier":"FidoService_3.swift","type":"file","fileType":"swift","highlights":[{"line":64},{"line":65},{"line":66},{"line":67},{"line":68},{"line":69},{"line":70},{"line":71},{"line":72},{"line":73},{"line":74},{"line":75},{"line":76},{"line":77},{"line":78},{"line":79},{"line":80},{"line":81},{"line":82},{"line":83},{"line":84},{"line":85},{"line":86},{"line":87},{"line":88},{"line":89},{"line":90},{"line":91},{"line":92},{"line":93},{"line":94},{"line":95},{"line":96},{"line":97},{"line":98},{"line":99},{"line":100},{"line":101},{"line":102},{"line":103},{"line":104},{"line":105},{"line":106},{"line":107},{"line":108},{"line":109},{"line":110},{"line":111},{"line":112},{"line":113}]},"doc://com.ibm.iOS-SDK/tutorials/iOS-SDK/FIDO2Setup#Create-helper-common-files":{"role":"pseudoSymbol","title":"Create helper & common files","abstract":[{"type":"text","text":"The following tutorial will guide you through the creation of a new application that uses the FIDO2 Assertion and Attestation ceremonies for user verification."}],"identifier":"doc:\/\/com.ibm.iOS-SDK\/tutorials\/iOS-SDK\/FIDO2Setup#Create-helper-common-files","kind":"section","type":"section","url":"\/tutorials\/ios-sdk\/fido2setup#Create-helper-common-files"},"CredentialUserData_4.swift":{"syntax":"swift","content":["\/\/","\/\/ Copyright contributors to the IBM Security Verify FIDO2 Sample App for iOS project","\/\/","","import Foundation","import os.log","import FIDO2","","\/\/ MARK: Enums","","\/\/\/ The attributes that can be returned by the FIDO server for a user.","public enum CredentialUserAttribute: String {","    \/\/\/ The metadata icon of the authenticator","    case icon","    ","    \/\/\/ The unique identifier of the user.","    case userId","    ","    \/\/\/ The name of the user.","    case username","    ","    \/\/\/ The email of the user.","    case email","    ","    \/\/\/ The friendly name of the registration record","    case nickname","    ","    \/\/\/ The metadata description of the authenticator","    case description","    ","    \/\/\/ The AAGuid of the authenticator used ,","    case aaguid","    ","    \/\/\/ The relying party ID this enrollment belongs to.","    case rpId","    ","    \/\/\/ The format of attestation that was performed ,","    case attestationFormat","    ","    \/\/\/ The type of attestation that was performed ,","    case attestationType","    ","    \/\/\/ The attestation trust path of the authenticator.","    case attestationTrustPath","    ","    \/\/\/ The counter of this authenticator.","    case counter","    ","    \/\/\/ The public key issued by the authenticator.","    case credentialPublicKey","    ","    \/\/\/  The credential ID of the authenticator","    case credentialId","    ","    \/\/\/  The authenticator extension for txAuthSimple","    case txAuthSimple","}","","\/\/ MARK: Protocols","\/\/\/ The assertion response returned after a `WebAuthnAPIClient.Assertion.get()` operation.","public protocol AssertionResponse: Decodable {","    \/\/\/ The unique identifier of the user.","    var userId: String {","        get","    }","    ","    \/\/\/ The relying party ID this enrollment belongs to.","    var rpId: String {","        get","    }","    ","    \/\/\/ The friendly name of the registration record.","    var nickname: String {","        get","    }","    ","    \/\/\/ A name-value pair of user related credential attributes.","    var attributes: [CredentialUserAttribute: Any] {","        get","    }","}","","\/\/\/ The assertion response returned after a `WebAuthnAPIClient.Assertion.get()` operation.","public protocol AttestationResponse {","    \/\/\/ The friendly name of the registration record.","    var nickname: String {","        get","    }","    ","    var attestation: PublicKeyCredential<AuthenticatorAttestationResponse> {","        get","    }","}","","\/\/\/ The asstestation response is a placeholder protocol to support IBM Verify on-premise FIDO server implementations","public struct ISVAAsstestationResponse: AttestationResponse, Codable {","    public let attestation: PublicKeyCredential<AuthenticatorAttestationResponse>","    public let nickname: String","    ","    public init(_ nickname: String, attestation: PublicKeyCredential<AuthenticatorAttestationResponse>) {","        self.nickname = nickname","        self.attestation = attestation","    }","    ","    \/\/\/ Encodes this value into the given encoder.","    \/\/\/ - parameters to: The encoder to write data to.","    \/\/\/ - throws: This function throws an error if any values are invalid for the given encoder’s format.","    public func encode(to encoder: Encoder) throws {","        var container = encoder.container(keyedBy: CodingKeys.self)","        ","        try container.encode(nickname, forKey: .nickname)","        try attestation.encode(to: encoder)","    }","}","","\/\/\/ The asstestation response is a placeholder protocol to support IBM Verify cloud FIDO server implementations","public struct ISVAsstestationResponse: AttestationResponse, Codable {","    public let attestation: PublicKeyCredential<AuthenticatorAttestationResponse>","    public let nickname: String","    public let enabled: Bool","    ","    public init(_ nickname: String, enabled: Bool = true, attestation: PublicKeyCredential<AuthenticatorAttestationResponse>) {","        self.nickname = nickname","        self.enabled = enabled","        self.attestation = attestation","    }","    ","    \/\/\/ Encodes this value into the given encoder.","    \/\/\/ - parameters to: The encoder to write data to.","    \/\/\/ - throws: This function throws an error if any values are invalid for the given encoder’s format.","    public func encode(to encoder: Encoder) throws {","        var container = encoder.container(keyedBy: CodingKeys.self)","        ","        try container.encode(nickname, forKey: .nickname)","        try container.encode(enabled, forKey: .enabled)","        try attestation.encode(to: encoder)","    }","}","","\/\/ MARK: Structures","","\/\/\/ The `ISVAAssertionResponse` represents a collection of user credential properties associated with the response of a `WebAuthnAPIClient.Assertion.get()` operation.","public struct ISVAAssertionResponse: AssertionResponse {","    \/\/\/ The name to display representing the user.","    public var displayName: String","    ","    \/\/\/ The email of the user.","    public var email: String","    ","    \/\/\/ The name of the user.","    public var username: String","    ","    \/\/\/ The image associated with the authenticator or service.","    public var userId: String","    ","    \/\/\/ The friendly name of the registration record","    public var nickname: String","    ","    \/\/\/ The relying party ID this enrollment belongs to.","    public var rpId: String = \"\"","    ","    \/\/\/ A name-value pair of user related credential attributes.","    public var attributes: [CredentialUserAttribute: Any] = [:]","    ","    enum CodingKeys: String, CodingKey {","        case user, attributes","    }","    ","    enum UserCodingKeys: String, CodingKey {","        case id, name","    }","","    enum AttributesCodingKeys: String, CodingKey {","        case responseData, credentialData","    }","    ","    enum CredentialDataCodingKeys: String, CodingKey {","        case loginDetails = \"fidoLoginDetails\"","        case friendlyName = \"AUTHENTICATOR_FRIENDLY_NAME\"","        case authenticationLevel = \"AUTHENTICATION_LEVEL\"","        case displayName","        case email","        case icon = \"AUTHENTICATOR_ICON\"","    }","        ","    \/\/\/ Creates a new instance by decoding from the given decoder","    \/\/\/ - parameter decoder: The decoder to read data from.","    public init(from decoder: Decoder) throws {","        let container = try decoder.container(keyedBy: CodingKeys.self)","    ","        \/\/ User container","        let userContainer = try container.nestedContainer(keyedBy: UserCodingKeys.self, forKey: .user)","        self.userId = try userContainer.decode(String.self, forKey: .id)","        self.username = try userContainer.decode(String.self, forKey: .name)","        ","        \/\/ Attributes contrainer","        let attributesContainer = try container.nestedContainer(keyedBy: AttributesCodingKeys.self, forKey: .attributes)","        ","        \/\/ Credential data container","        let credentialDataContainer = try attributesContainer.nestedContainer(keyedBy: CredentialDataCodingKeys.self, forKey: .credentialData)","        self.displayName = try credentialDataContainer.decode(String.self, forKey: .displayName)","        self.email = try credentialDataContainer.decode(String.self, forKey: .email)","        self.nickname = try credentialDataContainer.decode(String.self, forKey: .friendlyName)","        ","        \/\/ Decode fidoLoginDetails","        let loginDetails = try credentialDataContainer.decode(String.self, forKey: .loginDetails)","        self.attributes = parseLoginDetails(json: loginDetails)","        ","        \/\/ Get the other properties from the attributes.","        self.rpId = attributes[.rpId] as! String","    }","    ","    \/\/\/ Parse the fidoLoginDetails from JSON into a Dictionary.","    \/\/\/ - parameter value: The JSON data representing the fido login details.","    \/\/\/ - returns: Dictionary of `CredentialUserAttribute` keys and values.","    private func parseLoginDetails(json value: String) -> [CredentialUserAttribute: Any] {","        var result = [CredentialUserAttribute: Any]()","        ","        guard let data = value.data(using: .utf8) else {","            Logger().debug(\"Unable to convert JSON string to Data.\")","            return result","        }","        ","        do {","            \/\/ Make sure this JSON is in the format we expect","            if let dictionary = try JSONSerialization.jsonObject(with: data, options: []) as? [String: Any] {","                \/\/ Read out values and add to return dictionary.","                let requestData = dictionary[\"requestData\"] as! [String: Any]","                print(\"requestData keys \\(requestData.keys)\")","                ","                if let authData = requestData[\"authData\"] as? [String: Any] {","                    authData.forEach {","                       switch $0.key {","                        case \"extensions\":","                           let extensions = authData[\"extensions\"] as! [String: Any]","                            result[.txAuthSimple] = extensions[\"txAuthSimple\"] as! String","                        default:","                            break","                        ","                        }","                    }","                }","                ","                let registration = requestData[\"registration\"] as! [String: Any]","                registration.forEach {","                    switch $0.key {","                    case \"metadata\":","                        let metadata = registration[\"metadata\"] as! [String: Any]","                        result[.icon] = metadata[\"icon\"] as! String","                        result[.description] = metadata[\"description\"] as! String","                    case \"attestationTrustPath\":","                        result[.attestationTrustPath] = $0.value","                    case \"format\":","                        result[.attestationFormat] = $0.value","                    case \"attestationType\":","                        result[.attestationType] = $0.value","                    case \"counter\":","                        result[.counter] = $0.value as! Int","                    case \"publicKey\":","                        result[.credentialPublicKey] = $0.value","                    case \"rpId\":","                        result[.rpId] = $0.value","                    case \"userId\":","                        result[.userId] = $0.value","                    case \"aaGuid\":","                        result[.aaguid] = $0.value","                    case \"credentialId\":","                        result[.credentialId] = $0.value","                    case \"username\":","                        result[.username] = $0.value","                    default:","                        break","                    }","                }","            }","        }","        catch let error {","            Logger().debug(\"Failed to load JSON. \\(error.localizedDescription, privacy: .public)\")","        }","        ","        return result","    }","}","","\/\/\/ The `ISVAssertionResponse` represents a collection of user credential properties associated with the response of a `WebAuthnAPIClient.Assertion.get()` operation.","public struct ISVAssertionResponse: AssertionResponse {","    \/\/\/ The image associated with the authenticator or service.","    public var userId: String","    ","    \/\/\/ The friendly name of the registration record","    public var nickname: String","    ","    \/\/\/ The relying party ID this enrollment belongs to.","    public var rpId: String = \"\"","    ","    \/\/\/ The type of authenticator factor.","    public var type: String","    ","    \/\/\/ A name-value pair of user related credential attributes.","    public var attributes: [CredentialUserAttribute: Any] = [:]","    ","    enum CodingKeys: String, CodingKey {","        case userId, type, attributes","    }","","    enum AttributesCodingKeys: String, CodingKey {","        case attestationType, attestationFormat, nickname, rpId, aaGuid, icon, description","    }","        ","    \/\/\/ Creates a new instance by decoding from the given decoder","    \/\/\/ - parameter decoder: The decoder to read data from.","    public init(from decoder: Decoder) throws {","        let container = try decoder.container(keyedBy: CodingKeys.self)","    ","        self.userId = try container.decode(String.self, forKey: .userId)","        self.type = try container.decode(String.self, forKey: .type)","        ","        \/\/ Attributes contrainer","        let attributesContainer = try container.nestedContainer(keyedBy: AttributesCodingKeys.self, forKey: .attributes)","        ","        var attributes = [CredentialUserAttribute:Any]()","        attributes[.rpId] = try attributesContainer.decode(String.self, forKey: .rpId)","        attributes[.nickname] = try attributesContainer.decode(String.self, forKey: .nickname)","        attributes[.aaguid] = try attributesContainer.decode(String.self, forKey: .aaGuid)","        attributes[.attestationFormat] = try attributesContainer.decode(String.self, forKey: .attestationFormat)","        attributes[.attestationType] = try attributesContainer.decode(String.self, forKey: .attestationType)","        attributes[.icon] = try attributesContainer.decodeIfPresent(String.self, forKey: .icon)","        attributes[.description] = try attributesContainer.decodeIfPresent(String.self, forKey: .description)","        ","        \/\/ Get the other properties from the attributes.","        self.rpId = attributes[.rpId] as! String","        self.nickname = attributes[.nickname] as! String","        ","        self.attributes = attributes","    }","}",""],"fileName":"CredentialUserData.swift","identifier":"CredentialUserData_4.swift","type":"file","fileType":"swift","highlights":[{"line":141},{"line":142},{"line":143},{"line":144},{"line":145},{"line":146},{"line":147},{"line":148},{"line":149},{"line":150},{"line":151},{"line":152},{"line":153},{"line":154},{"line":155},{"line":156},{"line":157},{"line":158},{"line":159},{"line":160},{"line":161},{"line":162},{"line":163},{"line":164},{"line":165},{"line":166},{"line":167},{"line":168},{"line":169},{"line":170},{"line":171},{"line":172},{"line":173},{"line":174},{"line":175},{"line":176},{"line":177},{"line":178},{"line":179},{"line":180},{"line":181},{"line":182},{"line":183},{"line":184},{"line":185},{"line":186},{"line":187},{"line":188},{"line":189},{"line":190},{"line":191},{"line":192},{"line":193},{"line":194},{"line":195},{"line":196},{"line":197},{"line":198},{"line":199},{"line":200},{"line":201},{"line":202},{"line":203},{"line":204},{"line":205},{"line":206},{"line":207},{"line":208},{"line":209},{"line":210},{"line":211},{"line":212},{"line":213},{"line":214},{"line":215},{"line":216},{"line":217},{"line":218},{"line":219},{"line":220},{"line":221},{"line":222},{"line":223},{"line":224},{"line":225},{"line":226},{"line":227},{"line":228},{"line":229},{"line":230},{"line":231},{"line":232},{"line":233},{"line":234},{"line":235},{"line":236},{"line":237},{"line":238},{"line":239},{"line":240},{"line":241},{"line":242},{"line":243},{"line":244},{"line":245},{"line":246},{"line":247},{"line":248},{"line":249},{"line":250},{"line":251},{"line":252},{"line":253},{"line":254},{"line":255},{"line":256},{"line":257},{"line":258},{"line":259},{"line":260},{"line":261},{"line":262},{"line":263},{"line":264},{"line":265},{"line":266},{"line":267},{"line":268},{"line":269},{"line":270},{"line":271},{"line":272},{"line":273},{"line":274},{"line":275},{"line":276},{"line":277},{"line":278},{"line":279},{"line":280},{"line":281},{"line":282},{"line":283},{"line":284},{"line":285},{"line":286},{"line":287},{"line":288},{"line":289},{"line":290},{"line":291},{"line":292},{"line":293},{"line":294},{"line":295},{"line":296},{"line":297},{"line":298},{"line":299},{"line":300},{"line":301},{"line":302},{"line":303},{"line":304},{"line":305},{"line":306},{"line":307},{"line":308},{"line":309},{"line":310},{"line":311},{"line":312},{"line":313},{"line":314},{"line":315},{"line":316},{"line":317},{"line":318},{"line":319},{"line":320},{"line":321},{"line":322},{"line":323},{"line":324},{"line":325},{"line":326},{"line":327},{"line":328},{"line":329},{"line":330},{"line":331},{"line":332},{"line":333},{"line":334},{"line":335},{"line":336},{"line":337}]},"step_1_new_project.png":{"alt":"The new project screen for XCode, with the 'New Project' button highlighted.","type":"image","identifier":"step_1_new_project.png","variants":[{"url":"\/images\/step_1_new_project.png","traits":["1x","light"]}]},"doc://com.ibm.iOS-SDK/tutorials/iOS-SDK/FIDO2Setup#Create-landing-page-and-login-screens":{"role":"pseudoSymbol","title":"Create landing page and login screens","abstract":[{"type":"text","text":"The following tutorial will guide you through the creation of a new application that uses the FIDO2 Assertion and Attestation ceremonies for user verification."}],"identifier":"doc:\/\/com.ibm.iOS-SDK\/tutorials\/iOS-SDK\/FIDO2Setup#Create-landing-page-and-login-screens","kind":"section","type":"section","url":"\/tutorials\/ios-sdk\/fido2setup#Create-landing-page-and-login-screens"},"LoginViewController_2.swift":{"syntax":"swift","content":["\/\/","\/\/ Copyright contributors to the IBM Security Verify FIDO2 Sample App for iOS project","\/\/","","import UIKit","import os.log","import FIDO2","","class LoginViewController: UIViewController {","    \/\/ MARK: Control variables","    @IBOutlet weak var textfieldPassword: UITextField!","    @IBOutlet weak var textfieldTenant: UITextField!","    @IBOutlet weak var textfieldUsername: UITextField!","    @IBOutlet weak var textfieldClientId: UITextField!","    @IBOutlet weak var buttonLogin: UIButton!","    ","    \/\/ MARK: Variable","    var accessToken: String?","    var rpUrl: String?","    ","    override func viewDidLoad() {","        super.viewDidLoad()","        ","        \/\/ Set styling","        textfieldPassword.setBorderBottom()","        textfieldTenant.setBorderBottom()","        textfieldUsername.setBorderBottom()","        textfieldClientId.setBorderBottom()","        buttonLogin.setCornerRadius()","        ","        \/\/ Handle UITextField events","        textfieldTenant.delegate = self","        textfieldUsername.delegate = self","        textfieldPassword.delegate = self","        textfieldClientId.delegate = self","        ","        textfieldTenant.becomeFirstResponder()","    }","}"],"fileName":"LoginViewController.swift","identifier":"LoginViewController_2.swift","type":"file","fileType":"swift","highlights":[{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38}]},"WhoAmIViewController_1.swift":{"syntax":"swift","content":["\/\/","\/\/ Copyright contributors to the IBM Security Verify FIDO2 Sample App for iOS project","\/\/","","import UIKit","","class WhoAmIViewController: UIViewController {","    \/\/ MARK: Control variables","    @IBOutlet weak var textfieldRp: UITextField!","    @IBOutlet weak var textfieldAccessToken: UITextField!","    @IBOutlet weak var buttonWhoAmI: UIButton!","    ","    \/\/ MARK: Variable","    var accessToken: String?","    var rpUrl: String?","    ","    override func viewDidLoad() {","        super.viewDidLoad()","        ","        \/\/ Set styling","        textfieldRp.setBorderBottom()","        textfieldAccessToken.setBorderBottom()","        buttonWhoAmI.setCornerRadius()","        ","        \/\/ Handle UITextField events","        textfieldRp.delegate = self","        textfieldAccessToken.delegate = self","        ","        textfieldRp.becomeFirstResponder()","    }","    ","    \/\/ MARK: Control events","    ","    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {","        if let viewController = segue.destination as? AttestationViewController, let ivcreds = sender as? IVCreds {","            viewController.accessToken = textfieldAccessToken.text!","            viewController.rpUrl = textfieldRp.text!","            viewController.displayName = ivcreds.attributes![\"name\"] as? String","            viewController.userName = ivcreds.username","            viewController.server = isva","            viewController.isModalInPresentation = true","        }","    }","    ","}"],"fileName":"WhoAmIViewController.swift","identifier":"WhoAmIViewController_1.swift","type":"file","fileType":"swift","highlights":[]},"AppHelper_2.swift":{"syntax":"swift","content":["\/\/","\/\/ Copyright contributors to the IBM Security Verify FIDO2 Sample App for iOS project","\/\/","","import UIKit","import os.log","import LocalAuthentication","import FIDO2","","\/\/ MARK: Constants","let bundleIdentifier = Bundle.main.bundleIdentifier!","let isva = \"isva\"","let isv = \"isv\"","","\/\/ MARK: Enums","","\/\/ MARK: Functions","","\/\/ MARK: Extensions"],"fileName":"AppHelper.swift","identifier":"AppHelper_2.swift","type":"file","fileType":"swift","highlights":[{"line":11},{"line":12},{"line":13}]},"AppHelper_5.swift":{"syntax":"swift","content":["\/\/","\/\/ Copyright contributors to the IBM Security Verify FIDO2 Sample App for iOS project","\/\/","","import UIKit","import os.log","import LocalAuthentication","import FIDO2","","\/\/ MARK: Constants","let bundleIdentifier = Bundle.main.bundleIdentifier!","let isva = \"isva\"","let isv = \"isv\"","","\/\/ MARK: Enums","enum Store: String {","    case relyingPartyUrl","    case nickname","    case displayName","    case username","    case accessToken","    case createdDate","    case created","    case server","}","","enum NetworkError: Error, LocalizedError {","    \/\/\/ Invalid or format of URL is incorrect.","    case badURL","    ","    \/\/\/ Invalid or no data returned from the serve","    case invalidData","    ","    \/\/\/ General error with custom message.","    case general(message: String)","    ","    public var errorDescription: String? {","       switch self {","       case .badURL:","           return NSLocalizedString(\"Invalid or format of URL is incorrect.\", comment: \"Invalid URL\")","       case .invalidData:","           return NSLocalizedString(\"Invalid or no data returned from the server.\", comment: \"Invalid Data\")","       case .general(message: let message):","           return NSLocalizedString(message, comment: \"General Error\")","       }","   }","}","","\/\/ MARK: Functions","","\/\/\/ HTTP response status codes that are acceptable.","var acceptableStatusCodes: [Int] {","    return Array(200 ..< 300)","}","","func createBottomBorder(width: CGFloat, height: CGFloat, color: UIColor = .systemGray3) -> CALayer {","    let layer = CALayer()","    layer.frame = CGRect(x: 0.0, y: height - 1, width: width, height: 1.0)","    layer.backgroundColor = color.cgColor","    return layer","}","","\/\/ MARK: Extensions","","extension UIViewController: UITextFieldDelegate {","    \/\/\/ Asks the delegate whether to process the pressing of the Return button for the text field.","    \/\/\/ - parameter textField: The text field whose return button was pressed.","    public func textFieldShouldReturn(_ textField: UITextField) -> Bool {","        textField.resignFirstResponder()","        return true","    }","}","","extension UIButton {","    \/\/\/ Sets an `UIActivityIndicatorView` to the button","    \/\/\/ - parameter show: The flag to show or hide the activity indicator.","    \/\/\/ - remark: This operation executes on the UI thread.","    func setActivity(_ show: Bool) {","        DispatchQueue.main.async {","            let tag = 808404","            ","            if show {","                self.isEnabled = false","                ","                let buttonHeight = self.bounds.size.height","                let buttonWidth = self.bounds.size.width","                ","                let activity = UIActivityIndicatorView()","                activity.color = .white","                activity.style = .medium","                activity.center = CGPoint(x: buttonWidth - activity.frame.width - 30, y: buttonHeight \/ 2)","                activity.tag = tag","                ","                self.addSubview(activity)","                activity.startAnimating()","            }","            else {","                self.isEnabled = true","                ","                if let activity = self.viewWithTag(tag) as? UIActivityIndicatorView {","                    activity.stopAnimating()","                    activity.removeFromSuperview()","                }","            }","        }","    }","}","","extension UIView {","    func setCornerRadius(_ cornerRadius: CGFloat = 8) {","        self.layer.cornerRadius = cornerRadius","    }","    ","    func setBorderBottom(color: UIColor = .systemGray3, lineHeight: CGFloat = 1) {","        let layer = CALayer()","        layer.frame = CGRect(x: 0, y: self.frame.height - lineHeight, width: UIScreen.main.bounds.width, height: lineHeight)","        layer.backgroundColor = color.cgColor","","        self.layer.addSublayer(layer)","        self.layer.masksToBounds = true","    }","}","",""],"fileName":"AppHelper.swift","identifier":"AppHelper_5.swift","type":"file","fileType":"swift","highlights":[{"line":64},{"line":65},{"line":66},{"line":67},{"line":68},{"line":69},{"line":70},{"line":71},{"line":72},{"line":73},{"line":74},{"line":75},{"line":76},{"line":77},{"line":78},{"line":79},{"line":80},{"line":81},{"line":82},{"line":83},{"line":84},{"line":85},{"line":86},{"line":87},{"line":88},{"line":89},{"line":90},{"line":91},{"line":92},{"line":93},{"line":94},{"line":95},{"line":96},{"line":97},{"line":98},{"line":99},{"line":100},{"line":101},{"line":102},{"line":103},{"line":104},{"line":105},{"line":106},{"line":107},{"line":108},{"line":109},{"line":110},{"line":111},{"line":112},{"line":113},{"line":114},{"line":115},{"line":116},{"line":117},{"line":118},{"line":119},{"line":120},{"line":121},{"line":122},{"line":123},{"line":124}]},"LoginViewController_4.swift":{"syntax":"swift","content":["\/\/","\/\/ Copyright contributors to the IBM Security Verify FIDO2 Sample App for iOS project","\/\/","","import UIKit","import os.log","import FIDO2","","class LoginViewController: UIViewController {","    \/\/ MARK: Control variables","    @IBOutlet weak var textfieldPassword: UITextField!","    @IBOutlet weak var textfieldTenant: UITextField!","    @IBOutlet weak var textfieldUsername: UITextField!","    @IBOutlet weak var textfieldClientId: UITextField!","    @IBOutlet weak var buttonLogin: UIButton!","    ","    \/\/ MARK: Variable","    var accessToken: String?","    var rpUrl: String?","    ","    override func viewDidLoad() {","        super.viewDidLoad()","        ","        \/\/ Set styling","        textfieldPassword.setBorderBottom()","        textfieldTenant.setBorderBottom()","        textfieldUsername.setBorderBottom()","        textfieldClientId.setBorderBottom()","        buttonLogin.setCornerRadius()","        ","        \/\/ Handle UITextField events","        textfieldTenant.delegate = self","        textfieldUsername.delegate = self","        textfieldPassword.delegate = self","        textfieldClientId.delegate = self","        ","        textfieldTenant.becomeFirstResponder()","    }","    ","    \/\/ MARK: Control events","    ","    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {","        if let viewController = segue.destination as? AttestationViewController {","            viewController.accessToken = accessToken!","            viewController.rpUrl = rpUrl!","            viewController.server = isv","            viewController.userName = textfieldUsername.text!","            viewController.params = [\"authenticatorSelection\": [\"requireResidentKey\":true]]","            viewController.isModalInPresentation = true","        }","    }","    ","    @IBAction func onLogin(_ sender: UIButton) {","        \/\/ Validate before submitting.","        guard let tenantUrl = textfieldTenant.text, !tenantUrl.isEmpty, let clientId = textfieldClientId.text, !clientId.isEmpty, let username = textfieldUsername.text, !username.isEmpty, let password = textfieldPassword.text, !password.isEmpty else {","            let alertController = UIAlertController(title: \"FIDO2 Example\", message: \"Please enter all fields.\", preferredStyle: .alert)","            alertController.addAction(UIAlertAction(title: \"OK\", style: .default, handler: nil))","            ","            self.present(alertController, animated: true)","            return","        }","        ","        buttonLogin.setActivity(true)","        ","        \/\/ Perform the login attempt.","        login(url: tenantUrl, clientId: clientId, username: username, password: password) {","            result in","            ","            switch result {","            case .failure(let error):","                self.buttonLogin.setActivity(false)","                Logger.app.debug(\"Login error. \\(error.localizedDescription)\")","","                let alertController = UIAlertController(title: \"FIDO2 Example\", message: error.localizedDescription, preferredStyle: .alert)","                alertController.addAction(UIAlertAction(title: \"OK\", style: .default, handler: nil))","                ","                DispatchQueue.main.async {","                    self.present(alertController, animated: true)","                }","            case .success(let value):","                self.accessToken = value","                ","                self.fidoRegistration(url: tenantUrl, accessToken: value) { result in","                    self.buttonLogin.setActivity(false)","                    ","                    switch result {","                    case .failure(let error):","                        Logger.app.debug(\"Login error. \\(error.localizedDescription)\")","","                        let alertController = UIAlertController(title: \"FIDO2 Example\", message: error.localizedDescription, preferredStyle: .alert)","                        alertController.addAction(UIAlertAction(title: \"OK\", style: .default, handler: nil))","                        ","                        DispatchQueue.main.async {","                            self.present(alertController, animated: true)","                        }","                    case .success(let value):","                        \/\/ Create the replying party string.","                        self.rpUrl = self.createRelyingPartyUrl(baseUrl: tenantUrl, registrationId: value)","                        DispatchQueue.main.async {","                            self.performSegue(withIdentifier: \"ShowAttestation\", sender: nil)","                        }","                    }","                }","            }","        }","    }","}"],"fileName":"LoginViewController.swift","identifier":"LoginViewController_4.swift","type":"file","fileType":"swift","highlights":[{"line":52},{"line":53},{"line":54},{"line":55},{"line":56},{"line":57},{"line":58},{"line":59},{"line":60},{"line":61},{"line":62},{"line":63},{"line":64},{"line":65},{"line":66},{"line":67},{"line":68},{"line":69},{"line":70},{"line":71},{"line":72},{"line":73},{"line":74},{"line":75},{"line":76},{"line":77},{"line":78},{"line":79},{"line":80},{"line":81},{"line":82},{"line":83},{"line":84},{"line":85},{"line":86},{"line":87},{"line":88},{"line":89},{"line":90},{"line":91},{"line":92},{"line":93},{"line":94},{"line":95},{"line":96},{"line":97},{"line":98},{"line":99},{"line":100},{"line":101},{"line":102},{"line":103},{"line":104},{"line":105},{"line":106}]},"AssertionViewController_1.swift":{"syntax":"swift","content":["\/\/","\/\/ Copyright contributors to the IBM Security Verify FIDO2 Sample App for iOS project","\/\/","","import Foundation","import UIKit","import FIDO2","import CryptoKit","","class AssertionViewController: UIViewController {","    \/\/ MARK: Control variables","    @IBOutlet weak var buttonAuthenticate: UIButton!","    @IBOutlet weak var buttonRemove: UIButton!","    @IBOutlet weak var labelDisplayName: UILabel!","    @IBOutlet weak var labelHostName: UILabel!","    @IBOutlet weak var labelNickName: UILabel!","    @IBOutlet weak var labelCreatedDate: UILabel!","    @IBOutlet weak var imageView: UIImageView!","    @IBOutlet weak var switchEauthExt: UISwitch!","    ","    ","}"],"fileName":"AssertionViewController.swift","identifier":"AssertionViewController_1.swift","type":"file","fileType":"swift","highlights":[]},"AttestationViewController_3.swift":{"syntax":"swift","content":["\/\/","\/\/ Copyright contributors to the IBM Security Verify FIDO2 Sample App for iOS project","\/\/","","import UIKit","import LocalAuthentication","import CryptoKit","import os.log","import FIDO2","","class AttestationViewController: UIViewController {","    \/\/ MARK: Control variables","    @IBOutlet weak var buttonOption: UIButton!","    @IBOutlet weak var labelRp: UILabel!","    @IBOutlet weak var labelAccessToken: UILabel!","    ","    \/\/ MARK: Variables","    var displayName: String?","    var accessToken: String?","    var rpUrl: String?","    var userName: String?","    var server = isv","    var params: [String: Any] = [:]","    ","    override func viewDidLoad() {","        super.viewDidLoad()","        \/\/ Apply some styling to the visual controls.","        buttonOption.setCornerRadius()","        ","        guard let accessToken = accessToken, let rpUrl = rpUrl else {","            return","        }","        ","        labelRp.text = \"\\(rpUrl)\/attestation\/options\"","        labelAccessToken.text = accessToken","    }","    ","    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {","        if let viewController = segue.destination as? AttestationInfoViewController, let options = sender as? PublicKeyCredentialCreationOptions {","            viewController.options = options","            viewController.accessToken = accessToken!","            viewController.rpUrl = \"\\(rpUrl!)\"","            viewController.params = self.params","            viewController.username = self.userName","            viewController.displayName = self.displayName","            viewController.server = self.server","            viewController.isModalInPresentation = true","        }","    }","    ","    \/\/ MARK: Control events","    ","    @IBAction func onOptionClick(_ sender: UIButton) {","        \/\/ Validate before submitting.","        guard let relyingPartyUrl = labelRp.text, let accessToken = accessToken else {","            let alertController = UIAlertController(title: \"FIDO2 Example\", message: \"The replying party or access token are not available.\", preferredStyle: .alert)","            alertController.addAction(UIAlertAction(title: \"OK\", style: .default, handler: nil))","            ","            self.present(alertController, animated: true)","            return","        }","        ","        buttonOption.setActivity(true)","        ","        if self.server == isva, let username = userName {","            params.updateValue(username, forKey: \"username\")","        }","        ","        FidoService.shared.fetchAttestationOptions(relyingPartyUrl, accessToken: accessToken) { result in","            self.buttonOption.setActivity(false)","            ","            switch result {","            case .success(let value):","                \/\/ Transition to info view controller.","                DispatchQueue.main.async {","                    self.performSegue(withIdentifier: \"ShowAttestationOptionsInfo\", sender: value)","                }","            case .failure(let error):","                let alertController = UIAlertController(title: \"FIDO2 Example\", message: error.localizedDescription, preferredStyle: .alert)","                alertController.addAction(UIAlertAction(title: \"OK\", style: .default, handler: nil))","                ","                DispatchQueue.main.async {","                    self.present(alertController, animated: true)","                }","            }","        }","    }","    ","}"],"fileName":"AttestationViewController.swift","identifier":"AttestationViewController_3.swift","type":"file","fileType":"swift","highlights":[{"line":51},{"line":52},{"line":53},{"line":54},{"line":55},{"line":56},{"line":57},{"line":58},{"line":59},{"line":60},{"line":61},{"line":62},{"line":63},{"line":64},{"line":65},{"line":66},{"line":67},{"line":68},{"line":69},{"line":70},{"line":71},{"line":72},{"line":73},{"line":74},{"line":75},{"line":76},{"line":77},{"line":78},{"line":79},{"line":80},{"line":81},{"line":82},{"line":83},{"line":84},{"line":85},{"line":86},{"line":87},{"line":88}]},"step_7_authentication_check.png":{"alt":"A screenshot of the 'Add Package' pop-up menu with the FIDO2 SDK ticked in the package select screen.","type":"image","identifier":"step_7_authentication_check.png","variants":[{"url":"\/images\/step_7_authentication_check.png","traits":["1x","light"]}]},"step_6_find_package.png":{"alt":"A screenshot of the package menu with the search bar highlighted, input with the text 'https:\/\/github.com\/ibm-security-verify\/verify-sdk-ios.git', and the 'Add Package' button highlighted.","type":"image","identifier":"step_6_find_package.png","variants":[{"url":"\/images\/step_6_find_package.png","traits":["1x","light"]}]},"CredentialUserData_1.swift":{"syntax":"swift","content":["\/\/","\/\/ Copyright contributors to the IBM Security Verify FIDO2 Sample App for iOS project","\/\/","","import Foundation","import os.log","import FIDO2","","\/\/ MARK: Enums","","\/\/ MARK: Protocols","","\/\/ MARK: Structures"],"fileName":"CredentialUserData.swift","identifier":"CredentialUserData_1.swift","type":"file","fileType":"swift","highlights":[]},"AttestationInfoViewController_1.swift":{"syntax":"swift","content":["\/\/","\/\/ Copyright contributors to the IBM Security Verify FIDO2 Sample App for iOS project","\/\/","","import Foundation","import UIKit","import CryptoKit","import os.log","import FIDO2","","class AttestationInfoViewController: UIViewController {","    \/\/ MARK: Control variables","    @IBOutlet weak var buttonRegister: UIButton!","    @IBOutlet weak var buttonCancel: UIButton!","    @IBOutlet weak var textfieldNickname: UITextField!","    ","}"],"fileName":"AttestationInfoViewController.swift","identifier":"AttestationInfoViewController_1.swift","type":"file","fileType":"swift","highlights":[]},"FidoService_2.swift":{"syntax":"swift","content":["\/\/","\/\/  FidoService.swift","\/\/","","import Foundation","import FIDO2","import os.log","","","public class FidoService {","    \/\/\/ Returns the shared defaults object.","    internal static let shared = FidoService()","    ","    \/\/ MARK: Networking functions","","    func fetchAttestationOptions(_ relyingPartyURL: String, accessToken: String, params: [String: Any]? = [:], completion: @escaping (Result<PublicKeyCredentialCreationOptions, NetworkError>) -> Void) {","        guard let url = URL(string: relyingPartyURL) else {","            completion(.failure(.badURL))","            return","        }","        ","        var request = URLRequest(url: url)","        request.httpMethod = \"POST\"","        request.setValue(\"application\/json\", forHTTPHeaderField: \"Content-type\")","        request.setValue(\"application\/json\", forHTTPHeaderField: \"Accept\")","        request.setValue(\"Bearer \\(accessToken)\", forHTTPHeaderField: \"Authorization\")","        ","        var parameters = [\"attestation\":\"direct\"] as [String: Any]","        ","        ","        \/\/ Append the additional params to the JSON request.","        if let params = params {","            parameters.merge(params) { (current, _) in current }","        }","        ","        guard let bodyData = try? JSONSerialization.data(withJSONObject: parameters, options: []) else {","            Logger.networking.debug(\"Unable to create request payload for WebAuthn.Attestation.options.\")","            completion(.failure(NetworkError.invalidData))","            return","        }","            ","        Logger.networking.info(\"HTTP request\\n\\(String(data: bodyData, encoding: .utf8)!, privacy: .public)\")","        request.httpBody = bodyData","        ","        URLSession.shared.dataTask(with: request) { (data, response, error) in","            guard let data = data, let _ = response, error == nil else {","                completion(.failure(.general(message: error!.localizedDescription)))","                return","            }","            ","            Logger.networking.info(\"HTTP response\\n\\(String(data: data, encoding: .utf8)!, privacy: .public)\")","            ","            do {","                guard let value = try? JSONDecoder().decode(PublicKeyCredentialCreationOptions.self, from: data) else {","                    Logger.networking.debug(\"Unable to parse PublicKeyCredentialCreationOptions.\")","                    completion(.failure(.general(message: \"Unable to parse PublicKeyCredentialCreationOptions.\")","                    ))","                    return","                }","                completion(.success(value))","            }","        }.resume()","    }","}"],"fileName":"FidoService.swift","identifier":"FidoService_2.swift","type":"file","fileType":"swift","highlights":[{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52},{"line":53},{"line":54},{"line":55},{"line":56},{"line":57},{"line":58},{"line":59},{"line":60},{"line":61},{"line":62},{"line":63}]},"eye-bee-m.jpeg":{"alt":"The IBM logo stylised as a an eye, a bee, and the letter m.","type":"image","identifier":"eye-bee-m.jpeg","variants":[{"url":"\/images\/eye-bee-m.jpeg","traits":["1x","light"]}]},"AppHelper_3.swift":{"syntax":"swift","content":["\/\/","\/\/ Copyright contributors to the IBM Security Verify FIDO2 Sample App for iOS project","\/\/","","import UIKit","import os.log","import LocalAuthentication","import FIDO2","","\/\/ MARK: Constants","let bundleIdentifier = Bundle.main.bundleIdentifier!","let isva = \"isva\"","let isv = \"isv\"","","\/\/ MARK: Enums","enum Store: String {","    case relyingPartyUrl","    case nickname","    case displayName","    case username","    case accessToken","    case createdDate","    case created","    case server","}","","enum NetworkError: Error, LocalizedError {","    \/\/\/ Invalid or format of URL is incorrect.","    case badURL","    ","    \/\/\/ Invalid or no data returned from the serve","    case invalidData","    ","    \/\/\/ General error with custom message.","    case general(message: String)","    ","    public var errorDescription: String? {","       switch self {","       case .badURL:","           return NSLocalizedString(\"Invalid or format of URL is incorrect.\", comment: \"Invalid URL\")","       case .invalidData:","           return NSLocalizedString(\"Invalid or no data returned from the server.\", comment: \"Invalid Data\")","       case .general(message: let message):","           return NSLocalizedString(message, comment: \"General Error\")","       }","   }","}","","\/\/ MARK: Functions","","\/\/ MARK: Extensions"],"fileName":"AppHelper.swift","identifier":"AppHelper_3.swift","type":"file","fileType":"swift","highlights":[{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48}]},"step_4_swift_ui.png":{"alt":"A screenshot of the configuration screen of a new project, with the 'Interface' and the 'language' highlighted and set to 'Storyboard' & 'Swift' respectively","type":"image","identifier":"step_4_swift_ui.png","variants":[{"url":"\/images\/step_4_swift_ui.png","traits":["1x","light"]}]},"AttestationViewController_1.swift":{"syntax":"swift","content":["\/\/","\/\/ Copyright contributors to the IBM Security Verify FIDO2 Sample App for iOS project","\/\/","","import UIKit","import LocalAuthentication","import CryptoKit","import os.log","import FIDO2","","class AttestationViewController: UIViewController {","    \/\/ MARK: Control variables","    @IBOutlet weak var buttonOption: UIButton!","    @IBOutlet weak var labelRp: UILabel!","    @IBOutlet weak var labelAccessToken: UILabel!","    ","}"],"fileName":"AttestationViewController.swift","identifier":"AttestationViewController_1.swift","type":"file","fileType":"swift","highlights":[]},"AttestationInfoViewController_4.swift":{"syntax":"swift","content":["\/\/","\/\/ Copyright contributors to the IBM Security Verify FIDO2 Sample App for iOS project","\/\/","","import Foundation","import UIKit","import CryptoKit","import os.log","import FIDO2","","class AttestationInfoViewController: UIViewController {","    \/\/ MARK: Control variables","    @IBOutlet weak var buttonRegister: UIButton!","    @IBOutlet weak var buttonCancel: UIButton!","    @IBOutlet weak var textfieldNickname: UITextField!","    ","    \/\/ MARK: Variables","    var options: PublicKeyCredentialCreationOptions? = nil","    var accessToken: String? = nil","    var username: String? = nil","    var displayName: String? = nil","    var rpUrl: String? = nil","    var server = isv","    var params: [String: Any] = [:]","","","    override func viewDidLoad() {","        super.viewDidLoad()","        \/\/ Apply some styling to the visual controls.","        textfieldNickname.setBorderBottom()","        textfieldNickname.becomeFirstResponder()","        ","        buttonRegister.setCornerRadius()","                        ","        \/\/ Hides the keyboard","        textfieldNickname.delegate = self","    }","    ","    \/\/ MARK: Control events","    ","    @IBAction func onCancelClick(_ sender: UIButton) {","        dismiss(animated: true)","    }","    ","    @IBAction func onRegisterClick(_ sender: UIButton) {","        guard let options = options else {","            buttonRegister.isEnabled = false","            return","        }","        ","        \/\/ MARK: Metadata UUID","        \/\/ The UUID string represents an identifier to the aaguid.  When configured with FIDO metadata, authenticators are validated and provide additional characistics. Refer to the metadata.json in the Sources folder.","        var uuid = \"6dc9f22d-2c0a-4461-b878-de61e159ec61\"","        if server == isv {","            uuid = \"cdbdaea2-c415-5073-50f7-c04e968640b6\"","        }","        ","        let aaguid = UUID(uuidString: uuid)!","        let provider = PublicKeyCredentialProvider()","        provider.delegate = self","        provider.createCredentialAttestationRequest(aaguid, statementProvider: SelfAttestation(aaguid), options: options)","    }","    ","}","","extension AttestationInfoViewController: PublicKeyCredentialDelegate {","    func publicKeyCredential(provider: PublicKeyCredentialProvider, didCompleteWithError error: Error) {","        let alertController = UIAlertController(title: \"FIDO2 Example\", message: error.localizedDescription, preferredStyle: .alert)","        alertController.addAction(UIAlertAction(title: \"OK\", style: .default, handler: nil))","","        DispatchQueue.main.async {","            self.present(alertController, animated: true)","        }","    }","    ","    func publicKeyCredential(provider: PublicKeyCredentialProvider, didCompleteWithAttestation result: PublicKeyCredential<AuthenticatorAttestationResponse>) {","        buttonRegister.setActivity(true)","        ","        guard let rpUrl = rpUrl else {","            return","        }","        ","        let attestationUrl = \"\\(rpUrl)\/attestation\/result\"","        ","        var nickname =  \"\\(UIDevice().name) - (\\(UIDevice().model))\"","        if !textfieldNickname.text!.isEmpty {","            nickname = textfieldNickname.text!","        }","        ","        FidoService.shared.createAuthenticator(attestationUrl, accessToken: accessToken!, server: self.server, nickname: nickname, attestation: result) { result in","            self.buttonRegister.setActivity(false)","","            switch result {","            case .success:","                Logger.app.info(\"Authenticator registered!\")","                UserDefaults.standard.setValue(nickname, forKey: Store.nickname.rawValue)","                UserDefaults.standard.setValue(self.rpUrl, forKey: Store.relyingPartyUrl.rawValue)","                UserDefaults.standard.setValue(true, forKey: Store.created.rawValue)","                UserDefaults.standard.setValue(self.username, forKey: Store.username.rawValue)","                UserDefaults.standard.setValue(self.accessToken, forKey: Store.accessToken.rawValue)","                UserDefaults.standard.setValue(self.server, forKey: Store.server.rawValue)","                UserDefaults.standard.setValue(self.displayName, forKey: Store.displayName.rawValue)","                ","                \/\/ Format the date.","                let dateFormatter = DateFormatter()","                dateFormatter.dateStyle = .full","                ","                let timeFormatter = DateFormatter()","                timeFormatter.timeStyle = .medium","               ","                let createdDate = \"\\(dateFormatter.string(from: Date())) \\(timeFormatter.string(from: Date()))\"","                ","                UserDefaults.standard.setValue(createdDate, forKey: Store.createdDate.rawValue)","                ","                DispatchQueue.main.async {","                    self.dismiss(animated: true) {","                        \/\/ Assign the root view controller.","                        let storybaord = UIStoryboard(name: \"Main\", bundle: nil)","                        let viewController = storybaord.instantiateViewController(withIdentifier: \"authenticationLanding\")","                        UIApplication.shared.windows.first?.rootViewController = UINavigationController(rootViewController: viewController)","                        UIApplication.shared.windows.first?.makeKeyAndVisible()","                    }","                }","            case .failure(let error):","                let alertController = UIAlertController(title: \"FIDO2 Example\", message: error.localizedDescription, preferredStyle: .alert)","                alertController.addAction(UIAlertAction(title: \"OK\", style: .default, handler: nil))","","                DispatchQueue.main.async {","                    self.present(alertController, animated: true)","                }","            }","        }","    }","}"],"fileName":"AttestationInfoViewController.swift","identifier":"AttestationInfoViewController_4.swift","type":"file","fileType":"swift","highlights":[{"line":66},{"line":67},{"line":68},{"line":69},{"line":71},{"line":72},{"line":73},{"line":74},{"line":75},{"line":76},{"line":77},{"line":78},{"line":79},{"line":80},{"line":81},{"line":82},{"line":83},{"line":84},{"line":85},{"line":86},{"line":87},{"line":88},{"line":89},{"line":90},{"line":91},{"line":92},{"line":93},{"line":94},{"line":95},{"line":96},{"line":97},{"line":98},{"line":99},{"line":100},{"line":101},{"line":102},{"line":103},{"line":104},{"line":105},{"line":106},{"line":107},{"line":108},{"line":109},{"line":110},{"line":111},{"line":112},{"line":113},{"line":114},{"line":115},{"line":116},{"line":117},{"line":118},{"line":119},{"line":120},{"line":121},{"line":122},{"line":123},{"line":124},{"line":125},{"line":126},{"line":127},{"line":128},{"line":129},{"line":130},{"line":131},{"line":132},{"line":133},{"line":134}]},"IVCreds_3.swift":{"syntax":"swift","content":["\/\/","\/\/ Copyright contributors to the IBM Security Verify FIDO2 Sample App for iOS project","\/\/","","import Foundation","import os.log","","\/\/ MARK: Structures","","\/\/\/ Represents the ivcreds from the Web Reverse Proxy.","public struct IVCreds {","    \/\/\/ Represents the username - extracted from AZN_CRED_PRINCIPAL_NAME attribute","    public var username: String","    ","    \/\/\/ Represents all other attributes of the cred","    public var attributes: [String: Any]?","    ","    enum IVCredsError: Error {","        case notAuthenticated","    }","    ","    \/\/ Creates a new `IVCreds` instance","    public init(jsonData: Data) throws {","        self.username = \"unauthenticated\"","        let json = try? JSONSerialization.jsonObject(with: jsonData, options: [])","        if let ivcreds = json as? [String:Any] {","            if ivcreds[\"AZN_CRED_PRINCIPAL_NAME\"] == nil || ivcreds[\"AZN_CRED_PRINCIPAL_NAME\"] as! String == \"unauthenticated\"  {","                throw IVCredsError.notAuthenticated","            }","            self.username = ivcreds[\"AZN_CRED_PRINCIPAL_NAME\"] as! String","            self.attributes = ivcreds","        }","    }","}","","extension IVCreds {","    \/\/\/ Constructs a IVCreds URL from a string.","    static func buildURL(_ serverURL: String) -> String {","        let url = URL(string: serverURL)!","","        var ivCreds = url.scheme! + \":\/\/\" + url.host!","        if (url.port != nil) {","            ivCreds += \":\" + String(url.port!)","        }","        ivCreds += \"\/ivcreds\"","        return ivCreds","    }","    ","    static func  getWhoAmI(_ whoAmIURL: String, accessToken: String, completion: @escaping (Result<IVCreds, NetworkError>) -> Void) {","        guard let url = URL(string: whoAmIURL) else {","            completion(.failure(.badURL))","            return","        }","        ","        var request = URLRequest(url: url)","        request.httpMethod = \"GET\"","        request.setValue(\"application\/json\", forHTTPHeaderField: \"Accept\")","        request.setValue(\"Bearer \\(accessToken)\", forHTTPHeaderField: \"Authorization\")","        let logstr = \"curl -H \\\"Accept: application\/json\\\" -H \\\"Authorization: Bearer \" + accessToken + \" \" + whoAmIURL","        Logger.networking.info(\"HTTP request\\n\\(logstr, privacy: .public)\")","                    ","        URLSession.shared.dataTask(with: request) { (data, response, error) in","            guard let data = data, let _ = response, error == nil else {","                completion(.failure(.general(message: error!.localizedDescription)))","                return","            }","            ","            Logger.networking.info(\"HTTP response\\n\\(String(data: data, encoding: .utf8)!, privacy: .public)\")","            do {","                guard let value = try? IVCreds(jsonData: data) else {","                    completion(.failure(.general(message: \"\\(String(data: data, encoding: .utf8) ?? \"Invalid\")\")","                    ))","                    return","                }","                completion(.success(value))","            }","        }.resume()","    }","}"],"fileName":"IVCreds.swift","identifier":"IVCreds_3.swift","type":"file","fileType":"swift","highlights":[{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52},{"line":53},{"line":54},{"line":55},{"line":56},{"line":57},{"line":58},{"line":59},{"line":60},{"line":61},{"line":62},{"line":63},{"line":64},{"line":65},{"line":66},{"line":67},{"line":68},{"line":69},{"line":70},{"line":71},{"line":72},{"line":73},{"line":74},{"line":75},{"line":76},{"line":77},{"line":78},{"line":79}]},"AppHelper_4.swift":{"syntax":"swift","content":["\/\/","\/\/ Copyright contributors to the IBM Security Verify FIDO2 Sample App for iOS project","\/\/","","import UIKit","import os.log","import LocalAuthentication","import FIDO2","","\/\/ MARK: Constants","let bundleIdentifier = Bundle.main.bundleIdentifier!","let isva = \"isva\"","let isv = \"isv\"","","\/\/ MARK: Enums","enum Store: String {","    case relyingPartyUrl","    case nickname","    case displayName","    case username","    case accessToken","    case createdDate","    case created","    case server","}","","enum NetworkError: Error, LocalizedError {","    \/\/\/ Invalid or format of URL is incorrect.","    case badURL","    ","    \/\/\/ Invalid or no data returned from the serve","    case invalidData","    ","    \/\/\/ General error with custom message.","    case general(message: String)","    ","    public var errorDescription: String? {","       switch self {","       case .badURL:","           return NSLocalizedString(\"Invalid or format of URL is incorrect.\", comment: \"Invalid URL\")","       case .invalidData:","           return NSLocalizedString(\"Invalid or no data returned from the server.\", comment: \"Invalid Data\")","       case .general(message: let message):","           return NSLocalizedString(message, comment: \"General Error\")","       }","   }","}","","\/\/ MARK: Functions","","\/\/\/ HTTP response status codes that are acceptable.","var acceptableStatusCodes: [Int] {","    return Array(200 ..< 300)","}","","func createBottomBorder(width: CGFloat, height: CGFloat, color: UIColor = .systemGray3) -> CALayer {","    let layer = CALayer()","    layer.frame = CGRect(x: 0.0, y: height - 1, width: width, height: 1.0)","    layer.backgroundColor = color.cgColor","    return layer","}","","\/\/ MARK: Extensions"],"fileName":"AppHelper.swift","identifier":"AppHelper_4.swift","type":"file","fileType":"swift","highlights":[{"line":51},{"line":52},{"line":53},{"line":54},{"line":55},{"line":56},{"line":57},{"line":58},{"line":59},{"line":60},{"line":61},{"line":62}]},"AssertionInfoViewController_4.swift":{"syntax":"swift","content":["\/\/","\/\/ Copyright contributors to the IBM Security Verify FIDO2 Sample App for iOS project","\/\/","","import Foundation","import UIKit","import os.log","import FIDO2","","class AssertionInfoViewController: UIViewController {","    \/\/ MARK: Control variables","    @IBOutlet weak var activityIndicator: UIActivityIndicatorView!","    @IBOutlet weak var buttonClose: UIButton!","    @IBOutlet weak var stackviewProperties: UIStackView!","    @IBOutlet weak var labelProgress: UILabel!","    ","    \/\/ MARK: Variables","    var assertion: PublicKeyCredential<AuthenticatorAssertionResponse>?","    var success = false","    ","    override func viewDidLoad() {","        super.viewDidLoad()","        ","        activityIndicator.startAnimating()","        self.activityIndicator.isHidden = false","        ","        let relyingPartyUrl = UserDefaults.standard.string(forKey: Store.relyingPartyUrl.rawValue)!","        let accessToken = UserDefaults.standard.string(forKey: Store.accessToken.rawValue)!","        let username = UserDefaults.standard.string(forKey: Store.username.rawValue) ?? \"\"","        ","        let assertionUrl = \"\\(relyingPartyUrl)\/assertion\/result\"","        ","        \/\/ Perform the authentication","        if let server = UserDefaults.standard.string(forKey: Store.server.rawValue) {","            if server == isva {","                FidoService.shared.assertAuthenticator(assertionUrl, accessToken: accessToken, username: username, assertion: assertion!, type: ISVAAssertionResponse.self) { result in","                    DispatchQueue.main.async {","                        self.activityIndicator.stopAnimating()","                        self.activityIndicator.isHidden = true","                        self.labelProgress.isHidden = true","                    }","                    ","                    switch result {","                    case .success(let response):","                        Logger.app.info(\"Authenticator successfully signed!\")","                        self.success = true","                        ","                        DispatchQueue.main.async {","                            self.displayCredentialProperties(userData: response)","                        }","                                ","                    case .failure(let error):","                        let alertController = UIAlertController(title: \"FIDO2 Example\", message: error.localizedDescription, preferredStyle: .alert)","                        alertController.addAction(UIAlertAction(title: \"OK\", style: .default, handler: { action in","                            DispatchQueue.main.async {","                                self.performSegue(withIdentifier: \"unwindToAssertionView\", sender: self)","                            }","                        }))","","                        DispatchQueue.main.async {","                            self.present(alertController, animated: true)","                        }","                    }","                }","            }","            else {","                FidoService.shared.assertAuthenticator(assertionUrl, accessToken: accessToken, username: username, assertion: assertion!, type: ISVAssertionResponse.self) { result in","                    DispatchQueue.main.async {","                        self.activityIndicator.stopAnimating()","                        self.activityIndicator.isHidden = true","                        self.labelProgress.isHidden = true","                    }","                    ","                    switch result {","                    case .success(let response):","                        Logger.app.info(\"Authenticator successfully signed!\")","                        self.success = true","                        ","                        DispatchQueue.main.async {","                            self.displayCredentialProperties(userData: response)","                        }","                                ","                    case .failure(let error):","                        let alertController = UIAlertController(title: \"FIDO2 Example\", message: error.localizedDescription, preferredStyle: .alert)","                        alertController.addAction(UIAlertAction(title: \"OK\", style: .default, handler: { action in","                            DispatchQueue.main.async {","                                self.performSegue(withIdentifier: \"unwindToAssertionView\", sender: self)","                            }","                        }))","","                        DispatchQueue.main.async {","                            self.present(alertController, animated: true)","                        }","                    }","                }","            }","        }","    }","    ","    \/\/\/ Renders the credential user data to the screen.","    \/\/\/ - parameter userData: An instance of `CredentialUserData`","    private func displayCredentialProperties<T: AssertionResponse>(userData: T) {","        if let response = userData as? ISVAAssertionResponse {","            \/\/ If there is an icon, create it","            if let imageString = response.attributes[.icon] as? String, let url = URL(string: imageString), let data = try? Data(contentsOf: url), let image = UIImage(data: data) {","                ","                let property = createImage(image: image)","                stackviewProperties.addArrangedSubview(property)","            }","            ","            \/\/ Dynamically add the labels to the stackview","            let property1 = createLabels(heading: \"Username\", text: response.username)","            stackviewProperties.addArrangedSubview(property1)","        ","            let property2 = createLabels(heading: \"Display name\", text: response.displayName)","            stackviewProperties.addArrangedSubview(property2)","            ","            let property3 = createLabels(heading: \"Email\", text: response.email)","            stackviewProperties.addArrangedSubview(property3)","            ","            let property4 = createLabels(heading: \"Authenticator nickname\", text: response.nickname)","            stackviewProperties.addArrangedSubview(property4)","            ","            if let value = response.attributes[.description] as? String {","                let property = createLabels(heading: \"Authenticator description\", text: value)","                stackviewProperties.addArrangedSubview(property)","            }","            ","            if let value = response.attributes[.txAuthSimple] as? String {","                let property = createLabels(heading: \"Transaction confirmation\", text: value)","                stackviewProperties.addArrangedSubview(property)","            }","            ","            let property5 = createLabels(heading: \"Relying party\", text: response.rpId)","            stackviewProperties.addArrangedSubview(property5)","        }","        ","        if let response = userData as? ISVAssertionResponse {","            \/\/ If there is an icon, create it","            if let imageString = response.attributes[.icon] as? String, let url = URL(string: imageString), let data = try? Data(contentsOf: url), let image = UIImage(data: data) {","                ","                let property = createImage(image: image)","                stackviewProperties.addArrangedSubview(property)","            }","            ","            \/\/ Dynamically add the labels to the stackview","            let property1 = createLabels(heading: \"User id\", text: response.userId)","            stackviewProperties.addArrangedSubview(property1)","        ","            let property2 = createLabels(heading: \"Authenticator nickname\", text: response.nickname)","            stackviewProperties.addArrangedSubview(property2)","            ","            let property3 = createLabels(heading: \"Relying party\", text: response.rpId)","            stackviewProperties.addArrangedSubview(property3)","            ","            let property4 = createLabels(heading: \"Authenticator type\", text: response.type)","            stackviewProperties.addArrangedSubview(property4)","            ","            if let value = response.attributes[.attestationFormat] as? String {","                let property = createLabels(heading: \"Attestation format\", text: value)","                stackviewProperties.addArrangedSubview(property)","            }","            ","            if let value = response.attributes[.attestationType] as? String {","                let property = createLabels(heading: \"Attestation type\", text: value)","                stackviewProperties.addArrangedSubview(property)","            }","            ","            if let value = response.attributes[.description] as? String {","                let property = createLabels(heading: \"Description\", text: value)","                stackviewProperties.addArrangedSubview(property)","            }","        }","    }","    ","    private func createLabels(heading: String, text: String) -> UIStackView {","        \/\/ Create the 2 UILabels representing the title header and display text.","        let labelHeader = UILabel()","        labelHeader.text = heading","        labelHeader.textColor = .systemGray","        labelHeader.font = labelHeader.font.withSize(15)","        ","        let labelText = UILabel()","        labelText.text = text","        labelText.numberOfLines = 0","        labelText.lineBreakMode = .byWordWrapping","        ","        \/\/ Create a UIStackView to hold the labels.","        let stackview = UIStackView(arrangedSubviews: [labelHeader, labelText])","        stackview.axis = .vertical","        stackview.spacing = 12","        ","        return stackview","    }","    ","    private func createImage(image: UIImage) -> UIStackView {","        \/\/ Create the 2 UILabels representing the title header and display text.","        let imageView = UIImageView(frame: CGRect(x: 0, y: 0, width: 16, height: 16))","        imageView.image = image","        imageView.contentMode = .scaleAspectFit","        ","        \/\/ Create a UIStackView to hold the labels.","        let stackview = UIStackView(arrangedSubviews:[imageView])","        stackview.axis = .vertical","        stackview.spacing = 12","        stackview.alignment = .leading","        ","        return stackview","    }","    ","    \/\/ MARK: Control events","    ","    @IBAction func onCloseClick(_ sender: UIButton) {","        self.performSegue(withIdentifier: \"unwindToAssertionView\", sender: self)","    }","}"],"fileName":"AssertionInfoViewController.swift","identifier":"AssertionInfoViewController_4.swift","type":"file","fileType":"swift","highlights":[{"line":210},{"line":211},{"line":212},{"line":213},{"line":214},{"line":215}]},"AssertionViewController_4.swift":{"syntax":"swift","content":["\/\/","\/\/ Copyright contributors to the IBM Security Verify FIDO2 Sample App for iOS project","\/\/","","import Foundation","import UIKit","import FIDO2","import CryptoKit","","class AssertionViewController: UIViewController {","    \/\/ MARK: Control variables","    @IBOutlet weak var buttonAuthenticate: UIButton!","    @IBOutlet weak var buttonRemove: UIButton!","    @IBOutlet weak var labelDisplayName: UILabel!","    @IBOutlet weak var labelHostName: UILabel!","    @IBOutlet weak var labelNickName: UILabel!","    @IBOutlet weak var labelCreatedDate: UILabel!","    @IBOutlet weak var imageView: UIImageView!","    @IBOutlet weak var switchEauthExt: UISwitch!","    ","    \/\/ Random messages for the user to acknowledge before signing the assertion.","    let reasons = [\"Please confirm your pizza order of $49.99\",","                   \"Please verify that you intended to transfer $2,877.34.\",","                   \"Please confirm you purchased a new Apple MacBook.\",","                   \"Are you trying to access to the server room?\",","                   \"Your confirmation of to access the registration resource on this server is required.\",","                   \"Please confirm your order of 10 widgets.\"]","    ","    override func viewDidLoad() {","        super.viewDidLoad()","        ","        navigationController?.navigationBar.isHidden = true","        ","        \/\/ Populate the stored values.","        if let value = UserDefaults.standard.string(forKey: Store.relyingPartyUrl.rawValue), let url = URL(string: value), let hostname = url.host {","            labelHostName.text = hostname","        }","        ","        if let value = UserDefaults.standard.string(forKey: Store.nickname.rawValue) {","            labelNickName.text = value","        }","        ","        if let value = UserDefaults.standard.string(forKey: Store.displayName.rawValue) {","            labelDisplayName.text = value","        }","        ","        if let value = UserDefaults.standard.string(forKey: Store.createdDate.rawValue) {","            labelCreatedDate.text = value","        }","        ","        \/\/ Animate the registration logo","        setTraitAppearance()","        animateLogo()","        ","        buttonAuthenticate.setCornerRadius()","    }","    ","    \/\/\/ Called when the iOS interface environment changes.","    \/\/\/ - parameter previousTraitCollection: The `UITraitCollection` object before the interface environment changed.","    override func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {","        super.traitCollectionDidChange(previousTraitCollection)","","        if traitCollection.hasDifferentColorAppearance(comparedTo: previousTraitCollection) {","            setTraitAppearance()","        }","    }","    ","    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {","        if let viewController = segue.destination as? AssertionInfoViewController, let assertion = sender as? PublicKeyCredential<AuthenticatorAssertionResponse> {","            viewController.assertion = assertion","            viewController.isModalInPresentation = true","        }","    }","    ","    @IBAction func unwindToAssertionView(sender: UIStoryboardSegue) {","        if let viewController = sender.source as? AssertionInfoViewController {","            imageView.tintColor = viewController.success ? UIColor.systemGreen : UIColor.systemRed","            ","            animateLogo {","                DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + 3) {","                    self.setTraitAppearance()","                }","            }","        }","    }","    ","    \/\/ MARK: Functions","    ","    private func animateLogo(completion: (() -> Void)? = nil) {","        \/\/ Animate the registration logo","        let animation = CASpringAnimation(keyPath: \"transform.scale\")","        animation.fromValue = 1.0","        animation.toValue = 1.50","        animation.autoreverses = true","        animation.repeatCount = 1","        animation.initialVelocity = 0.3","        animation.damping = 0.8","        imageView.layer.add(animation, forKey: nil)","        ","        completion?()","    }","    ","    \/\/ Set the appearence based on the device trait appearance","    private func setTraitAppearance() {","        if traitCollection.userInterfaceStyle == .light {","            imageView.tintColor = UIColor.black","        }","        else {","            imageView.tintColor = UIColor.white","        }","    }","    ","    \/\/ MARK: Control events","    @IBAction func onAuthenticateClick(_ sender: UIButton) {","        guard let accessToken = UserDefaults.standard.string(forKey: Store.accessToken.rawValue), let relyingPartyUrl =  UserDefaults.standard.string(forKey: Store.relyingPartyUrl.rawValue) else {","            let alertController = UIAlertController(title: \"FIDO2 Example\", message: \"Information about the relying party is missing.\", preferredStyle: .alert)","            alertController.addAction(UIAlertAction(title: \"OK\", style: .default, handler: nil))","            ","            self.present(alertController, animated: true)","            return","        }","        ","        self.buttonAuthenticate.setActivity(true)","        let assertionUrl = \"\\(relyingPartyUrl)\/assertion\/options\"","        ","        var params:[String: Any] = [\"userVerification\": \"required\"]","        if UserDefaults.standard.string(forKey: Store.server.rawValue) == isva, let username = UserDefaults.standard.string(forKey: Store.username.rawValue) {","            params.updateValue(username, forKey: \"username\")","            ","            if switchEauthExt.isOn {","                params.updateValue([\"credProps\": true, \"txAuthSimple\": reasons.randomElement()!], forKey: \"extensions\")","            }","        }","       ","        \/\/ Fetch the attestation options from the relying party.","        FidoService.shared.fetchAssertionOptions(assertionUrl, accessToken: accessToken, params: params) { result in","            switch result {","            case .success(let value):","                let provider = PublicKeyCredentialProvider()","                provider.delegate = self","                provider.createCredentialAssertionRequest(options: value)","            case .failure(let error):","                let alertController = UIAlertController(title: \"FIDO2 Example\", message: error.localizedDescription, preferredStyle: .alert)","                alertController.addAction(UIAlertAction(title: \"OK\", style: .default, handler: nil))","                ","                DispatchQueue.main.async {","                    self.buttonAuthenticate.setActivity(false)","                    self.present(alertController, animated: true)","                }","            }","        }","    }","    ","    ","    @IBAction func onRemoveClick(_ sender: UIButton) {","        let alertController = UIAlertController(title: \"FIDO2 Example\", message: \"Remove FIDO2 authenticator? If you proceed, you will need to remove the authenticator from the relying party.\", preferredStyle: .alert)","        alertController.addAction(UIAlertAction(title: \"OK\", style: .default, handler: { action in","            UserDefaults.standard.removePersistentDomain(forName: bundleIdentifier)","            ","            \/\/ Set the parent view controller for the scene.","            let storybaord = UIStoryboard(name: \"Main\", bundle: nil)","            let viewController = storybaord.instantiateViewController(withIdentifier: \"registrationLanding\")","            UIApplication.shared.windows.first?.rootViewController = viewController","            UIApplication.shared.windows.first?.makeKeyAndVisible()","        }))","","        alertController.addAction(UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil))","        ","        present(alertController, animated: true, completion: nil)","    }","}"],"fileName":"AssertionViewController.swift","identifier":"AssertionViewController_4.swift","type":"file","fileType":"swift","highlights":[{"line":112},{"line":113},{"line":114},{"line":115},{"line":116},{"line":117},{"line":118},{"line":119},{"line":120},{"line":121},{"line":122},{"line":123},{"line":124},{"line":125},{"line":126},{"line":127},{"line":128},{"line":129},{"line":130},{"line":131},{"line":132},{"line":133},{"line":134},{"line":135},{"line":136},{"line":137},{"line":138},{"line":139},{"line":140},{"line":141},{"line":142},{"line":143},{"line":144},{"line":145},{"line":146},{"line":147},{"line":148},{"line":149},{"line":150},{"line":151},{"line":152},{"line":153},{"line":154},{"line":155},{"line":156},{"line":157},{"line":158},{"line":159},{"line":160},{"line":161},{"line":162},{"line":163},{"line":164},{"line":165},{"line":166},{"line":167},{"line":168},{"line":169},{"line":170}]},"FidoService_1.swift":{"syntax":"swift","content":["\/\/","\/\/  FidoService.swift","\/\/","","import Foundation","import FIDO2","import os.log","","","public class FidoService {","    \/\/\/ Returns the shared defaults object.","    internal static let shared = FidoService()","}"],"fileName":"FidoService.swift","identifier":"FidoService_1.swift","type":"file","fileType":"swift","highlights":[]},"AttestationViewController_2.swift":{"syntax":"swift","content":["\/\/","\/\/ Copyright contributors to the IBM Security Verify FIDO2 Sample App for iOS project","\/\/","","import UIKit","import LocalAuthentication","import CryptoKit","import os.log","import FIDO2","","class AttestationViewController: UIViewController {","    \/\/ MARK: Control variables","    @IBOutlet weak var buttonOption: UIButton!","    @IBOutlet weak var labelRp: UILabel!","    @IBOutlet weak var labelAccessToken: UILabel!","    ","    \/\/ MARK: Variables","    var displayName: String?","    var accessToken: String?","    var rpUrl: String?","    var userName: String?","    var server = isv","    var params: [String: Any] = [:]","    ","    override func viewDidLoad() {","        super.viewDidLoad()","        \/\/ Apply some styling to the visual controls.","        buttonOption.setCornerRadius()","        ","        guard let accessToken = accessToken, let rpUrl = rpUrl else {","            return","        }","        ","        labelRp.text = \"\\(rpUrl)\/attestation\/options\"","        labelAccessToken.text = accessToken","    }","    ","    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {","        if let viewController = segue.destination as? AttestationInfoViewController, let options = sender as? PublicKeyCredentialCreationOptions {","            viewController.options = options","            viewController.accessToken = accessToken!","            viewController.rpUrl = \"\\(rpUrl!)\"","            viewController.params = self.params","            viewController.username = self.userName","            viewController.displayName = self.displayName","            viewController.server = self.server","            viewController.isModalInPresentation = true","        }","    }","    ","}"],"fileName":"AttestationViewController.swift","identifier":"AttestationViewController_2.swift","type":"file","fileType":"swift","highlights":[{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50}]},"AttestationInfoViewController_2.swift":{"syntax":"swift","content":["\/\/","\/\/ Copyright contributors to the IBM Security Verify FIDO2 Sample App for iOS project","\/\/","","import Foundation","import UIKit","import CryptoKit","import os.log","import FIDO2","","class AttestationInfoViewController: UIViewController {","    \/\/ MARK: Control variables","    @IBOutlet weak var buttonRegister: UIButton!","    @IBOutlet weak var buttonCancel: UIButton!","    @IBOutlet weak var textfieldNickname: UITextField!","    ","    \/\/ MARK: Variables","    var options: PublicKeyCredentialCreationOptions? = nil","    var accessToken: String? = nil","    var username: String? = nil","    var displayName: String? = nil","    var rpUrl: String? = nil","    var server = isv","    var params: [String: Any] = [:]","","","    override func viewDidLoad() {","        super.viewDidLoad()","        \/\/ Apply some styling to the visual controls.","        textfieldNickname.setBorderBottom()","        textfieldNickname.becomeFirstResponder()","        ","        buttonRegister.setCornerRadius()","                        ","        \/\/ Hides the keyboard","        textfieldNickname.delegate = self","    }","    ","}"],"fileName":"AttestationInfoViewController.swift","identifier":"AttestationInfoViewController_2.swift","type":"file","fileType":"swift","highlights":[{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38}]},"step_2_iOS_template.png":{"alt":"A screenshot of the new application pop-up on XCode, highlighting the 'App' and the 'Next' buttons.","type":"image","identifier":"step_2_iOS_template.png","variants":[{"url":"\/images\/step_2_iOS_template.png","traits":["1x","light"]}]},"LoginViewController_3.swift":{"syntax":"swift","content":["\/\/","\/\/ Copyright contributors to the IBM Security Verify FIDO2 Sample App for iOS project","\/\/","","import UIKit","import os.log","import FIDO2","","class LoginViewController: UIViewController {","    \/\/ MARK: Control variables","    @IBOutlet weak var textfieldPassword: UITextField!","    @IBOutlet weak var textfieldTenant: UITextField!","    @IBOutlet weak var textfieldUsername: UITextField!","    @IBOutlet weak var textfieldClientId: UITextField!","    @IBOutlet weak var buttonLogin: UIButton!","    ","    \/\/ MARK: Variable","    var accessToken: String?","    var rpUrl: String?","    ","    override func viewDidLoad() {","        super.viewDidLoad()","        ","        \/\/ Set styling","        textfieldPassword.setBorderBottom()","        textfieldTenant.setBorderBottom()","        textfieldUsername.setBorderBottom()","        textfieldClientId.setBorderBottom()","        buttonLogin.setCornerRadius()","        ","        \/\/ Handle UITextField events","        textfieldTenant.delegate = self","        textfieldUsername.delegate = self","        textfieldPassword.delegate = self","        textfieldClientId.delegate = self","        ","        textfieldTenant.becomeFirstResponder()","    }","    ","    \/\/ MARK: Control events","    ","    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {","        if let viewController = segue.destination as? AttestationViewController {","            viewController.accessToken = accessToken!","            viewController.rpUrl = rpUrl!","            viewController.server = isv","            viewController.userName = textfieldUsername.text!","            viewController.params = [\"authenticatorSelection\": [\"requireResidentKey\":true]]","            viewController.isModalInPresentation = true","        }","    }","}"],"fileName":"LoginViewController.swift","identifier":"LoginViewController_3.swift","type":"file","fileType":"swift","highlights":[{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51}]},"FidoService_4.swift":{"syntax":"swift","content":["\/\/","\/\/  FidoService.swift","\/\/","","import Foundation","import FIDO2","import os.log","","","public class FidoService {","    \/\/\/ Returns the shared defaults object.","    internal static let shared = FidoService()","    ","    \/\/ MARK: Networking functions","","    func fetchAttestationOptions(_ relyingPartyURL: String, accessToken: String, params: [String: Any]? = [:], completion: @escaping (Result<PublicKeyCredentialCreationOptions, NetworkError>) -> Void) {","        guard let url = URL(string: relyingPartyURL) else {","            completion(.failure(.badURL))","            return","        }","        ","        var request = URLRequest(url: url)","        request.httpMethod = \"POST\"","        request.setValue(\"application\/json\", forHTTPHeaderField: \"Content-type\")","        request.setValue(\"application\/json\", forHTTPHeaderField: \"Accept\")","        request.setValue(\"Bearer \\(accessToken)\", forHTTPHeaderField: \"Authorization\")","        ","        var parameters = [\"attestation\":\"direct\"] as [String: Any]","        ","        ","        \/\/ Append the additional params to the JSON request.","        if let params = params {","            parameters.merge(params) { (current, _) in current }","        }","        ","        guard let bodyData = try? JSONSerialization.data(withJSONObject: parameters, options: []) else {","            Logger.networking.debug(\"Unable to create request payload for WebAuthn.Attestation.options.\")","            completion(.failure(NetworkError.invalidData))","            return","        }","            ","        Logger.networking.info(\"HTTP request\\n\\(String(data: bodyData, encoding: .utf8)!, privacy: .public)\")","        request.httpBody = bodyData","        ","        URLSession.shared.dataTask(with: request) { (data, response, error) in","            guard let data = data, let _ = response, error == nil else {","                completion(.failure(.general(message: error!.localizedDescription)))","                return","            }","            ","            Logger.networking.info(\"HTTP response\\n\\(String(data: data, encoding: .utf8)!, privacy: .public)\")","            ","            do {","                guard let value = try? JSONDecoder().decode(PublicKeyCredentialCreationOptions.self, from: data) else {","                    Logger.networking.debug(\"Unable to parse PublicKeyCredentialCreationOptions.\")","                    completion(.failure(.general(message: \"Unable to parse PublicKeyCredentialCreationOptions.\")","                    ))","                    return","                }","                completion(.success(value))","            }","        }.resume()","    }","    ","    func createAuthenticator(_ relyingPartyURL: String, accessToken: String, server: String = isv, nickname: String, enabled: Bool = true, attestation: PublicKeyCredential<AuthenticatorAttestationResponse>, completion: @escaping (Result<Void, Error>) -> Void) {","        guard let url = URL(string: relyingPartyURL) else {","            completion(.failure(NetworkError.badURL))","            return","        }","        ","        \/\/ Convert into the data the FIDO server wants.","        let data: Data!","        if server == isv {","            let attestation = ISVAsstestationResponse(nickname, attestation: attestation)","            data = try? JSONEncoder().encode(attestation)","        }","        else {","            let attestation = ISVAAsstestationResponse(nickname, attestation: attestation)","            data = try? JSONEncoder().encode(attestation)","        }","        ","        guard let bodyData = data else {","           Logger.networking.debug(\"Unable to create request payload for WebAuthn.Attestation.create.\")","           completion(.failure(NetworkError.invalidData))","           return","       }","       ","       var request = URLRequest(url: url)","       request.httpMethod = \"POST\"","       request.setValue(\"application\/json\", forHTTPHeaderField: \"Content-type\")","       request.setValue(\"application\/json\", forHTTPHeaderField: \"Accept\")","       request.setValue(\"Bearer \\(accessToken)\", forHTTPHeaderField: \"Authorization\")","       request.httpBody = bodyData","       ","       Logger.networking.info(\"HTTP request\\n\\(String(data: bodyData, encoding: .utf8)!, privacy: .public)\")","       ","       URLSession.shared.dataTask(with: request) { (data, response, error) in","           guard let data = data, let _ = response, error == nil else {","               completion(.failure(NetworkError.general(message: error!.localizedDescription)))","               return","           }","           ","           Logger.networking.info(\"HTTP response\\n\\(String(data: data, encoding: .utf8)!, privacy: .public)\")","           \/\/ Check the response status code that isn't in the 200 range.","           if let httpResponse = response as? HTTPURLResponse, !acceptableStatusCodes.contains(httpResponse.statusCode) {","               \/\/ Attempt to read the response error data.","               completion(.failure(NetworkError.general(message: String(data: data, encoding: .utf8) ?? \"Invalid\")))","               return","           }","","           completion(.success(()))","       }.resume()","    }","    ","    func fetchAssertionOptions(_ relyingPartyURL: String, accessToken: String, params: [String: Any]? = [:], completion: @escaping (Result<PublicKeyCredentialRequestOptions, NetworkError>) -> Void) {","        guard let url = URL(string: relyingPartyURL) else {","            completion(.failure(.badURL))","            return","        }","        ","        var request = URLRequest(url: url)","        request.httpMethod = \"POST\"","        request.setValue(\"application\/json\", forHTTPHeaderField: \"Content-type\")","        request.setValue(\"application\/json\", forHTTPHeaderField: \"Accept\")","        request.setValue(\"Bearer \\(accessToken)\", forHTTPHeaderField: \"Authorization\")","        ","        var parameters = [\"userVerification\":\"required\"] as [String: Any]","        ","        \/\/ Append the additional params to the JSON request.","        if let params = params {","            parameters.merge(params) { (current, _) in current }","        }","        ","        guard let bodyData = try? JSONSerialization.data(withJSONObject: parameters, options: []) else {","            Logger.networking.debug(\"Unable to create request payload for WebAuthn.Assertion.options.\")","            completion(.failure(NetworkError.invalidData))","            return","        }","            ","        Logger.networking.info(\"HTTP request\\n\\(String(data: bodyData, encoding: .utf8)!, privacy: .public)\")","        request.httpBody = bodyData","        ","        URLSession.shared.dataTask(with: request) { (data, response, error) in","            guard let data = data, let _ = response, error == nil else {","                completion(.failure(.general(message: error!.localizedDescription)))","                return","            }","            ","            Logger.networking.info(\"HTTP response\\n\\(String(data: data, encoding: .utf8)!, privacy: .public)\")","            ","            do {","                guard let value = try? JSONDecoder().decode(PublicKeyCredentialRequestOptions.self, from: data) else {","                    Logger.networking.debug(\"Unable to parse PublicKeyCredentialRequestOptions.\")","                    completion(.failure(.general(message: \"Unable to parse PublicKeyCredentialRequestOptions.\")","                    ))","                    return","                }","                ","                completion(.success(value))","            }","        }.resume()","    }","}"],"fileName":"FidoService.swift","identifier":"FidoService_4.swift","type":"file","fileType":"swift","highlights":[{"line":114},{"line":115},{"line":116},{"line":117},{"line":118},{"line":119},{"line":120},{"line":121},{"line":122},{"line":123},{"line":124},{"line":125},{"line":126},{"line":127},{"line":128},{"line":129},{"line":130},{"line":131},{"line":132},{"line":133},{"line":134},{"line":135},{"line":136},{"line":137},{"line":138},{"line":139},{"line":140},{"line":141},{"line":142},{"line":143},{"line":144},{"line":145},{"line":146},{"line":147},{"line":148},{"line":149},{"line":150},{"line":151},{"line":152},{"line":153},{"line":154},{"line":155},{"line":156},{"line":157},{"line":158},{"line":159},{"line":160},{"line":161},{"line":162}]},"doc://com.ibm.iOS-SDK/tutorials/iOS-SDK/FIDO2Setup":{"role":"project","title":"Creating a FIDO2 Application","estimatedTime":"40min","abstract":[{"type":"text","text":"The following tutorial will guide you through the creation of a new application that uses the FIDO2 Assertion and Attestation ceremonies for user verification."}],"identifier":"doc:\/\/com.ibm.iOS-SDK\/tutorials\/iOS-SDK\/FIDO2Setup","kind":"project","type":"topic","url":"\/tutorials\/ios-sdk\/fido2setup"},"AssertionInfoViewController_2.swift":{"syntax":"swift","content":["\/\/","\/\/ Copyright contributors to the IBM Security Verify FIDO2 Sample App for iOS project","\/\/","","import Foundation","import UIKit","import os.log","import FIDO2","","class AssertionInfoViewController: UIViewController {","    \/\/ MARK: Control variables","    @IBOutlet weak var activityIndicator: UIActivityIndicatorView!","    @IBOutlet weak var buttonClose: UIButton!","    @IBOutlet weak var stackviewProperties: UIStackView!","    @IBOutlet weak var labelProgress: UILabel!","    ","    \/\/ MARK: Variables","    var assertion: PublicKeyCredential<AuthenticatorAssertionResponse>?","    var success = false","    ","    override func viewDidLoad() {","        super.viewDidLoad()","        ","        activityIndicator.startAnimating()","        self.activityIndicator.isHidden = false","        ","        let relyingPartyUrl = UserDefaults.standard.string(forKey: Store.relyingPartyUrl.rawValue)!","        let accessToken = UserDefaults.standard.string(forKey: Store.accessToken.rawValue)!","        let username = UserDefaults.standard.string(forKey: Store.username.rawValue) ?? \"\"","        ","        let assertionUrl = \"\\(relyingPartyUrl)\/assertion\/result\"","        ","        \/\/ Perform the authentication","        if let server = UserDefaults.standard.string(forKey: Store.server.rawValue) {","            if server == isva {","                FidoService.shared.assertAuthenticator(assertionUrl, accessToken: accessToken, username: username, assertion: assertion!, type: ISVAAssertionResponse.self) { result in","                    DispatchQueue.main.async {","                        self.activityIndicator.stopAnimating()","                        self.activityIndicator.isHidden = true","                        self.labelProgress.isHidden = true","                    }","                    ","                    switch result {","                    case .success(let response):","                        Logger.app.info(\"Authenticator successfully signed!\")","                        self.success = true","                        ","                        DispatchQueue.main.async {","                            self.displayCredentialProperties(userData: response)","                        }","                                ","                    case .failure(let error):","                        let alertController = UIAlertController(title: \"FIDO2 Example\", message: error.localizedDescription, preferredStyle: .alert)","                        alertController.addAction(UIAlertAction(title: \"OK\", style: .default, handler: { action in","                            DispatchQueue.main.async {","                                self.performSegue(withIdentifier: \"unwindToAssertionView\", sender: self)","                            }","                        }))","","                        DispatchQueue.main.async {","                            self.present(alertController, animated: true)","                        }","                    }","                }","            }","            else {","                FidoService.shared.assertAuthenticator(assertionUrl, accessToken: accessToken, username: username, assertion: assertion!, type: ISVAssertionResponse.self) { result in","                    DispatchQueue.main.async {","                        self.activityIndicator.stopAnimating()","                        self.activityIndicator.isHidden = true","                        self.labelProgress.isHidden = true","                    }","                    ","                    switch result {","                    case .success(let response):","                        Logger.app.info(\"Authenticator successfully signed!\")","                        self.success = true","                        ","                        DispatchQueue.main.async {","                            self.displayCredentialProperties(userData: response)","                        }","                                ","                    case .failure(let error):","                        let alertController = UIAlertController(title: \"FIDO2 Example\", message: error.localizedDescription, preferredStyle: .alert)","                        alertController.addAction(UIAlertAction(title: \"OK\", style: .default, handler: { action in","                            DispatchQueue.main.async {","                                self.performSegue(withIdentifier: \"unwindToAssertionView\", sender: self)","                            }","                        }))","","                        DispatchQueue.main.async {","                            self.present(alertController, animated: true)","                        }","                    }","                }","            }","        }","    }","}"],"fileName":"AssertionInfoViewController.swift","identifier":"AssertionInfoViewController_2.swift","type":"file","fileType":"swift","highlights":[{"line":17},{"line":18},{"line":19},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52},{"line":53},{"line":54},{"line":55},{"line":56},{"line":57},{"line":58},{"line":59},{"line":60},{"line":61},{"line":62},{"line":63},{"line":64},{"line":65},{"line":66},{"line":67},{"line":68},{"line":69},{"line":70},{"line":71},{"line":72},{"line":73},{"line":74},{"line":75},{"line":76},{"line":77},{"line":78},{"line":79},{"line":80},{"line":81},{"line":82},{"line":83},{"line":84},{"line":85},{"line":86},{"line":87},{"line":88},{"line":89},{"line":90},{"line":91},{"line":92},{"line":93},{"line":94},{"line":95},{"line":96},{"line":97},{"line":98}]},"Main.storyboard":{"syntax":"storyboard","content":["<?xml version=\"1.0\" encoding=\"UTF-8\"?>","<document type=\"com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB\" version=\"3.0\" toolsVersion=\"19455\" targetRuntime=\"iOS.CocoaTouch\" propertyAccessControl=\"none\" useAutolayout=\"YES\" useTraitCollections=\"YES\" useSafeAreas=\"YES\" colorMatched=\"YES\" initialViewController=\"l9G-bJ-S1B\">","    <device id=\"retina6_1\" orientation=\"portrait\" appearance=\"light\"\/>","    <dependencies>","        <deployment identifier=\"iOS\"\/>","        <plugIn identifier=\"com.apple.InterfaceBuilder.IBCocoaTouchPlugin\" version=\"19454\"\/>","        <capability name=\"Image references\" minToolsVersion=\"12.0\"\/>","        <capability name=\"Named colors\" minToolsVersion=\"9.0\"\/>","        <capability name=\"Safe area layout guides\" minToolsVersion=\"9.0\"\/>","        <capability name=\"System colors in document resources\" minToolsVersion=\"11.0\"\/>","        <capability name=\"documents saved in the Xcode 8 format\" minToolsVersion=\"8.0\"\/>","    <\/dependencies>","    <scenes>","        <!--Landing View Controller-->","        <scene sceneID=\"vXX-2y-wfK\">","            <objects>","                <viewController storyboardIdentifier=\"registrationLanding\" id=\"l9G-bJ-S1B\" customClass=\"LandingViewController\" customModule=\"FIDO2App\" customModuleProvider=\"target\" sceneMemberID=\"viewController\">","                    <view key=\"view\" contentMode=\"scaleToFill\" id=\"Bee-hU-TXG\">","                        <rect key=\"frame\" x=\"0.0\" y=\"0.0\" width=\"414\" height=\"896\"\/>","                        <autoresizingMask key=\"autoresizingMask\" widthSizable=\"YES\" heightSizable=\"YES\"\/>","                        <subviews>","                            <scrollView clipsSubviews=\"YES\" multipleTouchEnabled=\"YES\" contentMode=\"scaleToFill\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"kv9-NN-ch8\">","                                <rect key=\"frame\" x=\"0.0\" y=\"68\" width=\"414\" height=\"794\"\/>","                                <subviews>","                                    <stackView opaque=\"NO\" contentMode=\"scaleToFill\" axis=\"vertical\" baselineRelativeArrangement=\"YES\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"jZ2-Jd-IZC\">","                                        <rect key=\"frame\" x=\"0.0\" y=\"0.0\" width=\"414\" height=\"637\"\/>","                                        <subviews>","                                            <label opaque=\"NO\" userInteractionEnabled=\"NO\" contentMode=\"left\" horizontalHuggingPriority=\"251\" verticalHuggingPriority=\"251\" text=\"FIDO2 Native Example\" textAlignment=\"center\" lineBreakMode=\"tailTruncation\" numberOfLines=\"2\" baselineAdjustment=\"alignBaselines\" adjustsFontSizeToFit=\"NO\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"swM-Ub-8XQ\">","                                                <rect key=\"frame\" x=\"0.0\" y=\"0.0\" width=\"414\" height=\"131\"\/>","                                                <fontDescription key=\"fontDescription\" type=\"system\" weight=\"semibold\" pointSize=\"24\"\/>","                                                <nil key=\"textColor\"\/>","                                                <nil key=\"highlightedColor\"\/>","                                            <\/label>","                                            <view contentMode=\"scaleToFill\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"tWc-yO-zeG\">","                                                <rect key=\"frame\" x=\"0.0\" y=\"125\" width=\"414\" height=\"256\"\/>","                                                <subviews>","                                                    <view contentMode=\"scaleToFill\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"S1F-bG-xxR\">","                                                        <rect key=\"frame\" x=\"16\" y=\"16\" width=\"382\" height=\"240\"\/>","                                                        <subviews>","                                                            <stackView opaque=\"NO\" contentMode=\"scaleToFill\" axis=\"vertical\" spacing=\"20\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"8P1-aH-mAu\">","                                                                <rect key=\"frame\" x=\"16\" y=\"16\" width=\"350\" height=\"194.5\"\/>","                                                                <subviews>","                                                                    <imageView clipsSubviews=\"YES\" userInteractionEnabled=\"NO\" contentMode=\"scaleAspectFit\" horizontalHuggingPriority=\"251\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"UWD-qN-CWp\">","                                                                        <rect key=\"frame\" x=\"0.0\" y=\"0.0\" width=\"350\" height=\"19\"\/>","                                                                        <imageReference key=\"image\" image=\"cloud.fill\" catalog=\"system\" symbolScale=\"large\"\/>","                                                                        <preferredSymbolConfiguration key=\"preferredSymbolConfiguration\" scale=\"large\"\/>","                                                                    <\/imageView>","                                                                    <label opaque=\"NO\" userInteractionEnabled=\"NO\" contentMode=\"left\" horizontalHuggingPriority=\"251\" verticalHuggingPriority=\"251\" text=\"IBM Security Verify\" textAlignment=\"natural\" lineBreakMode=\"tailTruncation\" baselineAdjustment=\"alignBaselines\" adjustsFontSizeToFit=\"NO\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"Qzh-Hv-wjk\">","                                                                        <rect key=\"frame\" x=\"0.0\" y=\"40\" width=\"350\" height=\"25.5\"\/>","                                                                        <fontDescription key=\"fontDescription\" type=\"system\" weight=\"semibold\" pointSize=\"21\"\/>","                                                                        <nil key=\"textColor\"\/>","                                                                        <nil key=\"highlightedColor\"\/>","                                                                    <\/label>","                                                                    <label opaque=\"NO\" userInteractionEnabled=\"NO\" contentMode=\"left\" horizontalHuggingPriority=\"251\" verticalHuggingPriority=\"251\" text=\"Register your device as a FIDO2 authenticator against your cloud tenant.\" textAlignment=\"natural\" lineBreakMode=\"wordWrap\" numberOfLines=\"3\" baselineAdjustment=\"alignBaselines\" adjustsFontSizeToFit=\"NO\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"9B5-HW-hnJ\">","                                                                        <rect key=\"frame\" x=\"0.0\" y=\"85.5\" width=\"350\" height=\"41\"\/>","                                                                        <fontDescription key=\"fontDescription\" type=\"system\" pointSize=\"17\"\/>","                                                                        <nil key=\"textColor\"\/>","                                                                        <nil key=\"highlightedColor\"\/>","                                                                    <\/label>","                                                                    <button opaque=\"NO\" contentMode=\"scaleToFill\" contentHorizontalAlignment=\"center\" contentVerticalAlignment=\"center\" buttonType=\"system\" lineBreakMode=\"middleTruncation\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"8Cv-Ym-vIe\">","                                                                        <rect key=\"frame\" x=\"0.0\" y=\"146.5\" width=\"350\" height=\"48\"\/>","                                                                        <color key=\"backgroundColor\" name=\"AccentColor\"\/>","                                                                        <constraints>","                                                                            <constraint firstAttribute=\"height\" constant=\"48\" id=\"oMu-7H-1Vl\"\/>","                                                                        <\/constraints>","                                                                        <fontDescription key=\"fontDescription\" type=\"system\" weight=\"semibold\" pointSize=\"17\"\/>","                                                                        <state key=\"normal\" title=\"Get Started\">","                                                                            <color key=\"titleColor\" white=\"1\" alpha=\"1\" colorSpace=\"custom\" customColorSpace=\"genericGamma22GrayColorSpace\"\/>","                                                                        <\/state>","                                                                        <connections>","                                                                            <segue destination=\"c0W-Ti-tch\" kind=\"show\" id=\"vfz-cv-pS6\"\/>","                                                                        <\/connections>","                                                                    <\/button>","                                                                <\/subviews>","                                                            <\/stackView>","                                                        <\/subviews>","                                                        <color key=\"backgroundColor\" white=\"1\" alpha=\"1\" colorSpace=\"custom\" customColorSpace=\"genericGamma22GrayColorSpace\"\/>","                                                        <constraints>","                                                            <constraint firstItem=\"8P1-aH-mAu\" firstAttribute=\"leading\" secondItem=\"S1F-bG-xxR\" secondAttribute=\"leading\" constant=\"16\" id=\"Mo1-89-qoL\"\/>","                                                            <constraint firstAttribute=\"trailing\" secondItem=\"8P1-aH-mAu\" secondAttribute=\"trailing\" constant=\"16\" id=\"WeR-Sz-S6c\"\/>","                                                            <constraint firstItem=\"8P1-aH-mAu\" firstAttribute=\"top\" secondItem=\"S1F-bG-xxR\" secondAttribute=\"top\" constant=\"16\" id=\"b7P-Fm-Ia4\"\/>","                                                            <constraint firstAttribute=\"height\" constant=\"240\" id=\"eMl-2k-3a3\"\/>","                                                        <\/constraints>","                                                    <\/view>","                                                <\/subviews>","                                                <viewLayoutGuide key=\"safeArea\" id=\"6tS-bo-yK9\"\/>","                                                <color key=\"backgroundColor\" white=\"0.0\" alpha=\"0.0\" colorSpace=\"custom\" customColorSpace=\"genericGamma22GrayColorSpace\"\/>","                                                <constraints>","                                                    <constraint firstAttribute=\"trailing\" secondItem=\"S1F-bG-xxR\" secondAttribute=\"trailingMargin\" constant=\"24\" id=\"8xw-pS-wOK\"\/>","                                                    <constraint firstItem=\"S1F-bG-xxR\" firstAttribute=\"leading\" secondItem=\"tWc-yO-zeG\" secondAttribute=\"leading\" constant=\"16\" id=\"OXX-C6-YtE\"\/>","                                                    <constraint firstAttribute=\"height\" constant=\"256\" id=\"zMh-Pq-Yxa\"\/>","                                                    <constraint firstItem=\"S1F-bG-xxR\" firstAttribute=\"top\" secondItem=\"tWc-yO-zeG\" secondAttribute=\"top\" constant=\"16\" id=\"zSQ-9H-s8D\"\/>","                                                <\/constraints>","                                            <\/view>","                                            <view contentMode=\"scaleToFill\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"tsb-I6-Gxc\">","                                                <rect key=\"frame\" x=\"0.0\" y=\"381\" width=\"414\" height=\"256\"\/>","                                                <subviews>","                                                    <view contentMode=\"scaleToFill\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"X4v-uK-hNo\">","                                                        <rect key=\"frame\" x=\"16\" y=\"16\" width=\"382\" height=\"240\"\/>","                                                        <subviews>","                                                            <stackView opaque=\"NO\" contentMode=\"scaleToFill\" axis=\"vertical\" spacing=\"20\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"TZ6-p7-vTl\">","                                                                <rect key=\"frame\" x=\"16\" y=\"16\" width=\"350\" height=\"194.5\"\/>","                                                                <subviews>","                                                                    <imageView clipsSubviews=\"YES\" userInteractionEnabled=\"NO\" contentMode=\"scaleAspectFit\" horizontalHuggingPriority=\"251\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"NG0-gv-J6Y\">","                                                                        <rect key=\"frame\" x=\"0.0\" y=\"-2.5\" width=\"350\" height=\"25\"\/>","                                                                        <imageReference key=\"image\" image=\"building.2.fill\" catalog=\"system\" symbolScale=\"large\"\/>","                                                                        <preferredSymbolConfiguration key=\"preferredSymbolConfiguration\" scale=\"medium\"\/>","                                                                    <\/imageView>","                                                                    <label opaque=\"NO\" userInteractionEnabled=\"NO\" contentMode=\"left\" horizontalHuggingPriority=\"251\" verticalHuggingPriority=\"251\" text=\"IBM Security Verify Access\" textAlignment=\"natural\" lineBreakMode=\"tailTruncation\" numberOfLines=\"2\" baselineAdjustment=\"alignBaselines\" adjustsFontSizeToFit=\"NO\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"HKn-AB-PHC\">","                                                                        <rect key=\"frame\" x=\"0.0\" y=\"40\" width=\"350\" height=\"25.5\"\/>","                                                                        <fontDescription key=\"fontDescription\" type=\"system\" weight=\"semibold\" pointSize=\"21\"\/>","                                                                        <nil key=\"textColor\"\/>","                                                                        <nil key=\"highlightedColor\"\/>","                                                                    <\/label>","                                                                    <label opaque=\"NO\" userInteractionEnabled=\"NO\" contentMode=\"left\" horizontalHuggingPriority=\"251\" verticalHuggingPriority=\"251\" text=\"Register your device as a FIDO2 authenticator against your on-premise deployment.\" textAlignment=\"natural\" lineBreakMode=\"wordWrap\" numberOfLines=\"3\" baselineAdjustment=\"alignBaselines\" adjustsFontSizeToFit=\"NO\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"HVP-G3-QzJ\">","                                                                        <rect key=\"frame\" x=\"0.0\" y=\"85.5\" width=\"350\" height=\"41\"\/>","                                                                        <fontDescription key=\"fontDescription\" type=\"system\" pointSize=\"17\"\/>","                                                                        <nil key=\"textColor\"\/>","                                                                        <nil key=\"highlightedColor\"\/>","                                                                    <\/label>","                                                                    <button opaque=\"NO\" contentMode=\"scaleToFill\" contentHorizontalAlignment=\"center\" contentVerticalAlignment=\"center\" buttonType=\"system\" lineBreakMode=\"middleTruncation\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"rVd-2h-fmU\">","                                                                        <rect key=\"frame\" x=\"0.0\" y=\"146.5\" width=\"350\" height=\"48\"\/>","                                                                        <color key=\"backgroundColor\" name=\"AccentColor\"\/>","                                                                        <constraints>","                                                                            <constraint firstAttribute=\"height\" constant=\"48\" id=\"qlN-Ir-5ef\"\/>","                                                                        <\/constraints>","                                                                        <fontDescription key=\"fontDescription\" type=\"system\" weight=\"semibold\" pointSize=\"17\"\/>","                                                                        <state key=\"normal\" title=\"Get Started\">","                                                                            <color key=\"titleColor\" white=\"1\" alpha=\"1\" colorSpace=\"custom\" customColorSpace=\"genericGamma22GrayColorSpace\"\/>","                                                                        <\/state>","                                                                        <connections>","                                                                            <segue destination=\"aey-lv-Jf0\" kind=\"show\" id=\"Nwb-ui-xP8\"\/>","                                                                        <\/connections>","                                                                    <\/button>","                                                                <\/subviews>","                                                            <\/stackView>","                                                        <\/subviews>","                                                        <color key=\"backgroundColor\" white=\"1\" alpha=\"1\" colorSpace=\"custom\" customColorSpace=\"genericGamma22GrayColorSpace\"\/>","                                                        <constraints>","                                                            <constraint firstAttribute=\"trailing\" secondItem=\"TZ6-p7-vTl\" secondAttribute=\"trailing\" constant=\"16\" id=\"1Lw-Hw-TY3\"\/>","                                                            <constraint firstAttribute=\"height\" constant=\"240\" id=\"2UA-Nt-BCU\"\/>","                                                            <constraint firstItem=\"TZ6-p7-vTl\" firstAttribute=\"leading\" secondItem=\"X4v-uK-hNo\" secondAttribute=\"leading\" constant=\"16\" id=\"WKd-dH-V7V\"\/>","                                                            <constraint firstItem=\"TZ6-p7-vTl\" firstAttribute=\"top\" secondItem=\"X4v-uK-hNo\" secondAttribute=\"top\" constant=\"16\" id=\"dwT-3C-5wC\"\/>","                                                        <\/constraints>","                                                    <\/view>","                                                <\/subviews>","                                                <viewLayoutGuide key=\"safeArea\" id=\"GJO-nx-1g7\"\/>","                                                <color key=\"backgroundColor\" white=\"0.0\" alpha=\"0.0\" colorSpace=\"custom\" customColorSpace=\"genericGamma22GrayColorSpace\"\/>","                                                <constraints>","                                                    <constraint firstAttribute=\"trailing\" secondItem=\"X4v-uK-hNo\" secondAttribute=\"trailingMargin\" constant=\"24\" id=\"bhs-k8-cj8\"\/>","                                                    <constraint firstAttribute=\"height\" constant=\"256\" id=\"bvn-zK-Pgh\"\/>","                                                    <constraint firstItem=\"X4v-uK-hNo\" firstAttribute=\"top\" secondItem=\"tsb-I6-Gxc\" secondAttribute=\"top\" constant=\"16\" id=\"wbR-yu-VG3\"\/>","                                                    <constraint firstItem=\"X4v-uK-hNo\" firstAttribute=\"leading\" secondItem=\"tsb-I6-Gxc\" secondAttribute=\"leading\" constant=\"16\" id=\"z9r-dZ-dzd\"\/>","                                                <\/constraints>","                                            <\/view>","                                        <\/subviews>","                                        <color key=\"backgroundColor\" white=\"0.0\" alpha=\"0.0\" colorSpace=\"custom\" customColorSpace=\"genericGamma22GrayColorSpace\"\/>","                                        <constraints>","                                            <constraint firstAttribute=\"height\" constant=\"637\" id=\"GJc-pf-vyh\"\/>","                                        <\/constraints>","                                    <\/stackView>","                                <\/subviews>","                                <constraints>","                                    <constraint firstItem=\"jZ2-Jd-IZC\" firstAttribute=\"top\" secondItem=\"G0Y-FK-CgS\" secondAttribute=\"top\" id=\"0mZ-dK-mMk\"\/>","                                    <constraint firstItem=\"jZ2-Jd-IZC\" firstAttribute=\"width\" secondItem=\"J6i-Ly-kg9\" secondAttribute=\"width\" id=\"N7J-u3-Wxh\"\/>","                                    <constraint firstItem=\"jZ2-Jd-IZC\" firstAttribute=\"bottom\" secondItem=\"G0Y-FK-CgS\" secondAttribute=\"bottom\" id=\"WQc-kQ-RwL\"\/>","                                    <constraint firstItem=\"jZ2-Jd-IZC\" firstAttribute=\"leading\" secondItem=\"G0Y-FK-CgS\" secondAttribute=\"leading\" id=\"qm9-NR-tKB\"\/>","                                    <constraint firstItem=\"jZ2-Jd-IZC\" firstAttribute=\"trailing\" secondItem=\"G0Y-FK-CgS\" secondAttribute=\"trailing\" id=\"s4r-Cv-eON\"\/>","                                <\/constraints>","                                <viewLayoutGuide key=\"contentLayoutGuide\" id=\"G0Y-FK-CgS\"\/>","                                <viewLayoutGuide key=\"frameLayoutGuide\" id=\"J6i-Ly-kg9\"\/>","                            <\/scrollView>","                        <\/subviews>","                        <viewLayoutGuide key=\"safeArea\" id=\"Mfu-ck-GAc\"\/>","                        <color key=\"backgroundColor\" systemColor=\"systemBackgroundColor\"\/>","                        <constraints>","                            <constraint firstItem=\"Mfu-ck-GAc\" firstAttribute=\"leading\" secondItem=\"kv9-NN-ch8\" secondAttribute=\"leading\" id=\"WpN-uw-JWM\"\/>","                            <constraint firstAttribute=\"bottomMargin\" secondItem=\"kv9-NN-ch8\" secondAttribute=\"bottom\" id=\"XC3-K4-2BK\"\/>","                            <constraint firstItem=\"kv9-NN-ch8\" firstAttribute=\"trailing\" secondItem=\"Mfu-ck-GAc\" secondAttribute=\"trailing\" id=\"h4w-U0-Vic\"\/>","                            <constraint firstItem=\"kv9-NN-ch8\" firstAttribute=\"top\" secondItem=\"Mfu-ck-GAc\" secondAttribute=\"top\" constant=\"24\" id=\"zc0-pe-u44\"\/>","                        <\/constraints>","                    <\/view>","                    <connections>","                        <outlet property=\"buttonISV\" destination=\"8Cv-Ym-vIe\" id=\"4dB-ij-9ho\"\/>","                        <outlet property=\"buttonISVA\" destination=\"rVd-2h-fmU\" id=\"WVC-qQ-63G\"\/>","                        <outlet property=\"viewISV\" destination=\"S1F-bG-xxR\" id=\"0px-vz-3Tt\"\/>","                        <outlet property=\"viewISVA\" destination=\"X4v-uK-hNo\" id=\"lBj-nL-Wmg\"\/>","                    <\/connections>","                <\/viewController>","                <placeholder placeholderIdentifier=\"IBFirstResponder\" id=\"pXx-kk-dsF\" userLabel=\"First Responder\" customClass=\"UIResponder\" sceneMemberID=\"firstResponder\"\/>","            <\/objects>","            <point key=\"canvasLocation\" x=\"-696\" y=\"-785\"\/>","        <\/scene>","        <!--Login View Controller-->","        <scene sceneID=\"Kv1-0w-ZcH\">","            <objects>","                <viewController id=\"c0W-Ti-tch\" customClass=\"LoginViewController\" customModule=\"FIDO2App\" customModuleProvider=\"target\" sceneMemberID=\"viewController\">","                    <view key=\"view\" contentMode=\"scaleToFill\" id=\"mrN-w5-GsF\">","                        <rect key=\"frame\" x=\"0.0\" y=\"0.0\" width=\"414\" height=\"842\"\/>","                        <autoresizingMask key=\"autoresizingMask\" widthSizable=\"YES\" heightSizable=\"YES\"\/>","                        <subviews>","                            <stackView opaque=\"NO\" contentMode=\"scaleToFill\" axis=\"vertical\" spacing=\"32\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"2De-ce-GhE\">","                                <rect key=\"frame\" x=\"24\" y=\"48\" width=\"272\" height=\"516\"\/>","                                <subviews>","                                    <stackView opaque=\"NO\" contentMode=\"scaleToFill\" axis=\"vertical\" spacing=\"16\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"lem-vW-tgl\">","                                        <rect key=\"frame\" x=\"0.0\" y=\"0.0\" width=\"272\" height=\"152.5\"\/>","                                        <subviews>","                                            <label opaque=\"NO\" userInteractionEnabled=\"NO\" contentMode=\"left\" horizontalHuggingPriority=\"251\" verticalHuggingPriority=\"251\" text=\"Login\" textAlignment=\"natural\" lineBreakMode=\"tailTruncation\" numberOfLines=\"2\" baselineAdjustment=\"alignBaselines\" adjustsFontSizeToFit=\"NO\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"QAx-5n-PcJ\">","                                                <rect key=\"frame\" x=\"0.0\" y=\"0.0\" width=\"272\" height=\"29\"\/>","                                                <fontDescription key=\"fontDescription\" type=\"system\" weight=\"semibold\" pointSize=\"24\"\/>","                                                <nil key=\"textColor\"\/>","                                                <nil key=\"highlightedColor\"\/>","                                            <\/label>","                                            <label opaque=\"NO\" userInteractionEnabled=\"NO\" contentMode=\"left\" horizontalHuggingPriority=\"251\" verticalHuggingPriority=\"251\" textAlignment=\"natural\" lineBreakMode=\"tailTruncation\" numberOfLines=\"6\" baselineAdjustment=\"alignBaselines\" adjustsFontSizeToFit=\"NO\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"7qK-Xq-qdC\">","                                                <rect key=\"frame\" x=\"0.0\" y=\"45\" width=\"272\" height=\"107.5\"\/>","                                                <string key=\"text\">The first step in registering the device as a FIDO2 authenticator against an cloud tenant is to authenticate as a user.  For this scenario, your tenant needs to support OAuth2 Resource Owner Password Credentials (ROPC).<\/string>","                                                <fontDescription key=\"fontDescription\" type=\"system\" pointSize=\"15\"\/>","                                                <nil key=\"highlightedColor\"\/>","                                            <\/label>","                                        <\/subviews>","                                    <\/stackView>","                                    <stackView opaque=\"NO\" contentMode=\"scaleToFill\" axis=\"vertical\" spacing=\"12\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"4VW-OG-RBx\">","                                        <rect key=\"frame\" x=\"0.0\" y=\"184.5\" width=\"272\" height=\"82.5\"\/>","                                        <subviews>","                                            <label opaque=\"NO\" userInteractionEnabled=\"NO\" contentMode=\"left\" horizontalHuggingPriority=\"251\" verticalHuggingPriority=\"251\" text=\"Tenant URL\" textAlignment=\"natural\" lineBreakMode=\"tailTruncation\" baselineAdjustment=\"alignBaselines\" adjustsFontSizeToFit=\"NO\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"4XA-3z-fFr\">","                                                <rect key=\"frame\" x=\"0.0\" y=\"0.0\" width=\"272\" height=\"18\"\/>","                                                <fontDescription key=\"fontDescription\" type=\"system\" pointSize=\"15\"\/>","                                                <color key=\"textColor\" systemColor=\"systemGrayColor\"\/>","                                                <nil key=\"highlightedColor\"\/>","                                            <\/label>","                                            <textField opaque=\"NO\" contentMode=\"scaleToFill\" contentHorizontalAlignment=\"left\" contentVerticalAlignment=\"center\" placeholder=\"Cloud tenant URL\" textAlignment=\"natural\" minimumFontSize=\"17\" clearButtonMode=\"whileEditing\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"abx-Wp-XZf\">","                                                <rect key=\"frame\" x=\"0.0\" y=\"30\" width=\"272\" height=\"52.5\"\/>","                                                <fontDescription key=\"fontDescription\" type=\"system\" pointSize=\"17\"\/>","                                                <textInputTraits key=\"textInputTraits\" returnKeyType=\"done\" textContentType=\"url\"\/>","                                            <\/textField>","                                        <\/subviews>","                                    <\/stackView>","                                    <stackView opaque=\"NO\" contentMode=\"scaleToFill\" axis=\"vertical\" spacing=\"12\" id=\"U0x-vc-Eot\">","                                        <rect key=\"frame\" x=\"0.0\" y=\"299\" width=\"272\" height=\"51\"\/>","                                        <autoresizingMask key=\"autoresizingMask\" flexibleMaxX=\"YES\" flexibleMaxY=\"YES\"\/>","                                        <subviews>","                                            <label opaque=\"NO\" userInteractionEnabled=\"NO\" contentMode=\"left\" horizontalHuggingPriority=\"251\" verticalHuggingPriority=\"251\" text=\"Client ID\" textAlignment=\"natural\" lineBreakMode=\"tailTruncation\" baselineAdjustment=\"alignBaselines\" adjustsFontSizeToFit=\"NO\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"eBg-CW-IaG\">","                                                <rect key=\"frame\" x=\"0.0\" y=\"0.0\" width=\"272\" height=\"18\"\/>","                                                <fontDescription key=\"fontDescription\" type=\"system\" pointSize=\"15\"\/>","                                                <color key=\"textColor\" systemColor=\"systemGrayColor\"\/>","                                                <nil key=\"highlightedColor\"\/>","                                            <\/label>","                                            <textField opaque=\"NO\" contentMode=\"scaleToFill\" contentHorizontalAlignment=\"left\" contentVerticalAlignment=\"center\" placeholder=\"Client id\" textAlignment=\"natural\" minimumFontSize=\"17\" clearButtonMode=\"whileEditing\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"B6s-th-HdS\">","                                                <rect key=\"frame\" x=\"0.0\" y=\"30\" width=\"272\" height=\"21\"\/>","                                                <fontDescription key=\"fontDescription\" type=\"system\" pointSize=\"17\"\/>","                                                <textInputTraits key=\"textInputTraits\" autocorrectionType=\"no\" returnKeyType=\"done\"\/>","                                            <\/textField>","                                        <\/subviews>","                                        <viewLayoutGuide key=\"safeArea\" id=\"z7X-GD-g5k\"\/>","                                    <\/stackView>","                                    <stackView opaque=\"NO\" contentMode=\"scaleToFill\" axis=\"vertical\" spacing=\"12\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"TYq-uf-nZl\">","                                        <rect key=\"frame\" x=\"0.0\" y=\"382\" width=\"272\" height=\"51\"\/>","                                        <subviews>","                                            <label opaque=\"NO\" userInteractionEnabled=\"NO\" contentMode=\"left\" horizontalHuggingPriority=\"251\" verticalHuggingPriority=\"251\" text=\"Username\" textAlignment=\"natural\" lineBreakMode=\"tailTruncation\" baselineAdjustment=\"alignBaselines\" adjustsFontSizeToFit=\"NO\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"lna-8Y-EI5\">","                                                <rect key=\"frame\" x=\"0.0\" y=\"0.0\" width=\"272\" height=\"18\"\/>","                                                <fontDescription key=\"fontDescription\" type=\"system\" pointSize=\"15\"\/>","                                                <color key=\"textColor\" systemColor=\"systemGrayColor\"\/>","                                                <nil key=\"highlightedColor\"\/>","                                            <\/label>","                                            <textField opaque=\"NO\" contentMode=\"scaleToFill\" contentHorizontalAlignment=\"left\" contentVerticalAlignment=\"center\" placeholder=\"Username\" textAlignment=\"natural\" minimumFontSize=\"17\" clearButtonMode=\"whileEditing\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"No5-vb-KyS\">","                                                <rect key=\"frame\" x=\"0.0\" y=\"30\" width=\"272\" height=\"21\"\/>","                                                <fontDescription key=\"fontDescription\" type=\"system\" pointSize=\"17\"\/>","                                                <textInputTraits key=\"textInputTraits\" autocorrectionType=\"no\" returnKeyType=\"done\"\/>","                                            <\/textField>","                                        <\/subviews>","                                    <\/stackView>","                                    <stackView opaque=\"NO\" contentMode=\"scaleToFill\" axis=\"vertical\" spacing=\"12\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"b46-IH-70O\">","                                        <rect key=\"frame\" x=\"0.0\" y=\"465\" width=\"272\" height=\"51\"\/>","                                        <subviews>","                                            <label opaque=\"NO\" userInteractionEnabled=\"NO\" contentMode=\"left\" horizontalHuggingPriority=\"251\" verticalHuggingPriority=\"251\" text=\"Password\" textAlignment=\"natural\" lineBreakMode=\"tailTruncation\" baselineAdjustment=\"alignBaselines\" adjustsFontSizeToFit=\"NO\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"z0z-fB-LdP\">","                                                <rect key=\"frame\" x=\"0.0\" y=\"0.0\" width=\"272\" height=\"18\"\/>","                                                <fontDescription key=\"fontDescription\" type=\"system\" pointSize=\"15\"\/>","                                                <color key=\"textColor\" systemColor=\"systemGrayColor\"\/>","                                                <nil key=\"highlightedColor\"\/>","                                            <\/label>","                                            <textField opaque=\"NO\" contentMode=\"scaleToFill\" contentHorizontalAlignment=\"left\" contentVerticalAlignment=\"center\" placeholder=\"Password\" textAlignment=\"natural\" minimumFontSize=\"17\" clearButtonMode=\"whileEditing\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"tJS-f9-mHZ\">","                                                <rect key=\"frame\" x=\"0.0\" y=\"30\" width=\"272\" height=\"21\"\/>","                                                <fontDescription key=\"fontDescription\" type=\"system\" pointSize=\"17\"\/>","                                                <textInputTraits key=\"textInputTraits\" autocorrectionType=\"no\" returnKeyType=\"done\" secureTextEntry=\"YES\"\/>","                                            <\/textField>","                                        <\/subviews>","                                    <\/stackView>","                                <\/subviews>","                            <\/stackView>","                            <button opaque=\"NO\" contentMode=\"scaleToFill\" contentHorizontalAlignment=\"center\" contentVerticalAlignment=\"center\" buttonType=\"system\" lineBreakMode=\"middleTruncation\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"oWP-lZ-2j1\">","                                <rect key=\"frame\" x=\"24\" y=\"748\" width=\"42\" height=\"48\"\/>","                                <color key=\"backgroundColor\" name=\"AccentColor\"\/>","                                <constraints>","                                    <constraint firstAttribute=\"height\" constant=\"48\" id=\"urB-vN-lnP\"\/>","                                <\/constraints>","                                <fontDescription key=\"fontDescription\" type=\"system\" pointSize=\"17\"\/>","                                <state key=\"normal\" title=\"Login\">","                                    <color key=\"titleColor\" white=\"1\" alpha=\"1\" colorSpace=\"custom\" customColorSpace=\"genericGamma22GrayColorSpace\"\/>","                                <\/state>","                                <connections>","                                    <action selector=\"onLogin:\" destination=\"c0W-Ti-tch\" eventType=\"touchUpInside\" id=\"BTE-pH-WoJ\"\/>","                                <\/connections>","                            <\/button>","                        <\/subviews>","                        <viewLayoutGuide key=\"safeArea\" id=\"8k0-KT-ghU\"\/>","                        <color key=\"backgroundColor\" systemColor=\"systemBackgroundColor\"\/>","                        <constraints>","                            <constraint firstItem=\"oWP-lZ-2j1\" firstAttribute=\"leading\" secondItem=\"8k0-KT-ghU\" secondAttribute=\"leading\" constant=\"24\" id=\"6OY-Bz-IvX\"\/>","                            <constraint firstItem=\"8k0-KT-ghU\" firstAttribute=\"bottom\" secondItem=\"oWP-lZ-2j1\" secondAttribute=\"bottom\" constant=\"12\" id=\"9qW-bK-MIY\"\/>","                            <constraint firstItem=\"2De-ce-GhE\" firstAttribute=\"leading\" secondItem=\"8k0-KT-ghU\" secondAttribute=\"leading\" constant=\"24\" id=\"X64-tP-dnk\"\/>","                            <constraint firstAttribute=\"trailing\" secondItem=\"2De-ce-GhE\" secondAttribute=\"trailing\" constant=\"24\" id=\"baM-p2-JQO\"\/>","                            <constraint firstItem=\"8k0-KT-ghU\" firstAttribute=\"trailing\" secondItem=\"oWP-lZ-2j1\" secondAttribute=\"trailing\" constant=\"24\" id=\"paJ-KQ-dll\"\/>","                            <constraint firstItem=\"2De-ce-GhE\" firstAttribute=\"top\" secondItem=\"8k0-KT-ghU\" secondAttribute=\"top\" constant=\"48\" id=\"y0d-TD-ikt\"\/>","                        <\/constraints>","                    <\/view>","                    <navigationItem key=\"navigationItem\" id=\"RZO-mP-hlJ\"\/>","                    <connections>","                        <outlet property=\"buttonLogin\" destination=\"oWP-lZ-2j1\" id=\"tF9-Gm-eLJ\"\/>","                        <outlet property=\"textfieldClientId\" destination=\"B6s-th-HdS\" id=\"CnW-Et-2Q8\"\/>","                        <outlet property=\"textfieldPassword\" destination=\"tJS-f9-mHZ\" id=\"VIm-fR-8Wf\"\/>","                        <outlet property=\"textfieldTenant\" destination=\"abx-Wp-XZf\" id=\"c7W-W3-t9S\"\/>","                        <outlet property=\"textfieldUsername\" destination=\"No5-vb-KyS\" id=\"jQk-aW-rl4\"\/>","                        <segue destination=\"BYZ-38-t0r\" kind=\"show\" identifier=\"ShowAttestation\" id=\"mF7-21-tZT\"\/>","                    <\/connections>","                <\/viewController>","                <placeholder placeholderIdentifier=\"IBFirstResponder\" id=\"mAV-cj-i9M\" userLabel=\"First Responder\" customClass=\"UIResponder\" sceneMemberID=\"firstResponder\"\/>","            <\/objects>","            <point key=\"canvasLocation\" x=\"129\" y=\"-1193\"\/>","        <\/scene>","        <!--Who AmI View Controller-->","        <scene sceneID=\"Vet-9e-HjD\">","            <objects>","                <viewController id=\"aey-lv-Jf0\" customClass=\"WhoAmIViewController\" customModule=\"FIDO2App\" customModuleProvider=\"target\" sceneMemberID=\"viewController\">","                    <view key=\"view\" contentMode=\"scaleToFill\" id=\"706-KE-0Iu\">","                        <rect key=\"frame\" x=\"0.0\" y=\"0.0\" width=\"414\" height=\"842\"\/>","                        <autoresizingMask key=\"autoresizingMask\" widthSizable=\"YES\" heightSizable=\"YES\"\/>","                        <subviews>","                            <stackView opaque=\"NO\" contentMode=\"scaleToFill\" axis=\"vertical\" spacing=\"32\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"Zgu-SS-AGe\">","                                <rect key=\"frame\" x=\"24\" y=\"48\" width=\"272\" height=\"384.5\"\/>","                                <subviews>","                                    <stackView opaque=\"NO\" contentMode=\"scaleToFill\" axis=\"vertical\" spacing=\"16\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"uBe-HQ-nJx\">","                                        <rect key=\"frame\" x=\"0.0\" y=\"0.0\" width=\"272\" height=\"135\"\/>","                                        <subviews>","                                            <label opaque=\"NO\" userInteractionEnabled=\"NO\" contentMode=\"left\" horizontalHuggingPriority=\"251\" verticalHuggingPriority=\"251\" text=\"Login\" textAlignment=\"natural\" lineBreakMode=\"tailTruncation\" numberOfLines=\"2\" baselineAdjustment=\"alignBaselines\" adjustsFontSizeToFit=\"NO\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"Oqu-KF-vqP\">","                                                <rect key=\"frame\" x=\"0.0\" y=\"0.0\" width=\"272\" height=\"29\"\/>","                                                <fontDescription key=\"fontDescription\" type=\"system\" weight=\"semibold\" pointSize=\"24\"\/>","                                                <nil key=\"textColor\"\/>","                                                <nil key=\"highlightedColor\"\/>","                                            <\/label>","                                            <label opaque=\"NO\" userInteractionEnabled=\"NO\" contentMode=\"left\" horizontalHuggingPriority=\"251\" verticalHuggingPriority=\"251\" textAlignment=\"natural\" lineBreakMode=\"tailTruncation\" numberOfLines=\"6\" baselineAdjustment=\"alignBaselines\" adjustsFontSizeToFit=\"NO\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"9j7-mD-3s3\">","                                                <rect key=\"frame\" x=\"0.0\" y=\"45\" width=\"272\" height=\"90\"\/>","                                                <string key=\"text\">The first step in registering the device as a FIDO2 authenticator against an on-premise deployment. Obtain your access code from https:\/\/fidointerop.securitypoc.com<\/string>","                                                <fontDescription key=\"fontDescription\" type=\"system\" pointSize=\"15\"\/>","                                                <nil key=\"textColor\"\/>","                                                <nil key=\"highlightedColor\"\/>","                                            <\/label>","                                        <\/subviews>","                                    <\/stackView>","                                    <stackView opaque=\"NO\" contentMode=\"scaleToFill\" axis=\"vertical\" spacing=\"12\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"Yz4-5q-1bv\">","                                        <rect key=\"frame\" x=\"0.0\" y=\"167\" width=\"272\" height=\"134.5\"\/>","                                        <subviews>","                                            <label opaque=\"NO\" userInteractionEnabled=\"NO\" contentMode=\"left\" horizontalHuggingPriority=\"251\" verticalHuggingPriority=\"251\" text=\"Relying party URL\" textAlignment=\"natural\" lineBreakMode=\"tailTruncation\" baselineAdjustment=\"alignBaselines\" adjustsFontSizeToFit=\"NO\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"Sec-S6-QWB\">","                                                <rect key=\"frame\" x=\"0.0\" y=\"0.0\" width=\"272\" height=\"18\"\/>","                                                <fontDescription key=\"fontDescription\" type=\"system\" pointSize=\"15\"\/>","                                                <color key=\"textColor\" systemColor=\"systemGrayColor\"\/>","                                                <nil key=\"highlightedColor\"\/>","                                            <\/label>","                                            <textField opaque=\"NO\" contentMode=\"scaleToFill\" contentHorizontalAlignment=\"left\" contentVerticalAlignment=\"center\" placeholder=\"Cloud tenant URL\" textAlignment=\"natural\" minimumFontSize=\"17\" clearButtonMode=\"whileEditing\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"p5U-Q0-loq\">","                                                <rect key=\"frame\" x=\"0.0\" y=\"30\" width=\"272\" height=\"104.5\"\/>","                                                <fontDescription key=\"fontDescription\" type=\"system\" pointSize=\"17\"\/>","                                                <textInputTraits key=\"textInputTraits\" returnKeyType=\"done\" textContentType=\"url\"\/>","                                            <\/textField>","                                        <\/subviews>","                                    <\/stackView>","                                    <stackView opaque=\"NO\" contentMode=\"scaleToFill\" axis=\"vertical\" spacing=\"12\" id=\"AGr-Hg-5hK\">","                                        <rect key=\"frame\" x=\"0.0\" y=\"333.5\" width=\"272\" height=\"51\"\/>","                                        <autoresizingMask key=\"autoresizingMask\" flexibleMaxX=\"YES\" flexibleMaxY=\"YES\"\/>","                                        <subviews>","                                            <label opaque=\"NO\" userInteractionEnabled=\"NO\" contentMode=\"left\" horizontalHuggingPriority=\"251\" verticalHuggingPriority=\"251\" text=\"Access token\" textAlignment=\"natural\" lineBreakMode=\"tailTruncation\" baselineAdjustment=\"alignBaselines\" adjustsFontSizeToFit=\"NO\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"dJL-Ci-Zys\">","                                                <rect key=\"frame\" x=\"0.0\" y=\"0.0\" width=\"272\" height=\"18\"\/>","                                                <fontDescription key=\"fontDescription\" type=\"system\" pointSize=\"15\"\/>","                                                <color key=\"textColor\" systemColor=\"systemGrayColor\"\/>","                                                <nil key=\"highlightedColor\"\/>","                                            <\/label>","                                            <textField opaque=\"NO\" contentMode=\"scaleToFill\" contentHorizontalAlignment=\"left\" contentVerticalAlignment=\"center\" placeholder=\"Client id\" textAlignment=\"natural\" minimumFontSize=\"17\" clearButtonMode=\"whileEditing\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"KfB-3k-q1h\">","                                                <rect key=\"frame\" x=\"0.0\" y=\"30\" width=\"272\" height=\"21\"\/>","                                                <fontDescription key=\"fontDescription\" type=\"system\" pointSize=\"17\"\/>","                                                <textInputTraits key=\"textInputTraits\" autocorrectionType=\"no\" returnKeyType=\"done\"\/>","                                            <\/textField>","                                        <\/subviews>","                                        <viewLayoutGuide key=\"safeArea\" id=\"wPb-ah-Lj7\"\/>","                                    <\/stackView>","                                <\/subviews>","                            <\/stackView>","                            <button opaque=\"NO\" contentMode=\"scaleToFill\" contentHorizontalAlignment=\"center\" contentVerticalAlignment=\"center\" buttonType=\"system\" lineBreakMode=\"middleTruncation\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"U6f-F4-6ow\">","                                <rect key=\"frame\" x=\"24\" y=\"748\" width=\"74\" height=\"48\"\/>","                                <color key=\"backgroundColor\" name=\"AccentColor\"\/>","                                <constraints>","                                    <constraint firstAttribute=\"height\" constant=\"48\" id=\"PJm-j9-K8Q\"\/>","                                <\/constraints>","                                <fontDescription key=\"fontDescription\" type=\"system\" pointSize=\"17\"\/>","                                <state key=\"normal\" title=\"Who Am I\">","                                    <color key=\"titleColor\" white=\"1\" alpha=\"1\" colorSpace=\"custom\" customColorSpace=\"genericGamma22GrayColorSpace\"\/>","                                <\/state>","                                <connections>","                                    <action selector=\"onWhoAmI:\" destination=\"aey-lv-Jf0\" eventType=\"touchUpInside\" id=\"Kf5-ir-N6Z\"\/>","                                <\/connections>","                            <\/button>","                        <\/subviews>","                        <viewLayoutGuide key=\"safeArea\" id=\"MXI-fO-aN0\"\/>","                        <color key=\"backgroundColor\" systemColor=\"systemBackgroundColor\"\/>","                        <constraints>","                            <constraint firstItem=\"MXI-fO-aN0\" firstAttribute=\"bottom\" secondItem=\"U6f-F4-6ow\" secondAttribute=\"bottom\" constant=\"12\" id=\"Tdc-4Z-Grz\"\/>","                            <constraint firstItem=\"Zgu-SS-AGe\" firstAttribute=\"leading\" secondItem=\"MXI-fO-aN0\" secondAttribute=\"leading\" constant=\"24\" id=\"WDB-ki-BiT\"\/>","                            <constraint firstItem=\"MXI-fO-aN0\" firstAttribute=\"trailing\" secondItem=\"Zgu-SS-AGe\" secondAttribute=\"trailing\" constant=\"24\" id=\"c4m-A5-Ssx\"\/>","                            <constraint firstItem=\"MXI-fO-aN0\" firstAttribute=\"trailing\" secondItem=\"U6f-F4-6ow\" secondAttribute=\"trailing\" constant=\"24\" id=\"gW1-Ro-BA5\"\/>","                            <constraint firstItem=\"U6f-F4-6ow\" firstAttribute=\"leading\" secondItem=\"MXI-fO-aN0\" secondAttribute=\"leading\" constant=\"24\" id=\"p8W-fb-UJS\"\/>","                            <constraint firstItem=\"Zgu-SS-AGe\" firstAttribute=\"top\" secondItem=\"MXI-fO-aN0\" secondAttribute=\"top\" constant=\"48\" id=\"z3A-w3-xXc\"\/>","                        <\/constraints>","                    <\/view>","                    <navigationItem key=\"navigationItem\" id=\"vkF-yr-qzx\"\/>","                    <connections>","                        <outlet property=\"buttonWhoAmI\" destination=\"U6f-F4-6ow\" id=\"Qej-vL-Y88\"\/>","                        <outlet property=\"textfieldAccessToken\" destination=\"KfB-3k-q1h\" id=\"Mdv-3v-Kcd\"\/>","                        <outlet property=\"textfieldRp\" destination=\"p5U-Q0-loq\" id=\"8tV-Rs-aN8\"\/>","                        <segue destination=\"BYZ-38-t0r\" kind=\"show\" identifier=\"ShowAttestation\" id=\"UP4-6B-a9j\"\/>","                    <\/connections>","                <\/viewController>","                <placeholder placeholderIdentifier=\"IBFirstResponder\" id=\"AFJ-5A-485\" userLabel=\"First Responder\" customClass=\"UIResponder\" sceneMemberID=\"firstResponder\"\/>","            <\/objects>","            <point key=\"canvasLocation\" x=\"128\" y=\"-285\"\/>","        <\/scene>","        <!--Attestation View Controller-->","        <scene sceneID=\"tne-QT-ifu\">","            <objects>","                <viewController id=\"BYZ-38-t0r\" customClass=\"AttestationViewController\" customModule=\"FIDO2App\" customModuleProvider=\"target\" sceneMemberID=\"viewController\">","                    <view key=\"view\" contentMode=\"scaleToFill\" id=\"8bC-Xf-vdC\">","                        <rect key=\"frame\" x=\"0.0\" y=\"0.0\" width=\"414\" height=\"842\"\/>","                        <autoresizingMask key=\"autoresizingMask\" widthSizable=\"YES\" heightSizable=\"YES\"\/>","                        <subviews>","                            <stackView opaque=\"NO\" contentMode=\"scaleToFill\" axis=\"vertical\" spacing=\"32\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"j7Z-0L-m8Q\">","                                <rect key=\"frame\" x=\"24\" y=\"48\" width=\"366\" height=\"205\"\/>","                                <subviews>","                                    <stackView opaque=\"NO\" contentMode=\"scaleToFill\" axis=\"vertical\" spacing=\"16\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"Mwi-CE-5bL\">","                                        <rect key=\"frame\" x=\"0.0\" y=\"0.0\" width=\"366\" height=\"81\"\/>","                                        <subviews>","                                            <label opaque=\"NO\" userInteractionEnabled=\"NO\" contentMode=\"left\" horizontalHuggingPriority=\"251\" verticalHuggingPriority=\"251\" text=\"Attestation Options\" textAlignment=\"natural\" lineBreakMode=\"tailTruncation\" numberOfLines=\"2\" baselineAdjustment=\"alignBaselines\" adjustsFontSizeToFit=\"NO\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"uqB-SX-Ugp\">","                                                <rect key=\"frame\" x=\"0.0\" y=\"0.0\" width=\"366\" height=\"29\"\/>","                                                <fontDescription key=\"fontDescription\" type=\"system\" weight=\"semibold\" pointSize=\"24\"\/>","                                                <nil key=\"textColor\"\/>","                                                <nil key=\"highlightedColor\"\/>","                                            <\/label>","                                            <label opaque=\"NO\" userInteractionEnabled=\"NO\" contentMode=\"left\" horizontalHuggingPriority=\"251\" verticalHuggingPriority=\"251\" text=\"The next step is obtaining the public key credential options from the relying party.\" textAlignment=\"natural\" lineBreakMode=\"tailTruncation\" numberOfLines=\"4\" baselineAdjustment=\"alignBaselines\" adjustsFontSizeToFit=\"NO\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"Svs-fm-7yF\">","                                                <rect key=\"frame\" x=\"0.0\" y=\"45\" width=\"366\" height=\"36\"\/>","                                                <fontDescription key=\"fontDescription\" type=\"system\" pointSize=\"15\"\/>","                                                <nil key=\"highlightedColor\"\/>","                                            <\/label>","                                        <\/subviews>","                                    <\/stackView>","                                    <stackView opaque=\"NO\" contentMode=\"scaleToFill\" axis=\"vertical\" spacing=\"12\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"nrN-wk-T4l\">","                                        <rect key=\"frame\" x=\"0.0\" y=\"113\" width=\"366\" height=\"30\"\/>","                                        <subviews>","                                            <label opaque=\"NO\" userInteractionEnabled=\"NO\" contentMode=\"left\" horizontalHuggingPriority=\"251\" verticalHuggingPriority=\"251\" text=\"Relying party URL\" textAlignment=\"natural\" lineBreakMode=\"tailTruncation\" baselineAdjustment=\"alignBaselines\" adjustsFontSizeToFit=\"NO\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"NMC-ra-buH\">","                                                <rect key=\"frame\" x=\"0.0\" y=\"0.0\" width=\"366\" height=\"18\"\/>","                                                <fontDescription key=\"fontDescription\" type=\"system\" pointSize=\"15\"\/>","                                                <color key=\"textColor\" systemColor=\"systemGrayColor\"\/>","                                                <nil key=\"highlightedColor\"\/>","                                            <\/label>","                                            <label opaque=\"NO\" userInteractionEnabled=\"NO\" contentMode=\"left\" horizontalHuggingPriority=\"251\" verticalHuggingPriority=\"251\" text=\"\" textAlignment=\"natural\" lineBreakMode=\"tailTruncation\" numberOfLines=\"5\" baselineAdjustment=\"alignBaselines\" adjustsFontSizeToFit=\"NO\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"BOu-4M-del\">","                                                <rect key=\"frame\" x=\"0.0\" y=\"30\" width=\"366\" height=\"0.0\"\/>","                                                <fontDescription key=\"fontDescription\" type=\"system\" pointSize=\"17\"\/>","                                                <nil key=\"textColor\"\/>","                                                <nil key=\"highlightedColor\"\/>","                                            <\/label>","                                        <\/subviews>","                                    <\/stackView>","                                    <stackView opaque=\"NO\" contentMode=\"scaleToFill\" axis=\"vertical\" spacing=\"12\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"X1y-sf-H1x\">","                                        <rect key=\"frame\" x=\"0.0\" y=\"175\" width=\"366\" height=\"30\"\/>","                                        <subviews>","                                            <label opaque=\"NO\" userInteractionEnabled=\"NO\" contentMode=\"left\" horizontalHuggingPriority=\"251\" verticalHuggingPriority=\"251\" text=\"Access token\" textAlignment=\"natural\" lineBreakMode=\"tailTruncation\" baselineAdjustment=\"alignBaselines\" adjustsFontSizeToFit=\"NO\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"S9j-x7-pwj\">","                                                <rect key=\"frame\" x=\"0.0\" y=\"0.0\" width=\"366\" height=\"18\"\/>","                                                <fontDescription key=\"fontDescription\" type=\"system\" pointSize=\"15\"\/>","                                                <color key=\"textColor\" systemColor=\"systemGrayColor\"\/>","                                                <nil key=\"highlightedColor\"\/>","                                            <\/label>","                                            <label opaque=\"NO\" userInteractionEnabled=\"NO\" contentMode=\"left\" horizontalHuggingPriority=\"251\" verticalHuggingPriority=\"251\" text=\"\" textAlignment=\"natural\" lineBreakMode=\"tailTruncation\" numberOfLines=\"3\" baselineAdjustment=\"alignBaselines\" adjustsFontSizeToFit=\"NO\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"uR8-2a-MiB\">","                                                <rect key=\"frame\" x=\"0.0\" y=\"30\" width=\"366\" height=\"0.0\"\/>","                                                <fontDescription key=\"fontDescription\" type=\"system\" pointSize=\"17\"\/>","                                                <nil key=\"textColor\"\/>","                                                <nil key=\"highlightedColor\"\/>","                                            <\/label>","                                        <\/subviews>","                                    <\/stackView>","                                <\/subviews>","                            <\/stackView>","                            <button opaque=\"NO\" contentMode=\"scaleToFill\" contentHorizontalAlignment=\"center\" contentVerticalAlignment=\"center\" buttonType=\"system\" lineBreakMode=\"middleTruncation\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"wOb-ka-bf6\">","                                <rect key=\"frame\" x=\"24\" y=\"748\" width=\"366\" height=\"48\"\/>","                                <color key=\"backgroundColor\" systemColor=\"systemBlueColor\"\/>","                                <constraints>","                                    <constraint firstAttribute=\"height\" constant=\"48\" id=\"axH-No-GgE\"\/>","                                <\/constraints>","                                <fontDescription key=\"fontDescription\" type=\"system\" pointSize=\"17\"\/>","                                <state key=\"normal\" title=\"Initiate Registration\">","                                    <color key=\"titleColor\" white=\"1\" alpha=\"1\" colorSpace=\"custom\" customColorSpace=\"genericGamma22GrayColorSpace\"\/>","                                <\/state>","                                <connections>","                                    <action selector=\"onOptionClick:\" destination=\"BYZ-38-t0r\" eventType=\"touchUpInside\" id=\"VEo-ND-UGO\"\/>","                                <\/connections>","                            <\/button>","                        <\/subviews>","                        <viewLayoutGuide key=\"safeArea\" id=\"6Tk-OE-BBY\"\/>","                        <color key=\"backgroundColor\" systemColor=\"systemBackgroundColor\"\/>","                        <constraints>","                            <constraint firstItem=\"j7Z-0L-m8Q\" firstAttribute=\"top\" secondItem=\"6Tk-OE-BBY\" secondAttribute=\"top\" constant=\"48\" id=\"B3I-GL-pNg\"\/>","                            <constraint firstItem=\"6Tk-OE-BBY\" firstAttribute=\"bottom\" secondItem=\"wOb-ka-bf6\" secondAttribute=\"bottom\" constant=\"12\" id=\"Nvl-kC-8tO\"\/>","                            <constraint firstItem=\"6Tk-OE-BBY\" firstAttribute=\"trailing\" secondItem=\"j7Z-0L-m8Q\" secondAttribute=\"trailing\" constant=\"24\" id=\"aCP-eB-4Bh\"\/>","                            <constraint firstItem=\"wOb-ka-bf6\" firstAttribute=\"leading\" secondItem=\"6Tk-OE-BBY\" secondAttribute=\"leading\" constant=\"24\" id=\"aj4-v6-SHo\"\/>","                            <constraint firstItem=\"j7Z-0L-m8Q\" firstAttribute=\"leading\" secondItem=\"6Tk-OE-BBY\" secondAttribute=\"leading\" constant=\"24\" id=\"qZ1-aD-CZV\"\/>","                            <constraint firstItem=\"6Tk-OE-BBY\" firstAttribute=\"trailing\" secondItem=\"wOb-ka-bf6\" secondAttribute=\"trailing\" constant=\"24\" id=\"wFa-AL-2gl\"\/>","                        <\/constraints>","                    <\/view>","                    <navigationItem key=\"navigationItem\" id=\"fdN-pb-Qzc\"\/>","                    <connections>","                        <outlet property=\"buttonOption\" destination=\"wOb-ka-bf6\" id=\"WnM-7i-Pe1\"\/>","                        <outlet property=\"labelAccessToken\" destination=\"uR8-2a-MiB\" id=\"Shv-I9-A0g\"\/>","                        <outlet property=\"labelRp\" destination=\"BOu-4M-del\" id=\"u2l-GP-raG\"\/>","                        <segue destination=\"suh-RP-bpp\" kind=\"showDetail\" identifier=\"ShowAttestationOptionsInfo\" id=\"d5Y-at-jXi\"\/>","                    <\/connections>","                <\/viewController>","                <placeholder placeholderIdentifier=\"IBFirstResponder\" id=\"dkx-z0-nzr\" sceneMemberID=\"firstResponder\"\/>","            <\/objects>","            <point key=\"canvasLocation\" x=\"1397\" y=\"-749\"\/>","        <\/scene>","        <!--Attestation Info View Controller-->","        <scene sceneID=\"yu7-Hz-hC7\">","            <objects>","                <viewController id=\"suh-RP-bpp\" customClass=\"AttestationInfoViewController\" customModule=\"FIDO2App\" customModuleProvider=\"target\" sceneMemberID=\"viewController\">","                    <view key=\"view\" contentMode=\"scaleToFill\" id=\"j57-6S-GHc\">","                        <rect key=\"frame\" x=\"0.0\" y=\"0.0\" width=\"414\" height=\"842\"\/>","                        <autoresizingMask key=\"autoresizingMask\" widthSizable=\"YES\" heightSizable=\"YES\"\/>","                        <subviews>","                            <stackView opaque=\"NO\" contentMode=\"scaleToFill\" axis=\"vertical\" spacing=\"32\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"EMT-h8-q7T\">","                                <rect key=\"frame\" x=\"24\" y=\"48\" width=\"366\" height=\"164\"\/>","                                <subviews>","                                    <stackView opaque=\"NO\" contentMode=\"scaleToFill\" axis=\"vertical\" spacing=\"16\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"qGs-4e-dGc\" userLabel=\"Stack Title\">","                                        <rect key=\"frame\" x=\"0.0\" y=\"0.0\" width=\"366\" height=\"81\"\/>","                                        <subviews>","                                            <label opaque=\"NO\" userInteractionEnabled=\"NO\" contentMode=\"left\" horizontalHuggingPriority=\"251\" verticalHuggingPriority=\"251\" text=\"Authenticator Options\" textAlignment=\"natural\" lineBreakMode=\"tailTruncation\" numberOfLines=\"2\" baselineAdjustment=\"alignBaselines\" adjustsFontSizeToFit=\"NO\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"ur1-gN-Pir\">","                                                <rect key=\"frame\" x=\"0.0\" y=\"0.0\" width=\"366\" height=\"29\"\/>","                                                <fontDescription key=\"fontDescription\" type=\"system\" weight=\"semibold\" pointSize=\"24\"\/>","                                                <nil key=\"textColor\"\/>","                                                <nil key=\"highlightedColor\"\/>","                                            <\/label>","                                            <label opaque=\"NO\" userInteractionEnabled=\"NO\" contentMode=\"left\" horizontalHuggingPriority=\"251\" verticalHuggingPriority=\"251\" text=\"Adjust the registration parameters to suit the authenticator you want to register.\" textAlignment=\"natural\" lineBreakMode=\"tailTruncation\" numberOfLines=\"3\" baselineAdjustment=\"alignBaselines\" adjustsFontSizeToFit=\"NO\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"hyR-XU-zb7\">","                                                <rect key=\"frame\" x=\"0.0\" y=\"45\" width=\"366\" height=\"36\"\/>","                                                <fontDescription key=\"fontDescription\" type=\"system\" pointSize=\"15\"\/>","                                                <nil key=\"highlightedColor\"\/>","                                            <\/label>","                                        <\/subviews>","                                    <\/stackView>","                                    <stackView opaque=\"NO\" contentMode=\"scaleToFill\" axis=\"vertical\" spacing=\"12\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"zkr-1M-8NO\" userLabel=\"Stack Nichname\">","                                        <rect key=\"frame\" x=\"0.0\" y=\"113\" width=\"366\" height=\"51\"\/>","                                        <subviews>","                                            <label opaque=\"NO\" userInteractionEnabled=\"NO\" contentMode=\"left\" horizontalHuggingPriority=\"251\" verticalHuggingPriority=\"251\" text=\"Credential nickname (optional)\" textAlignment=\"natural\" lineBreakMode=\"tailTruncation\" baselineAdjustment=\"alignBaselines\" adjustsFontSizeToFit=\"NO\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"sQN-s6-Hwk\">","                                                <rect key=\"frame\" x=\"0.0\" y=\"0.0\" width=\"366\" height=\"18\"\/>","                                                <fontDescription key=\"fontDescription\" type=\"system\" pointSize=\"15\"\/>","                                                <color key=\"textColor\" systemColor=\"systemGrayColor\"\/>","                                                <nil key=\"highlightedColor\"\/>","                                            <\/label>","                                            <textField opaque=\"NO\" contentMode=\"scaleToFill\" contentHorizontalAlignment=\"left\" contentVerticalAlignment=\"center\" placeholder=\"A name to identify the authenticator.\" textAlignment=\"natural\" minimumFontSize=\"17\" clearButtonMode=\"whileEditing\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"SG2-jE-Nny\">","                                                <rect key=\"frame\" x=\"0.0\" y=\"30\" width=\"366\" height=\"21\"\/>","                                                <fontDescription key=\"fontDescription\" type=\"system\" pointSize=\"17\"\/>","                                                <textInputTraits key=\"textInputTraits\" returnKeyType=\"done\" textContentType=\"url\"\/>","                                            <\/textField>","                                        <\/subviews>","                                    <\/stackView>","                                <\/subviews>","                            <\/stackView>","                            <button opaque=\"NO\" contentMode=\"scaleToFill\" contentHorizontalAlignment=\"center\" contentVerticalAlignment=\"center\" buttonType=\"system\" lineBreakMode=\"middleTruncation\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"n1w-eu-pMA\">","                                <rect key=\"frame\" x=\"24\" y=\"688\" width=\"366\" height=\"48\"\/>","                                <color key=\"backgroundColor\" systemColor=\"systemBlueColor\"\/>","                                <constraints>","                                    <constraint firstAttribute=\"height\" constant=\"48\" id=\"6Xz-IY-8le\"\/>","                                <\/constraints>","                                <fontDescription key=\"fontDescription\" type=\"system\" pointSize=\"17\"\/>","                                <state key=\"normal\" title=\"Register\">","                                    <color key=\"titleColor\" white=\"1\" alpha=\"1\" colorSpace=\"custom\" customColorSpace=\"genericGamma22GrayColorSpace\"\/>","                                <\/state>","                                <connections>","                                    <action selector=\"onOptionClick:\" destination=\"BYZ-38-t0r\" eventType=\"touchUpInside\" id=\"UJK-Is-Uro\"\/>","                                    <action selector=\"onRegisterClick:\" destination=\"suh-RP-bpp\" eventType=\"touchUpInside\" id=\"DKC-cJ-k8u\"\/>","                                <\/connections>","                            <\/button>","                            <button opaque=\"NO\" contentMode=\"scaleToFill\" contentHorizontalAlignment=\"center\" contentVerticalAlignment=\"center\" buttonType=\"system\" lineBreakMode=\"middleTruncation\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"O5F-70-3eK\">","                                <rect key=\"frame\" x=\"24\" y=\"748\" width=\"366\" height=\"48\"\/>","                                <constraints>","                                    <constraint firstAttribute=\"height\" constant=\"48\" id=\"eu0-GZ-osm\"\/>","                                <\/constraints>","                                <fontDescription key=\"fontDescription\" type=\"system\" pointSize=\"17\"\/>","                                <state key=\"normal\" title=\"Cancel\">","                                    <color key=\"titleColor\" systemColor=\"linkColor\"\/>","                                <\/state>","                                <connections>","                                    <action selector=\"onCancelClick:\" destination=\"suh-RP-bpp\" eventType=\"touchUpInside\" id=\"DOb-ny-SJz\"\/>","                                    <action selector=\"onOptionClick:\" destination=\"BYZ-38-t0r\" eventType=\"touchUpInside\" id=\"Mee-M3-O7c\"\/>","                                <\/connections>","                            <\/button>","                        <\/subviews>","                        <viewLayoutGuide key=\"safeArea\" id=\"i07-Di-eH1\"\/>","                        <color key=\"backgroundColor\" systemColor=\"systemBackgroundColor\"\/>","                        <constraints>","                            <constraint firstItem=\"EMT-h8-q7T\" firstAttribute=\"leading\" secondItem=\"i07-Di-eH1\" secondAttribute=\"leading\" constant=\"24\" id=\"BE7-NI-qPM\"\/>","                            <constraint firstItem=\"n1w-eu-pMA\" firstAttribute=\"leading\" secondItem=\"i07-Di-eH1\" secondAttribute=\"leading\" constant=\"24\" id=\"BHk-Nf-tbA\"\/>","                            <constraint firstItem=\"i07-Di-eH1\" firstAttribute=\"bottom\" secondItem=\"O5F-70-3eK\" secondAttribute=\"bottom\" constant=\"12\" id=\"avV-xp-U6l\"\/>","                            <constraint firstItem=\"i07-Di-eH1\" firstAttribute=\"trailing\" secondItem=\"EMT-h8-q7T\" secondAttribute=\"trailing\" constant=\"24\" id=\"bGr-2I-XMz\"\/>","                            <constraint firstItem=\"i07-Di-eH1\" firstAttribute=\"trailing\" secondItem=\"O5F-70-3eK\" secondAttribute=\"trailing\" constant=\"24\" id=\"cts-nH-jFM\"\/>","                            <constraint firstItem=\"EMT-h8-q7T\" firstAttribute=\"top\" secondItem=\"i07-Di-eH1\" secondAttribute=\"top\" constant=\"48\" id=\"eLD-Im-T3t\"\/>","                            <constraint firstItem=\"O5F-70-3eK\" firstAttribute=\"top\" secondItem=\"n1w-eu-pMA\" secondAttribute=\"bottom\" constant=\"12\" id=\"msf-3P-Lrg\"\/>","                            <constraint firstItem=\"O5F-70-3eK\" firstAttribute=\"leading\" secondItem=\"i07-Di-eH1\" secondAttribute=\"leading\" constant=\"24\" id=\"tcs-fk-bRx\"\/>","                            <constraint firstItem=\"i07-Di-eH1\" firstAttribute=\"trailing\" secondItem=\"n1w-eu-pMA\" secondAttribute=\"trailing\" constant=\"24\" id=\"wxM-O0-bmW\"\/>","                        <\/constraints>","                    <\/view>","                    <navigationItem key=\"navigationItem\" id=\"oBJ-82-iOr\"\/>","                    <connections>","                        <outlet property=\"buttonCancel\" destination=\"O5F-70-3eK\" id=\"WT2-9s-HQf\"\/>","                        <outlet property=\"buttonRegister\" destination=\"n1w-eu-pMA\" id=\"0kA-qU-vet\"\/>","                        <outlet property=\"textfieldNickname\" destination=\"SG2-jE-Nny\" id=\"lNE-I7-BrO\"\/>","                    <\/connections>","                <\/viewController>","                <placeholder placeholderIdentifier=\"IBFirstResponder\" id=\"6Gh-6f-o5r\" userLabel=\"First Responder\" customClass=\"UIResponder\" sceneMemberID=\"firstResponder\"\/>","            <\/objects>","            <point key=\"canvasLocation\" x=\"2558\" y=\"-750\"\/>","        <\/scene>","        <!--Assertion View Controller-->","        <scene sceneID=\"ePu-g6-eHI\">","            <objects>","                <viewController storyboardIdentifier=\"authenticationLanding\" id=\"uLb-8K-83g\" customClass=\"AssertionViewController\" customModule=\"FIDO2App\" customModuleProvider=\"target\" sceneMemberID=\"viewController\">","                    <view key=\"view\" contentMode=\"scaleToFill\" id=\"bwT-jO-JVL\">","                        <rect key=\"frame\" x=\"0.0\" y=\"0.0\" width=\"414\" height=\"896\"\/>","                        <autoresizingMask key=\"autoresizingMask\" widthSizable=\"YES\" heightSizable=\"YES\"\/>","                        <subviews>","                            <button opaque=\"NO\" contentMode=\"scaleToFill\" contentHorizontalAlignment=\"center\" contentVerticalAlignment=\"center\" buttonType=\"system\" lineBreakMode=\"middleTruncation\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"umC-Er-JXn\">","                                <rect key=\"frame\" x=\"20\" y=\"802\" width=\"374\" height=\"48\"\/>","                                <constraints>","                                    <constraint firstAttribute=\"height\" constant=\"48\" id=\"iIa-9K-4pD\"\/>","                                <\/constraints>","                                <fontDescription key=\"fontDescription\" type=\"system\" pointSize=\"17\"\/>","                                <state key=\"normal\" title=\"Remove\">","                                    <color key=\"titleColor\" systemColor=\"systemRedColor\"\/>","                                <\/state>","                                <connections>","                                    <action selector=\"onCancelClick:\" destination=\"suh-RP-bpp\" eventType=\"touchUpInside\" id=\"5Td-DK-aKw\"\/>","                                    <action selector=\"onOptionClick:\" destination=\"BYZ-38-t0r\" eventType=\"touchUpInside\" id=\"TTK-Fs-z0K\"\/>","                                    <action selector=\"onRemoveClick:\" destination=\"uLb-8K-83g\" eventType=\"touchUpInside\" id=\"jos-jz-yt3\"\/>","                                <\/connections>","                            <\/button>","                            <button opaque=\"NO\" contentMode=\"scaleToFill\" contentHorizontalAlignment=\"center\" contentVerticalAlignment=\"center\" buttonType=\"system\" lineBreakMode=\"middleTruncation\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"7ie-5w-bdM\">","                                <rect key=\"frame\" x=\"20\" y=\"742\" width=\"374\" height=\"48\"\/>","                                <color key=\"backgroundColor\" systemColor=\"systemBlueColor\"\/>","                                <constraints>","                                    <constraint firstAttribute=\"height\" constant=\"48\" id=\"AKk-XQ-Qbn\"\/>","                                <\/constraints>","                                <fontDescription key=\"fontDescription\" type=\"system\" pointSize=\"17\"\/>","                                <state key=\"normal\" title=\"Authenticate\">","                                    <color key=\"titleColor\" white=\"1\" alpha=\"1\" colorSpace=\"custom\" customColorSpace=\"genericGamma22GrayColorSpace\"\/>","                                <\/state>","                                <connections>","                                    <action selector=\"onAuthenticateClick:\" destination=\"uLb-8K-83g\" eventType=\"touchUpInside\" id=\"eET-Y1-geg\"\/>","                                    <action selector=\"onOptionClick:\" destination=\"BYZ-38-t0r\" eventType=\"touchUpInside\" id=\"6UZ-uv-45w\"\/>","                                    <action selector=\"onRegisterClick:\" destination=\"suh-RP-bpp\" eventType=\"touchUpInside\" id=\"2ZS-34-G3f\"\/>","                                <\/connections>","                            <\/button>","                            <scrollView clipsSubviews=\"YES\" multipleTouchEnabled=\"YES\" contentMode=\"scaleToFill\" showsHorizontalScrollIndicator=\"NO\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"ur6-ja-Nft\">","                                <rect key=\"frame\" x=\"0.0\" y=\"44\" width=\"414\" height=\"666\"\/>","                                <subviews>","                                    <stackView opaque=\"NO\" contentMode=\"scaleToFill\" axis=\"vertical\" spacing=\"16\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"Et6-2R-EW5\">","                                        <rect key=\"frame\" x=\"20\" y=\"48\" width=\"374\" height=\"440\"\/>","                                        <subviews>","                                            <stackView opaque=\"NO\" contentMode=\"scaleToFill\" axis=\"vertical\" spacing=\"12\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"74i-Bh-duQ\" userLabel=\"Stack Title\">","                                                <rect key=\"frame\" x=\"0.0\" y=\"0.0\" width=\"374\" height=\"97\"\/>","                                                <subviews>","                                                    <label opaque=\"NO\" userInteractionEnabled=\"NO\" contentMode=\"left\" horizontalHuggingPriority=\"251\" text=\"FIDO2 Native Example\" textAlignment=\"natural\" lineBreakMode=\"tailTruncation\" numberOfLines=\"2\" baselineAdjustment=\"alignBaselines\" adjustsFontSizeToFit=\"NO\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"ELy-OP-XTn\">","                                                        <rect key=\"frame\" x=\"0.0\" y=\"0.0\" width=\"374\" height=\"29\"\/>","                                                        <fontDescription key=\"fontDescription\" type=\"system\" weight=\"semibold\" pointSize=\"24\"\/>","                                                        <nil key=\"textColor\"\/>","                                                        <nil key=\"highlightedColor\"\/>","                                                    <\/label>","                                                    <imageView clipsSubviews=\"YES\" userInteractionEnabled=\"NO\" contentMode=\"scaleAspectFit\" horizontalHuggingPriority=\"251\" verticalHuggingPriority=\"251\" image=\"lock.shield\" catalog=\"system\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"6ec-G2-fKM\">","                                                        <rect key=\"frame\" x=\"0.0\" y=\"41.5\" width=\"374\" height=\"55\"\/>","                                                        <color key=\"tintColor\" white=\"0.0\" alpha=\"0.0\" colorSpace=\"custom\" customColorSpace=\"genericGamma22GrayColorSpace\"\/>","                                                        <constraints>","                                                            <constraint firstAttribute=\"height\" constant=\"56\" id=\"WLw-7j-QgT\"\/>","                                                        <\/constraints>","                                                    <\/imageView>","                                                <\/subviews>","                                            <\/stackView>","                                            <stackView opaque=\"NO\" contentMode=\"scaleToFill\" axis=\"vertical\" spacing=\"12\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"enN-fU-rkn\">","                                                <rect key=\"frame\" x=\"0.0\" y=\"113\" width=\"374\" height=\"50.5\"\/>","                                                <subviews>","                                                    <label opaque=\"NO\" userInteractionEnabled=\"NO\" contentMode=\"left\" horizontalHuggingPriority=\"251\" verticalHuggingPriority=\"251\" text=\"Display name\" textAlignment=\"natural\" lineBreakMode=\"tailTruncation\" baselineAdjustment=\"alignBaselines\" adjustsFontSizeToFit=\"NO\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"CE8-Po-f9t\">","                                                        <rect key=\"frame\" x=\"0.0\" y=\"0.0\" width=\"374\" height=\"18\"\/>","                                                        <fontDescription key=\"fontDescription\" type=\"system\" pointSize=\"15\"\/>","                                                        <color key=\"textColor\" systemColor=\"systemGrayColor\"\/>","                                                        <nil key=\"highlightedColor\"\/>","                                                    <\/label>","                                                    <label opaque=\"NO\" userInteractionEnabled=\"NO\" contentMode=\"left\" horizontalHuggingPriority=\"251\" verticalHuggingPriority=\"251\" text=\"Label\" textAlignment=\"natural\" lineBreakMode=\"tailTruncation\" baselineAdjustment=\"alignBaselines\" adjustsFontSizeToFit=\"NO\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"m7B-bq-V1b\">","                                                        <rect key=\"frame\" x=\"0.0\" y=\"30\" width=\"374\" height=\"20.5\"\/>","                                                        <fontDescription key=\"fontDescription\" type=\"system\" pointSize=\"17\"\/>","                                                        <nil key=\"textColor\"\/>","                                                        <nil key=\"highlightedColor\"\/>","                                                    <\/label>","                                                <\/subviews>","                                            <\/stackView>","                                            <stackView opaque=\"NO\" contentMode=\"scaleToFill\" axis=\"vertical\" spacing=\"12\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"WsB-gT-CL4\">","                                                <rect key=\"frame\" x=\"0.0\" y=\"179.5\" width=\"374\" height=\"50.5\"\/>","                                                <subviews>","                                                    <label opaque=\"NO\" userInteractionEnabled=\"NO\" contentMode=\"left\" horizontalHuggingPriority=\"251\" verticalHuggingPriority=\"251\" text=\"Relying party\" textAlignment=\"natural\" lineBreakMode=\"tailTruncation\" baselineAdjustment=\"alignBaselines\" adjustsFontSizeToFit=\"NO\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"kW7-1g-3UX\">","                                                        <rect key=\"frame\" x=\"0.0\" y=\"0.0\" width=\"374\" height=\"18\"\/>","                                                        <fontDescription key=\"fontDescription\" type=\"system\" pointSize=\"15\"\/>","                                                        <color key=\"textColor\" systemColor=\"systemGrayColor\"\/>","                                                        <nil key=\"highlightedColor\"\/>","                                                    <\/label>","                                                    <label opaque=\"NO\" userInteractionEnabled=\"NO\" contentMode=\"left\" horizontalHuggingPriority=\"251\" verticalHuggingPriority=\"251\" text=\"Label\" textAlignment=\"natural\" lineBreakMode=\"tailTruncation\" baselineAdjustment=\"alignBaselines\" adjustsFontSizeToFit=\"NO\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"Dq2-zb-WCj\">","                                                        <rect key=\"frame\" x=\"0.0\" y=\"30\" width=\"374\" height=\"20.5\"\/>","                                                        <fontDescription key=\"fontDescription\" type=\"system\" pointSize=\"17\"\/>","                                                        <nil key=\"textColor\"\/>","                                                        <nil key=\"highlightedColor\"\/>","                                                    <\/label>","                                                <\/subviews>","                                            <\/stackView>","                                            <stackView opaque=\"NO\" contentMode=\"scaleToFill\" axis=\"vertical\" spacing=\"12\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"F8E-5z-eiF\">","                                                <rect key=\"frame\" x=\"0.0\" y=\"246\" width=\"374\" height=\"50.5\"\/>","                                                <subviews>","                                                    <label opaque=\"NO\" userInteractionEnabled=\"NO\" contentMode=\"left\" horizontalHuggingPriority=\"251\" verticalHuggingPriority=\"251\" text=\"Credential nickname\" textAlignment=\"natural\" lineBreakMode=\"tailTruncation\" baselineAdjustment=\"alignBaselines\" adjustsFontSizeToFit=\"NO\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"Bi3-85-yYP\">","                                                        <rect key=\"frame\" x=\"0.0\" y=\"0.0\" width=\"374\" height=\"18\"\/>","                                                        <fontDescription key=\"fontDescription\" type=\"system\" pointSize=\"15\"\/>","                                                        <color key=\"textColor\" systemColor=\"systemGrayColor\"\/>","                                                        <nil key=\"highlightedColor\"\/>","                                                    <\/label>","                                                    <label opaque=\"NO\" userInteractionEnabled=\"NO\" contentMode=\"left\" horizontalHuggingPriority=\"251\" verticalHuggingPriority=\"251\" text=\"Label\" textAlignment=\"natural\" lineBreakMode=\"tailTruncation\" baselineAdjustment=\"alignBaselines\" adjustsFontSizeToFit=\"NO\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"5VK-0o-Fhm\">","                                                        <rect key=\"frame\" x=\"0.0\" y=\"30\" width=\"374\" height=\"20.5\"\/>","                                                        <fontDescription key=\"fontDescription\" type=\"system\" pointSize=\"17\"\/>","                                                        <nil key=\"textColor\"\/>","                                                        <nil key=\"highlightedColor\"\/>","                                                    <\/label>","                                                <\/subviews>","                                            <\/stackView>","                                            <stackView opaque=\"NO\" contentMode=\"scaleToFill\" axis=\"vertical\" spacing=\"12\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"Dei-TR-xs5\">","                                                <rect key=\"frame\" x=\"0.0\" y=\"312.5\" width=\"374\" height=\"50.5\"\/>","                                                <subviews>","                                                    <label opaque=\"NO\" userInteractionEnabled=\"NO\" contentMode=\"left\" horizontalHuggingPriority=\"251\" verticalHuggingPriority=\"251\" text=\"Created date\" textAlignment=\"natural\" lineBreakMode=\"tailTruncation\" baselineAdjustment=\"alignBaselines\" adjustsFontSizeToFit=\"NO\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"lDb-rS-1Se\">","                                                        <rect key=\"frame\" x=\"0.0\" y=\"0.0\" width=\"374\" height=\"18\"\/>","                                                        <fontDescription key=\"fontDescription\" type=\"system\" pointSize=\"15\"\/>","                                                        <color key=\"textColor\" systemColor=\"systemGrayColor\"\/>","                                                        <nil key=\"highlightedColor\"\/>","                                                    <\/label>","                                                    <label opaque=\"NO\" userInteractionEnabled=\"NO\" contentMode=\"left\" horizontalHuggingPriority=\"251\" verticalHuggingPriority=\"251\" text=\"Label\" textAlignment=\"natural\" lineBreakMode=\"tailTruncation\" numberOfLines=\"0\" baselineAdjustment=\"alignBaselines\" adjustsFontSizeToFit=\"NO\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"Qan-84-nb0\">","                                                        <rect key=\"frame\" x=\"0.0\" y=\"30\" width=\"374\" height=\"20.5\"\/>","                                                        <fontDescription key=\"fontDescription\" type=\"system\" pointSize=\"17\"\/>","                                                        <nil key=\"textColor\"\/>","                                                        <nil key=\"highlightedColor\"\/>","                                                    <\/label>","                                                <\/subviews>","                                            <\/stackView>","                                            <stackView opaque=\"NO\" contentMode=\"scaleToFill\" axis=\"vertical\" spacing=\"12\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"Ke3-Cw-EZw\">","                                                <rect key=\"frame\" x=\"0.0\" y=\"379\" width=\"374\" height=\"61\"\/>","                                                <subviews>","                                                    <label opaque=\"NO\" userInteractionEnabled=\"NO\" contentMode=\"left\" horizontalHuggingPriority=\"251\" verticalHuggingPriority=\"251\" text=\"Transaction confirmation extension\" textAlignment=\"natural\" lineBreakMode=\"tailTruncation\" baselineAdjustment=\"alignBaselines\" adjustsFontSizeToFit=\"NO\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"mjx-Vv-97V\">","                                                        <rect key=\"frame\" x=\"0.0\" y=\"0.0\" width=\"374\" height=\"18\"\/>","                                                        <fontDescription key=\"fontDescription\" type=\"system\" pointSize=\"15\"\/>","                                                        <color key=\"textColor\" systemColor=\"systemGrayColor\"\/>","                                                        <nil key=\"highlightedColor\"\/>","                                                    <\/label>","                                                    <switch opaque=\"NO\" contentMode=\"scaleToFill\" horizontalHuggingPriority=\"750\" verticalHuggingPriority=\"750\" contentHorizontalAlignment=\"center\" contentVerticalAlignment=\"center\" on=\"YES\" title=\"Assertion options\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"lvN-e8-aES\">","                                                        <rect key=\"frame\" x=\"0.0\" y=\"30\" width=\"376\" height=\"31\"\/>","                                                    <\/switch>","                                                <\/subviews>","                                            <\/stackView>","                                        <\/subviews>","                                    <\/stackView>","                                <\/subviews>","                                <constraints>","                                    <constraint firstItem=\"Et6-2R-EW5\" firstAttribute=\"trailing\" secondItem=\"ur6-ja-Nft\" secondAttribute=\"trailing\" id=\"D9P-y9-bvb\"\/>","                                    <constraint firstItem=\"Et6-2R-EW5\" firstAttribute=\"leading\" secondItem=\"ur6-ja-Nft\" secondAttribute=\"leading\" constant=\"20\" id=\"Gnd-7t-Sd7\"\/>","                                    <constraint firstAttribute=\"bottom\" secondItem=\"Et6-2R-EW5\" secondAttribute=\"bottom\" id=\"k1Z-yb-YYQ\"\/>","                                    <constraint firstItem=\"Et6-2R-EW5\" firstAttribute=\"top\" secondItem=\"ur6-ja-Nft\" secondAttribute=\"top\" constant=\"48\" id=\"oq2-90-BXt\"\/>","                                <\/constraints>","                            <\/scrollView>","                        <\/subviews>","                        <viewLayoutGuide key=\"safeArea\" id=\"bF9-KY-7pY\"\/>","                        <color key=\"backgroundColor\" systemColor=\"systemBackgroundColor\"\/>","                        <constraints>","                            <constraint firstItem=\"Et6-2R-EW5\" firstAttribute=\"width\" secondItem=\"ur6-ja-Nft\" secondAttribute=\"width\" constant=\"-40\" id=\"2qs-1D-T6r\"\/>","                            <constraint firstItem=\"bF9-KY-7pY\" firstAttribute=\"trailing\" secondItem=\"7ie-5w-bdM\" secondAttribute=\"trailing\" constant=\"20\" id=\"ESU-Zc-oIw\"\/>","                            <constraint firstItem=\"bF9-KY-7pY\" firstAttribute=\"trailing\" secondItem=\"umC-Er-JXn\" secondAttribute=\"trailing\" constant=\"20\" id=\"I2f-Be-BpB\"\/>","                            <constraint firstItem=\"umC-Er-JXn\" firstAttribute=\"top\" secondItem=\"7ie-5w-bdM\" secondAttribute=\"bottom\" constant=\"12\" id=\"Inm-Da-evZ\"\/>","                            <constraint firstItem=\"7ie-5w-bdM\" firstAttribute=\"top\" secondItem=\"ur6-ja-Nft\" secondAttribute=\"bottom\" constant=\"32\" id=\"QaH-gV-56b\"\/>","                            <constraint firstItem=\"7ie-5w-bdM\" firstAttribute=\"leading\" secondItem=\"bF9-KY-7pY\" secondAttribute=\"leading\" constant=\"20\" id=\"UhA-aX-bCd\"\/>","                            <constraint firstItem=\"umC-Er-JXn\" firstAttribute=\"leading\" secondItem=\"bF9-KY-7pY\" secondAttribute=\"leading\" constant=\"20\" id=\"buB-LH-NUi\"\/>","                            <constraint firstItem=\"ur6-ja-Nft\" firstAttribute=\"leading\" secondItem=\"bF9-KY-7pY\" secondAttribute=\"leading\" id=\"c5c-2U-kDH\"\/>","                            <constraint firstItem=\"bF9-KY-7pY\" firstAttribute=\"bottom\" secondItem=\"umC-Er-JXn\" secondAttribute=\"bottom\" constant=\"12\" id=\"kjH-dt-njg\"\/>","                            <constraint firstItem=\"ur6-ja-Nft\" firstAttribute=\"trailing\" secondItem=\"bF9-KY-7pY\" secondAttribute=\"trailing\" id=\"wmE-GC-2Sh\"\/>","                            <constraint firstItem=\"ur6-ja-Nft\" firstAttribute=\"top\" secondItem=\"bF9-KY-7pY\" secondAttribute=\"top\" id=\"ymf-ql-TlH\"\/>","                        <\/constraints>","                    <\/view>","                    <connections>","                        <outlet property=\"buttonAuthenticate\" destination=\"7ie-5w-bdM\" id=\"pzm-RQ-QP5\"\/>","                        <outlet property=\"buttonRemove\" destination=\"umC-Er-JXn\" id=\"QPp-vg-UKb\"\/>","                        <outlet property=\"imageView\" destination=\"6ec-G2-fKM\" id=\"PrM-u6-uxf\"\/>","                        <outlet property=\"labelCreatedDate\" destination=\"Qan-84-nb0\" id=\"em1-Kp-KtO\"\/>","                        <outlet property=\"labelDisplayName\" destination=\"m7B-bq-V1b\" id=\"jwu-4p-gb3\"\/>","                        <outlet property=\"labelHostName\" destination=\"Dq2-zb-WCj\" id=\"yRh-rX-L8m\"\/>","                        <outlet property=\"labelNickName\" destination=\"5VK-0o-Fhm\" id=\"MkG-0p-jxW\"\/>","                        <outlet property=\"switchEauthExt\" destination=\"lvN-e8-aES\" id=\"ma8-0r-aoG\"\/>","                        <segue destination=\"Vjz-gM-NVA\" kind=\"showDetail\" identifier=\"ShowAssertionOptionsInfo\" id=\"hsU-xT-PzC\"\/>","                    <\/connections>","                <\/viewController>","                <placeholder placeholderIdentifier=\"IBFirstResponder\" id=\"1Bp-7s-AAX\" userLabel=\"First Responder\" customClass=\"UIResponder\" sceneMemberID=\"firstResponder\"\/>","            <\/objects>","            <point key=\"canvasLocation\" x=\"-698.55072463768124\" y=\"539.0625\"\/>","        <\/scene>","        <!--Assertion Info View Controller-->","        <scene sceneID=\"KF7-WJ-nMF\">","            <objects>","                <viewController id=\"Vjz-gM-NVA\" customClass=\"AssertionInfoViewController\" customModule=\"FIDO2App\" customModuleProvider=\"target\" sceneMemberID=\"viewController\">","                    <view key=\"view\" contentMode=\"scaleToFill\" id=\"H0j-vz-glC\">","                        <rect key=\"frame\" x=\"0.0\" y=\"0.0\" width=\"414\" height=\"842\"\/>","                        <autoresizingMask key=\"autoresizingMask\" widthSizable=\"YES\" heightSizable=\"YES\"\/>","                        <subviews>","                            <stackView opaque=\"NO\" contentMode=\"scaleToFill\" axis=\"vertical\" spacing=\"32\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"WKl-K4-KUJ\">","                                <rect key=\"frame\" x=\"24\" y=\"48\" width=\"366\" height=\"100.5\"\/>","                                <subviews>","                                    <stackView opaque=\"NO\" contentMode=\"scaleToFill\" axis=\"vertical\" spacing=\"16\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"PGD-Na-Lyc\">","                                        <rect key=\"frame\" x=\"0.0\" y=\"0.0\" width=\"366\" height=\"100.5\"\/>","                                        <subviews>","                                            <label opaque=\"NO\" userInteractionEnabled=\"NO\" contentMode=\"left\" horizontalHuggingPriority=\"251\" verticalHuggingPriority=\"251\" verticalCompressionResistancePriority=\"749\" text=\"Assertion Result\" textAlignment=\"natural\" lineBreakMode=\"tailTruncation\" numberOfLines=\"2\" baselineAdjustment=\"alignBaselines\" adjustsFontSizeToFit=\"NO\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"7y5-ab-ygp\">","                                                <rect key=\"frame\" x=\"0.0\" y=\"0.0\" width=\"366\" height=\"29\"\/>","                                                <fontDescription key=\"fontDescription\" type=\"system\" weight=\"semibold\" pointSize=\"24\"\/>","                                                <nil key=\"textColor\"\/>","                                                <nil key=\"highlightedColor\"\/>","                                            <\/label>","                                            <label opaque=\"NO\" userInteractionEnabled=\"NO\" contentMode=\"left\" horizontalHuggingPriority=\"251\" verticalHuggingPriority=\"251\" text=\"Performing authentication. Please wait...\" textAlignment=\"natural\" lineBreakMode=\"tailTruncation\" numberOfLines=\"2\" baselineAdjustment=\"alignBaselines\" adjustsFontSizeToFit=\"NO\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"cEc-3u-y5a\">","                                                <rect key=\"frame\" x=\"0.0\" y=\"45\" width=\"366\" height=\"19.5\"\/>","                                                <fontDescription key=\"fontDescription\" type=\"system\" pointSize=\"16\"\/>","                                                <nil key=\"textColor\"\/>","                                                <nil key=\"highlightedColor\"\/>","                                            <\/label>","                                            <activityIndicatorView opaque=\"NO\" contentMode=\"scaleToFill\" horizontalHuggingPriority=\"750\" verticalHuggingPriority=\"750\" style=\"medium\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"Ib3-4d-C6m\">","                                                <rect key=\"frame\" x=\"0.0\" y=\"80.5\" width=\"366\" height=\"20\"\/>","                                            <\/activityIndicatorView>","                                        <\/subviews>","                                    <\/stackView>","                                <\/subviews>","                            <\/stackView>","                            <button opaque=\"NO\" contentMode=\"scaleToFill\" contentHorizontalAlignment=\"center\" contentVerticalAlignment=\"center\" buttonType=\"system\" lineBreakMode=\"middleTruncation\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"Z0P-Ai-w75\">","                                <rect key=\"frame\" x=\"24\" y=\"748\" width=\"366\" height=\"48\"\/>","                                <constraints>","                                    <constraint firstAttribute=\"height\" constant=\"48\" id=\"Kwv-To-bdh\"\/>","                                <\/constraints>","                                <fontDescription key=\"fontDescription\" type=\"system\" pointSize=\"17\"\/>","                                <state key=\"normal\" title=\"Close\">","                                    <color key=\"titleColor\" systemColor=\"linkColor\"\/>","                                <\/state>","                                <connections>","                                    <action selector=\"onCloseClick:\" destination=\"Vjz-gM-NVA\" eventType=\"touchUpInside\" id=\"Geh-QN-zBz\"\/>","                                <\/connections>","                            <\/button>","                            <scrollView clipsSubviews=\"YES\" multipleTouchEnabled=\"YES\" contentMode=\"scaleToFill\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"bCg-eK-y2z\">","                                <rect key=\"frame\" x=\"24\" y=\"160.5\" width=\"378\" height=\"575.5\"\/>","                                <subviews>","                                    <stackView opaque=\"NO\" contentMode=\"scaleToFill\" axis=\"vertical\" spacing=\"32\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"22I-U7-4CL\">","                                        <rect key=\"frame\" x=\"0.0\" y=\"0.0\" width=\"378\" height=\"667\"\/>","                                        <constraints>","                                            <constraint firstAttribute=\"height\" constant=\"667\" id=\"fD3-Vz-RxZ\" userLabel=\"height = 800\"\/>","                                        <\/constraints>","                                    <\/stackView>","                                <\/subviews>","                                <constraints>","                                    <constraint firstItem=\"22I-U7-4CL\" firstAttribute=\"trailing\" secondItem=\"aKd-MI-Vse\" secondAttribute=\"trailing\" id=\"79L-Xj-nly\"\/>","                                    <constraint firstItem=\"22I-U7-4CL\" firstAttribute=\"leading\" secondItem=\"aKd-MI-Vse\" secondAttribute=\"leading\" id=\"VIY-bf-ifC\"\/>","                                    <constraint firstItem=\"22I-U7-4CL\" firstAttribute=\"top\" secondItem=\"aKd-MI-Vse\" secondAttribute=\"top\" id=\"Yhr-Gu-R12\"\/>","                                    <constraint firstItem=\"22I-U7-4CL\" firstAttribute=\"width\" secondItem=\"GJg-lP-c4k\" secondAttribute=\"width\" id=\"cRJ-3Y-Qkf\"\/>","                                    <constraint firstItem=\"22I-U7-4CL\" firstAttribute=\"bottom\" secondItem=\"aKd-MI-Vse\" secondAttribute=\"bottom\" id=\"ebO-sb-QuU\"\/>","                                <\/constraints>","                                <viewLayoutGuide key=\"contentLayoutGuide\" id=\"aKd-MI-Vse\"\/>","                                <viewLayoutGuide key=\"frameLayoutGuide\" id=\"GJg-lP-c4k\"\/>","                            <\/scrollView>","                        <\/subviews>","                        <viewLayoutGuide key=\"safeArea\" id=\"kwz-OK-AX2\"\/>","                        <color key=\"backgroundColor\" systemColor=\"systemBackgroundColor\"\/>","                        <constraints>","                            <constraint firstItem=\"Z0P-Ai-w75\" firstAttribute=\"top\" secondItem=\"bCg-eK-y2z\" secondAttribute=\"bottom\" constant=\"12\" id=\"0Qf-Vs-Ohw\"\/>","                            <constraint firstItem=\"Z0P-Ai-w75\" firstAttribute=\"leading\" secondItem=\"kwz-OK-AX2\" secondAttribute=\"leading\" constant=\"24\" id=\"29I-l7-aYN\"\/>","                            <constraint firstItem=\"WKl-K4-KUJ\" firstAttribute=\"leading\" secondItem=\"kwz-OK-AX2\" secondAttribute=\"leading\" constant=\"24\" id=\"Cdm-sw-aZW\"\/>","                            <constraint firstItem=\"bCg-eK-y2z\" firstAttribute=\"top\" secondItem=\"PGD-Na-Lyc\" secondAttribute=\"bottom\" constant=\"12\" id=\"FM8-Rh-2Jp\"\/>","                            <constraint firstItem=\"kwz-OK-AX2\" firstAttribute=\"trailing\" secondItem=\"WKl-K4-KUJ\" secondAttribute=\"trailing\" constant=\"24\" id=\"NDW-aR-PuE\"\/>","                            <constraint firstItem=\"kwz-OK-AX2\" firstAttribute=\"bottom\" secondItem=\"Z0P-Ai-w75\" secondAttribute=\"bottom\" constant=\"12\" id=\"bMI-Qx-bhn\"\/>","                            <constraint firstItem=\"bCg-eK-y2z\" firstAttribute=\"leading\" secondItem=\"kwz-OK-AX2\" secondAttribute=\"leading\" constant=\"24\" id=\"gge-ye-k97\"\/>","                            <constraint firstItem=\"WKl-K4-KUJ\" firstAttribute=\"top\" secondItem=\"kwz-OK-AX2\" secondAttribute=\"top\" constant=\"48\" id=\"j7K-JS-RVV\"\/>","                            <constraint firstItem=\"kwz-OK-AX2\" firstAttribute=\"trailing\" secondItem=\"bCg-eK-y2z\" secondAttribute=\"trailing\" constant=\"12\" id=\"jvO-jD-93Q\"\/>","                            <constraint firstItem=\"kwz-OK-AX2\" firstAttribute=\"trailing\" secondItem=\"Z0P-Ai-w75\" secondAttribute=\"trailing\" constant=\"24\" id=\"wQy-Iu-MH0\"\/>","                        <\/constraints>","                    <\/view>","                    <connections>","                        <outlet property=\"activityIndicator\" destination=\"Ib3-4d-C6m\" id=\"jff-4P-qPL\"\/>","                        <outlet property=\"buttonClose\" destination=\"Z0P-Ai-w75\" id=\"KF1-VJ-SIR\"\/>","                        <outlet property=\"labelProgress\" destination=\"cEc-3u-y5a\" id=\"dXA-cG-ljG\"\/>","                        <outlet property=\"stackviewProperties\" destination=\"22I-U7-4CL\" id=\"a1N-jh-Lzf\"\/>","                        <segue destination=\"Oyd-bZ-n2O\" kind=\"unwind\" identifier=\"unwindToAssertionView\" unwindAction=\"unwindToAssertionViewWithSender:\" id=\"oZc-ko-fAZ\"\/>","                    <\/connections>","                <\/viewController>","                <placeholder placeholderIdentifier=\"IBFirstResponder\" id=\"srC-Yj-Tty\" userLabel=\"First Responder\" customClass=\"UIResponder\" sceneMemberID=\"firstResponder\"\/>","                <exit id=\"Oyd-bZ-n2O\" userLabel=\"Exit\" sceneMemberID=\"exit\"\/>","            <\/objects>","            <point key=\"canvasLocation\" x=\"128\" y=\"540\"\/>","        <\/scene>","    <\/scenes>","    <inferredMetricsTieBreakers>","        <segue reference=\"mF7-21-tZT\"\/>","    <\/inferredMetricsTieBreakers>","    <resources>","        <image name=\"building.2.fill\" catalog=\"system\" width=\"128\" height=\"106\"\/>","        <image name=\"cloud.fill\" catalog=\"system\" width=\"128\" height=\"88\"\/>","        <image name=\"lock.shield\" catalog=\"system\" width=\"128\" height=\"118\"\/>","        <namedColor name=\"AccentColor\">","            <color red=\"0.0\" green=\"0.46000000000000002\" blue=\"0.89000000000000001\" alpha=\"1\" colorSpace=\"custom\" customColorSpace=\"sRGB\"\/>","        <\/namedColor>","        <systemColor name=\"linkColor\">","            <color red=\"0.0\" green=\"0.47843137254901963\" blue=\"1\" alpha=\"1\" colorSpace=\"custom\" customColorSpace=\"sRGB\"\/>","        <\/systemColor>","        <systemColor name=\"systemBackgroundColor\">","            <color white=\"1\" alpha=\"1\" colorSpace=\"custom\" customColorSpace=\"genericGamma22GrayColorSpace\"\/>","        <\/systemColor>","        <systemColor name=\"systemBlueColor\">","            <color red=\"0.0\" green=\"0.47843137254901963\" blue=\"1\" alpha=\"1\" colorSpace=\"custom\" customColorSpace=\"sRGB\"\/>","        <\/systemColor>","        <systemColor name=\"systemGrayColor\">","            <color red=\"0.55686274509803924\" green=\"0.55686274509803924\" blue=\"0.57647058823529407\" alpha=\"1\" colorSpace=\"custom\" customColorSpace=\"sRGB\"\/>","        <\/systemColor>","        <systemColor name=\"systemRedColor\">","            <color red=\"1\" green=\"0.23137254901960785\" blue=\"0.18823529411764706\" alpha=\"1\" colorSpace=\"custom\" customColorSpace=\"sRGB\"\/>","        <\/systemColor>","    <\/resources>","<\/document>"],"fileName":"Main.storyboard","identifier":"Main.storyboard","type":"file","fileType":"storyboard","highlights":[]},"IVCreds_2.swift":{"syntax":"swift","content":["\/\/","\/\/ Copyright contributors to the IBM Security Verify FIDO2 Sample App for iOS project","\/\/","","import Foundation","import os.log","","\/\/ MARK: Structures","","\/\/\/ Represents the ivcreds from the Web Reverse Proxy.","public struct IVCreds {","    \/\/\/ Represents the username - extracted from AZN_CRED_PRINCIPAL_NAME attribute","    public var username: String","    ","    \/\/\/ Represents all other attributes of the cred","    public var attributes: [String: Any]?","    ","    enum IVCredsError: Error {","        case notAuthenticated","    }","    ","    \/\/ Creates a new `IVCreds` instance","    public init(jsonData: Data) throws {","        self.username = \"unauthenticated\"","        let json = try? JSONSerialization.jsonObject(with: jsonData, options: [])","        if let ivcreds = json as? [String:Any] {","            if ivcreds[\"AZN_CRED_PRINCIPAL_NAME\"] == nil || ivcreds[\"AZN_CRED_PRINCIPAL_NAME\"] as! String == \"unauthenticated\"  {","                throw IVCredsError.notAuthenticated","            }","            self.username = ivcreds[\"AZN_CRED_PRINCIPAL_NAME\"] as! String","            self.attributes = ivcreds","        }","    }","}"],"fileName":"IVCreds.swift","identifier":"IVCreds_2.swift","type":"file","fileType":"swift","highlights":[{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34}]},"LoginViewController_6.swift":{"syntax":"swift","content":["\/\/","\/\/ Copyright contributors to the IBM Security Verify FIDO2 Sample App for iOS project","\/\/","","import UIKit","import os.log","import FIDO2","","class LoginViewController: UIViewController {","    \/\/ MARK: Control variables","    @IBOutlet weak var textfieldPassword: UITextField!","    @IBOutlet weak var textfieldTenant: UITextField!","    @IBOutlet weak var textfieldUsername: UITextField!","    @IBOutlet weak var textfieldClientId: UITextField!","    @IBOutlet weak var buttonLogin: UIButton!","    ","    \/\/ MARK: Variable","    var accessToken: String?","    var rpUrl: String?","    ","    override func viewDidLoad() {","        super.viewDidLoad()","        ","        \/\/ Set styling","        textfieldPassword.setBorderBottom()","        textfieldTenant.setBorderBottom()","        textfieldUsername.setBorderBottom()","        textfieldClientId.setBorderBottom()","        buttonLogin.setCornerRadius()","        ","        \/\/ Handle UITextField events","        textfieldTenant.delegate = self","        textfieldUsername.delegate = self","        textfieldPassword.delegate = self","        textfieldClientId.delegate = self","        ","        textfieldTenant.becomeFirstResponder()","    }","    ","    \/\/ MARK: Control events","    ","    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {","        if let viewController = segue.destination as? AttestationViewController {","            viewController.accessToken = accessToken!","            viewController.rpUrl = rpUrl!","            viewController.server = isv","            viewController.userName = textfieldUsername.text!","            viewController.params = [\"authenticatorSelection\": [\"requireResidentKey\":true]]","            viewController.isModalInPresentation = true","        }","    }","    ","    @IBAction func onLogin(_ sender: UIButton) {","        \/\/ Validate before submitting.","        guard let tenantUrl = textfieldTenant.text, !tenantUrl.isEmpty, let clientId = textfieldClientId.text, !clientId.isEmpty, let username = textfieldUsername.text, !username.isEmpty, let password = textfieldPassword.text, !password.isEmpty else {","            let alertController = UIAlertController(title: \"FIDO2 Example\", message: \"Please enter all fields.\", preferredStyle: .alert)","            alertController.addAction(UIAlertAction(title: \"OK\", style: .default, handler: nil))","            ","            self.present(alertController, animated: true)","            return","        }","        ","        buttonLogin.setActivity(true)","        ","        \/\/ Perform the login attempt.","        login(url: tenantUrl, clientId: clientId, username: username, password: password) {","            result in","            ","            switch result {","            case .failure(let error):","                self.buttonLogin.setActivity(false)","                Logger.app.debug(\"Login error. \\(error.localizedDescription)\")","","                let alertController = UIAlertController(title: \"FIDO2 Example\", message: error.localizedDescription, preferredStyle: .alert)","                alertController.addAction(UIAlertAction(title: \"OK\", style: .default, handler: nil))","                ","                DispatchQueue.main.async {","                    self.present(alertController, animated: true)","                }","            case .success(let value):","                self.accessToken = value","                ","                self.fidoRegistration(url: tenantUrl, accessToken: value) { result in","                    self.buttonLogin.setActivity(false)","                    ","                    switch result {","                    case .failure(let error):","                        Logger.app.debug(\"Login error. \\(error.localizedDescription)\")","","                        let alertController = UIAlertController(title: \"FIDO2 Example\", message: error.localizedDescription, preferredStyle: .alert)","                        alertController.addAction(UIAlertAction(title: \"OK\", style: .default, handler: nil))","                        ","                        DispatchQueue.main.async {","                            self.present(alertController, animated: true)","                        }","                    case .success(let value):","                        \/\/ Create the replying party string.","                        self.rpUrl = self.createRelyingPartyUrl(baseUrl: tenantUrl, registrationId: value)","                        DispatchQueue.main.async {","                            self.performSegue(withIdentifier: \"ShowAttestation\", sender: nil)","                        }","                    }","                }","            }","        }","    }","    ","    private func createRelyingPartyUrl(baseUrl: String, registrationId: String) -> String {","        return \"\\(baseUrl)\/v2.0\/factors\/fido2\/relyingparties\/\\(registrationId)\"","    }","    ","    private func login(url: String, clientId: String, username: String, password: String, completion: @escaping (Result<String, NetworkError>) -> Void) {","        ","        guard let url = URL(string: \"\\(url)\/v1.0\/endpoint\/default\/token\") else {","            completion(.failure(.badURL))","            return","        }","        ","        var request = URLRequest(url: url)","        request.httpMethod = \"POST\"","        request.setValue(\"application\/json\", forHTTPHeaderField: \"Accept\")","        request.setValue(\"application\/x-www-form-urlencoded; charset=utf-8\", forHTTPHeaderField: \"Content-Type\")","        ","        let parameters = \"client_id=\\(clientId)&grant_type=password&username=\\(username)&password=\\(password)\".addingPercentEncoding(withAllowedCharacters: .urlQueryAllowed)!","        ","        request.httpBody = parameters.data(using: .utf8)","        ","        URLSession.shared.dataTask(with: request) { (data, response, error) in","            guard let data = data, let _ = response, error == nil else {","                completion(.failure(.general(message: error!.localizedDescription)))","                return","            }","            ","            Logger.networking.info(\"HTTP response\\n\\(String(data: data, encoding: .utf8)!, privacy: .public)\")","            do {","                guard let dictionary = try? JSONSerialization.jsonObject(with: data, options: []) as? [String: Any], let value = dictionary[\"access_token\"] as? String  else {","                    completion(.failure(.general(message: \"\\(String(data: data, encoding: .utf8) ?? \"Invalid\")\")","                    ))","                    return","                }","                completion(.success(value))","            }","        }.resume()","    }","    ","    private func fidoRegistration(url: String, accessToken: String, completion: @escaping (Result<String, NetworkError>) -> Void) {","        guard let url = URL(string: \"\\(url)\/v2.0\/factors\/fido2\/relyingparties\") else {","            completion(.failure(.badURL))","            return","        }","        ","        var request = URLRequest(url: url)","        request.httpMethod = \"POST\"","        request.setValue(\"application\/json\", forHTTPHeaderField: \"Accept\")","        request.setValue(\"application\/json\", forHTTPHeaderField: \"Content-Type\")","        request.setValue(\"Bearer \\(accessToken)\", forHTTPHeaderField: \"Authorization\")","        ","        request.httpBody = \"{\\\"origin\\\": \\\"\\(url.host!)\\\"}\".data(using: .utf8)","        ","        URLSession.shared.dataTask(with: request) { (data, response, error) in","            guard let data = data, let _ = response, error == nil else {","                completion(.failure(.general(message: error!.localizedDescription)))","                return","            }","            ","            Logger.networking.info(\"HTTP response\\n\\(String(data: data, encoding: .utf8)!, privacy: .public)\")","            do {","                guard let dictionary = try? JSONSerialization.jsonObject(with: data, options: []) as? [String: Any] else {","                    completion(.failure(.general(message: \"\\(String(data: data, encoding: .utf8) ?? \"Invalid\")\")","                    ))","                    return","                }","                ","                guard let fido = dictionary[\"fido2\"] as? [Any], let value = fido.first as? [String: String] else {","                    completion(.failure(.general(message: \"The fido2 array held no elements.\")))","                    return","                }","                ","                guard let id = value.first(where: { $0.key == \"id\" }) else {","                    completion(.failure(.general(message: \"'id' not found in fido2 array.\")))","                    return","                }","                ","                completion(.success(id.value))","            }","        }.resume()","    }","}"],"fileName":"LoginViewController.swift","identifier":"LoginViewController_6.swift","type":"file","fileType":"swift","highlights":[{"line":108},{"line":109},{"line":110},{"line":111},{"line":145},{"line":146},{"line":147},{"line":148},{"line":149},{"line":150},{"line":151},{"line":152},{"line":153},{"line":154},{"line":155},{"line":156},{"line":157},{"line":158},{"line":159},{"line":160},{"line":161},{"line":162},{"line":163},{"line":164},{"line":165},{"line":166},{"line":167},{"line":168},{"line":169},{"line":170},{"line":171},{"line":172},{"line":173},{"line":174},{"line":175},{"line":176},{"line":177},{"line":178},{"line":179},{"line":180},{"line":181},{"line":182},{"line":183},{"line":184},{"line":185},{"line":186},{"line":187}]},"doc://com.ibm.iOS-SDK/tutorials/iOS-SDK/FIDO2Setup#Creating-the-FIDO-functionality":{"role":"pseudoSymbol","title":"Creating the FIDO functionality","abstract":[{"type":"text","text":"The following tutorial will guide you through the creation of a new application that uses the FIDO2 Assertion and Attestation ceremonies for user verification."}],"identifier":"doc:\/\/com.ibm.iOS-SDK\/tutorials\/iOS-SDK\/FIDO2Setup#Creating-the-FIDO-functionality","kind":"section","type":"section","url":"\/tutorials\/ios-sdk\/fido2setup#Creating-the-FIDO-functionality"},"step_3_name_project.png":{"alt":"A screenshot of the configuration screen when creating a new project, with the name box highlighted with text that says 'FIDO2Tutorial'","type":"image","identifier":"step_3_name_project.png","variants":[{"url":"\/images\/step_3_name_project.png","traits":["1x","light"]}]},"step_5_add_package.png":{"alt":"A screenshot of the xcode window with the 'File' menu bar highlighted, as well as the 'Add Packages...' item in that menu selected.","type":"image","identifier":"step_5_add_package.png","variants":[{"url":"\/images\/step_5_add_package.png","traits":["1x","light"]}]},"AssertionInfoViewController_1.swift":{"syntax":"swift","content":["\/\/","\/\/ Copyright contributors to the IBM Security Verify FIDO2 Sample App for iOS project","\/\/","","import Foundation","import UIKit","import os.log","import FIDO2","","class AssertionInfoViewController: UIViewController {","    \/\/ MARK: Control variables","    @IBOutlet weak var activityIndicator: UIActivityIndicatorView!","    @IBOutlet weak var buttonClose: UIButton!","    @IBOutlet weak var stackviewProperties: UIStackView!","    @IBOutlet weak var labelProgress: UILabel!","    ","    ","}"],"fileName":"AssertionInfoViewController.swift","identifier":"AssertionInfoViewController_1.swift","type":"file","fileType":"swift","highlights":[]},"AppHelper_6.swift":{"syntax":"swift","content":["\/\/","\/\/ Copyright contributors to the IBM Security Verify FIDO2 Sample App for iOS project","\/\/","","import UIKit","import os.log","import LocalAuthentication","import FIDO2","","\/\/ MARK: Constants","let bundleIdentifier = Bundle.main.bundleIdentifier!","let isva = \"isva\"","let isv = \"isv\"","","\/\/ MARK: Enums","enum Store: String {","    case relyingPartyUrl","    case nickname","    case displayName","    case username","    case accessToken","    case createdDate","    case created","    case server","}","","enum NetworkError: Error, LocalizedError {","    \/\/\/ Invalid or format of URL is incorrect.","    case badURL","    ","    \/\/\/ Invalid or no data returned from the serve","    case invalidData","    ","    \/\/\/ General error with custom message.","    case general(message: String)","    ","    public var errorDescription: String? {","       switch self {","       case .badURL:","           return NSLocalizedString(\"Invalid or format of URL is incorrect.\", comment: \"Invalid URL\")","       case .invalidData:","           return NSLocalizedString(\"Invalid or no data returned from the server.\", comment: \"Invalid Data\")","       case .general(message: let message):","           return NSLocalizedString(message, comment: \"General Error\")","       }","   }","}","","\/\/ MARK: Functions","","\/\/\/ HTTP response status codes that are acceptable.","var acceptableStatusCodes: [Int] {","    return Array(200 ..< 300)","}","","func createBottomBorder(width: CGFloat, height: CGFloat, color: UIColor = .systemGray3) -> CALayer {","    let layer = CALayer()","    layer.frame = CGRect(x: 0.0, y: height - 1, width: width, height: 1.0)","    layer.backgroundColor = color.cgColor","    return layer","}","","\/\/ MARK: Extensions","","extension UIViewController: UITextFieldDelegate {","    \/\/\/ Asks the delegate whether to process the pressing of the Return button for the text field.","    \/\/\/ - parameter textField: The text field whose return button was pressed.","    public func textFieldShouldReturn(_ textField: UITextField) -> Bool {","        textField.resignFirstResponder()","        return true","    }","}","","extension UIButton {","    \/\/\/ Sets an `UIActivityIndicatorView` to the button","    \/\/\/ - parameter show: The flag to show or hide the activity indicator.","    \/\/\/ - remark: This operation executes on the UI thread.","    func setActivity(_ show: Bool) {","        DispatchQueue.main.async {","            let tag = 808404","            ","            if show {","                self.isEnabled = false","                ","                let buttonHeight = self.bounds.size.height","                let buttonWidth = self.bounds.size.width","                ","                let activity = UIActivityIndicatorView()","                activity.color = .white","                activity.style = .medium","                activity.center = CGPoint(x: buttonWidth - activity.frame.width - 30, y: buttonHeight \/ 2)","                activity.tag = tag","                ","                self.addSubview(activity)","                activity.startAnimating()","            }","            else {","                self.isEnabled = true","                ","                if let activity = self.viewWithTag(tag) as? UIActivityIndicatorView {","                    activity.stopAnimating()","                    activity.removeFromSuperview()","                }","            }","        }","    }","}","","extension UIView {","    func setCornerRadius(_ cornerRadius: CGFloat = 8) {","        self.layer.cornerRadius = cornerRadius","    }","    ","    func setBorderBottom(color: UIColor = .systemGray3, lineHeight: CGFloat = 1) {","        let layer = CALayer()","        layer.frame = CGRect(x: 0, y: self.frame.height - lineHeight, width: UIScreen.main.bounds.width, height: lineHeight)","        layer.backgroundColor = color.cgColor","","        self.layer.addSublayer(layer)","        self.layer.masksToBounds = true","    }","}","","extension Data {","    \/\/\/ Returns a Base-64 URL encoded string.","    \/\/\/ - remark: Base-64 URL encoded string removes instances of `=`  and replaces `+` with `-` and `\/` with `_`.","    func base64URLEncodedString() -> String {","        return self.base64EncodedString()","            .replacingOccurrences(of: \"+\", with: \"-\")","            .replacingOccurrences(of: \"\/\", with: \"_\")","            .replacingOccurrences(of: \"=\", with: \"\")","    }","}","","extension Logger {","    private static var subsystem = Bundle.main.bundleIdentifier!","","    \/\/\/ Logs app related messages.","    static let app = Logger(subsystem: subsystem, category: \"app\")","    ","    \/\/\/ Logs networking operations.","    static let networking = Logger(subsystem: subsystem, category: \"networking\")","}","",""],"fileName":"AppHelper.swift","identifier":"AppHelper_6.swift","type":"file","fileType":"swift","highlights":[{"line":124},{"line":125},{"line":126},{"line":127},{"line":128},{"line":129},{"line":130},{"line":131},{"line":132},{"line":133},{"line":135},{"line":136},{"line":137},{"line":138},{"line":139},{"line":140},{"line":141},{"line":142},{"line":143},{"line":144},{"line":145}]},"CredentialUserData_2.swift":{"syntax":"swift","content":["\/\/","\/\/ Copyright contributors to the IBM Security Verify FIDO2 Sample App for iOS project","\/\/","","import Foundation","import os.log","import FIDO2","","\/\/ MARK: Enums","","\/\/\/ The attributes that can be returned by the FIDO server for a user.","public enum CredentialUserAttribute: String {","    \/\/\/ The metadata icon of the authenticator","    case icon","    ","    \/\/\/ The unique identifier of the user.","    case userId","    ","    \/\/\/ The name of the user.","    case username","    ","    \/\/\/ The email of the user.","    case email","    ","    \/\/\/ The friendly name of the registration record","    case nickname","    ","    \/\/\/ The metadata description of the authenticator","    case description","    ","    \/\/\/ The AAGuid of the authenticator used ,","    case aaguid","    ","    \/\/\/ The relying party ID this enrollment belongs to.","    case rpId","    ","    \/\/\/ The format of attestation that was performed ,","    case attestationFormat","    ","    \/\/\/ The type of attestation that was performed ,","    case attestationType","    ","    \/\/\/ The attestation trust path of the authenticator.","    case attestationTrustPath","    ","    \/\/\/ The counter of this authenticator.","    case counter","    ","    \/\/\/ The public key issued by the authenticator.","    case credentialPublicKey","    ","    \/\/\/  The credential ID of the authenticator","    case credentialId","    ","    \/\/\/  The authenticator extension for txAuthSimple","    case txAuthSimple","}","","\/\/ MARK: Protocols","","\/\/ MARK: Structures"],"fileName":"CredentialUserData.swift","identifier":"CredentialUserData_2.swift","type":"file","fileType":"swift","highlights":[{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52},{"line":53},{"line":54},{"line":55},{"line":56},{"line":57},{"line":58}]},"AppHelper_1.swift":{"syntax":"swift","content":["\/\/","\/\/ Copyright contributors to the IBM Security Verify FIDO2 Sample App for iOS project","\/\/","","import UIKit","import os.log","import LocalAuthentication","import FIDO2","","\/\/ MARK: Constants","","\/\/ MARK: Enums","","\/\/ MARK: Functions","","\/\/ MARK: Extensions"],"fileName":"AppHelper.swift","identifier":"AppHelper_1.swift","type":"file","fileType":"swift","highlights":[]},"AssertionViewController_5.swift":{"syntax":"swift","content":["\/\/","\/\/ Copyright contributors to the IBM Security Verify FIDO2 Sample App for iOS project","\/\/","","import Foundation","import UIKit","import FIDO2","import CryptoKit","","class AssertionViewController: UIViewController {","    \/\/ MARK: Control variables","    @IBOutlet weak var buttonAuthenticate: UIButton!","    @IBOutlet weak var buttonRemove: UIButton!","    @IBOutlet weak var labelDisplayName: UILabel!","    @IBOutlet weak var labelHostName: UILabel!","    @IBOutlet weak var labelNickName: UILabel!","    @IBOutlet weak var labelCreatedDate: UILabel!","    @IBOutlet weak var imageView: UIImageView!","    @IBOutlet weak var switchEauthExt: UISwitch!","    ","    \/\/ Random messages for the user to acknowledge before signing the assertion.","    let reasons = [\"Please confirm your pizza order of $49.99\",","                   \"Please verify that you intended to transfer $2,877.34.\",","                   \"Please confirm you purchased a new Apple MacBook.\",","                   \"Are you trying to access to the server room?\",","                   \"Your confirmation of to access the registration resource on this server is required.\",","                   \"Please confirm your order of 10 widgets.\"]","    ","    override func viewDidLoad() {","        super.viewDidLoad()","        ","        navigationController?.navigationBar.isHidden = true","        ","        \/\/ Populate the stored values.","        if let value = UserDefaults.standard.string(forKey: Store.relyingPartyUrl.rawValue), let url = URL(string: value), let hostname = url.host {","            labelHostName.text = hostname","        }","        ","        if let value = UserDefaults.standard.string(forKey: Store.nickname.rawValue) {","            labelNickName.text = value","        }","        ","        if let value = UserDefaults.standard.string(forKey: Store.displayName.rawValue) {","            labelDisplayName.text = value","        }","        ","        if let value = UserDefaults.standard.string(forKey: Store.createdDate.rawValue) {","            labelCreatedDate.text = value","        }","        ","        \/\/ Animate the registration logo","        setTraitAppearance()","        animateLogo()","        ","        buttonAuthenticate.setCornerRadius()","    }","    ","    \/\/\/ Called when the iOS interface environment changes.","    \/\/\/ - parameter previousTraitCollection: The `UITraitCollection` object before the interface environment changed.","    override func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {","        super.traitCollectionDidChange(previousTraitCollection)","","        if traitCollection.hasDifferentColorAppearance(comparedTo: previousTraitCollection) {","            setTraitAppearance()","        }","    }","    ","    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {","        if let viewController = segue.destination as? AssertionInfoViewController, let assertion = sender as? PublicKeyCredential<AuthenticatorAssertionResponse> {","            viewController.assertion = assertion","            viewController.isModalInPresentation = true","        }","    }","    ","    @IBAction func unwindToAssertionView(sender: UIStoryboardSegue) {","        if let viewController = sender.source as? AssertionInfoViewController {","            imageView.tintColor = viewController.success ? UIColor.systemGreen : UIColor.systemRed","            ","            animateLogo {","                DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + 3) {","                    self.setTraitAppearance()","                }","            }","        }","    }","    ","    \/\/ MARK: Functions","    ","    private func animateLogo(completion: (() -> Void)? = nil) {","        \/\/ Animate the registration logo","        let animation = CASpringAnimation(keyPath: \"transform.scale\")","        animation.fromValue = 1.0","        animation.toValue = 1.50","        animation.autoreverses = true","        animation.repeatCount = 1","        animation.initialVelocity = 0.3","        animation.damping = 0.8","        imageView.layer.add(animation, forKey: nil)","        ","        completion?()","    }","    ","    \/\/ Set the appearence based on the device trait appearance","    private func setTraitAppearance() {","        if traitCollection.userInterfaceStyle == .light {","            imageView.tintColor = UIColor.black","        }","        else {","            imageView.tintColor = UIColor.white","        }","    }","    ","    \/\/ MARK: Control events","    @IBAction func onAuthenticateClick(_ sender: UIButton) {","        guard let accessToken = UserDefaults.standard.string(forKey: Store.accessToken.rawValue), let relyingPartyUrl =  UserDefaults.standard.string(forKey: Store.relyingPartyUrl.rawValue) else {","            let alertController = UIAlertController(title: \"FIDO2 Example\", message: \"Information about the relying party is missing.\", preferredStyle: .alert)","            alertController.addAction(UIAlertAction(title: \"OK\", style: .default, handler: nil))","            ","            self.present(alertController, animated: true)","            return","        }","        ","        self.buttonAuthenticate.setActivity(true)","        let assertionUrl = \"\\(relyingPartyUrl)\/assertion\/options\"","        ","        var params:[String: Any] = [\"userVerification\": \"required\"]","        if UserDefaults.standard.string(forKey: Store.server.rawValue) == isva, let username = UserDefaults.standard.string(forKey: Store.username.rawValue) {","            params.updateValue(username, forKey: \"username\")","            ","            if switchEauthExt.isOn {","                params.updateValue([\"credProps\": true, \"txAuthSimple\": reasons.randomElement()!], forKey: \"extensions\")","            }","        }","       ","        \/\/ Fetch the attestation options from the relying party.","        FidoService.shared.fetchAssertionOptions(assertionUrl, accessToken: accessToken, params: params) { result in","            switch result {","            case .success(let value):","                let provider = PublicKeyCredentialProvider()","                provider.delegate = self","                provider.createCredentialAssertionRequest(options: value)","            case .failure(let error):","                let alertController = UIAlertController(title: \"FIDO2 Example\", message: error.localizedDescription, preferredStyle: .alert)","                alertController.addAction(UIAlertAction(title: \"OK\", style: .default, handler: nil))","                ","                DispatchQueue.main.async {","                    self.buttonAuthenticate.setActivity(false)","                    self.present(alertController, animated: true)","                }","            }","        }","    }","    ","    ","    @IBAction func onRemoveClick(_ sender: UIButton) {","        let alertController = UIAlertController(title: \"FIDO2 Example\", message: \"Remove FIDO2 authenticator? If you proceed, you will need to remove the authenticator from the relying party.\", preferredStyle: .alert)","        alertController.addAction(UIAlertAction(title: \"OK\", style: .default, handler: { action in","            UserDefaults.standard.removePersistentDomain(forName: bundleIdentifier)","            ","            \/\/ Set the parent view controller for the scene.","            let storybaord = UIStoryboard(name: \"Main\", bundle: nil)","            let viewController = storybaord.instantiateViewController(withIdentifier: \"registrationLanding\")","            UIApplication.shared.windows.first?.rootViewController = viewController","            UIApplication.shared.windows.first?.makeKeyAndVisible()","        }))","","        alertController.addAction(UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil))","        ","        present(alertController, animated: true, completion: nil)","    }","}","","extension AssertionViewController: PublicKeyCredentialDelegate {","    func publicKeyCredential(provider: PublicKeyCredentialProvider, didCompleteWithError error: Error) {","        let alertController = UIAlertController(title: \"FIDO2 Example\", message: error.localizedDescription, preferredStyle: .alert)","        alertController.addAction(UIAlertAction(title: \"OK\", style: .default, handler: nil))","","        DispatchQueue.main.async {","            self.buttonAuthenticate.setActivity(false)","            self.present(alertController, animated: true)","        }","    }","    ","    func publicKeyCredential(provider: PublicKeyCredentialProvider, didCompleteWithAssertion result: PublicKeyCredential<AuthenticatorAssertionResponse>) {","        \/\/ Transition to info view controller","        DispatchQueue.main.async {","            self.buttonAuthenticate.setActivity(false)","        }","        self.performSegue(withIdentifier: \"ShowAssertionOptionsInfo\", sender: result)","    }","}"],"fileName":"AssertionViewController.swift","identifier":"AssertionViewController_5.swift","type":"file","fileType":"swift","highlights":[{"line":172},{"line":173},{"line":174},{"line":175},{"line":176},{"line":177},{"line":178},{"line":179},{"line":180},{"line":181},{"line":182},{"line":183},{"line":184},{"line":185},{"line":186},{"line":187},{"line":188},{"line":189},{"line":190},{"line":191}]},"LandingViewController_1.swift":{"syntax":"swift","content":["\/\/","\/\/ Copyright contributors to the IBM Security Verify FIDO2 Sample App for iOS project","\/\/","","import Foundation","import UIKit","import os.log","","","class LandingViewController: UIViewController {","    @IBOutlet weak var buttonISVA: UIButton!","    @IBOutlet weak var buttonISV: UIButton!","    @IBOutlet weak var viewISVA: UIView!","    @IBOutlet weak var viewISV: UIView!","    ","    override func viewDidLoad() {","        super.viewDidLoad()","        ","        \/\/ Apply styling","        buttonISVA.setCornerRadius()","        buttonISV.setCornerRadius()","        viewISV.setCornerRadius()","        viewISVA.setCornerRadius()","        ","        setTraitAppearance()","    }","    ","    \/\/\/ Called when the iOS interface environment changes.","    \/\/\/ - parameter previousTraitCollection: The `UITraitCollection` object before the interface environment changed.","    override func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {","        super.traitCollectionDidChange(previousTraitCollection)","","        if traitCollection.hasDifferentColorAppearance(comparedTo: previousTraitCollection) {","            setTraitAppearance()","        }","    }","        ","    \/\/ Set the appearence based on the device trait appearance","    private func setTraitAppearance() {","        if traitCollection.userInterfaceStyle == .light {","            view.backgroundColor = UIColor(red: 0.969, green: 0.969, blue: 0.969, alpha: 1.0)","            viewISVA.backgroundColor = .systemBackground","            viewISV.backgroundColor = .systemBackground","        }","        else {","            view.backgroundColor = .clear","            viewISVA.backgroundColor = UIColor(red: 0.11, green: 0.11, blue: 0.11, alpha: 1.00)","            viewISV.backgroundColor = UIColor(red: 0.11, green: 0.11, blue: 0.11, alpha: 1.00)","        }","    }","}"],"fileName":"LandingViewController.swift","identifier":"LandingViewController_1.swift","type":"file","fileType":"swift","highlights":[]},"doc://com.ibm.iOS-SDK/tutorials/iOS-SDK/FIDO2Setup#Creating-an-app-that-uses-the-FIDO2-Package":{"role":"pseudoSymbol","title":"Creating an app that uses the FIDO2 Package","abstract":[{"type":"text","text":"The following tutorial will guide you through the creation of a new application that uses the FIDO2 Assertion and Attestation ceremonies for user verification."}],"identifier":"doc:\/\/com.ibm.iOS-SDK\/tutorials\/iOS-SDK\/FIDO2Setup#Creating-an-app-that-uses-the-FIDO2-Package","kind":"section","type":"section","url":"\/tutorials\/ios-sdk\/fido2setup#Creating-an-app-that-uses-the-FIDO2-Package"},"IVCreds_1.swift":{"syntax":"swift","content":["\/\/","\/\/ Copyright contributors to the IBM Security Verify FIDO2 Sample App for iOS project","\/\/","","import Foundation","import os.log","","\/\/ MARK: Structures"],"fileName":"IVCreds.swift","identifier":"IVCreds_1.swift","type":"file","fileType":"swift","highlights":[]},"LoginViewController_5.swift":{"syntax":"swift","content":["\/\/","\/\/ Copyright contributors to the IBM Security Verify FIDO2 Sample App for iOS project","\/\/","","import UIKit","import os.log","import FIDO2","","class LoginViewController: UIViewController {","    \/\/ MARK: Control variables","    @IBOutlet weak var textfieldPassword: UITextField!","    @IBOutlet weak var textfieldTenant: UITextField!","    @IBOutlet weak var textfieldUsername: UITextField!","    @IBOutlet weak var textfieldClientId: UITextField!","    @IBOutlet weak var buttonLogin: UIButton!","    ","    \/\/ MARK: Variable","    var accessToken: String?","    var rpUrl: String?","    ","    override func viewDidLoad() {","        super.viewDidLoad()","        ","        \/\/ Set styling","        textfieldPassword.setBorderBottom()","        textfieldTenant.setBorderBottom()","        textfieldUsername.setBorderBottom()","        textfieldClientId.setBorderBottom()","        buttonLogin.setCornerRadius()","        ","        \/\/ Handle UITextField events","        textfieldTenant.delegate = self","        textfieldUsername.delegate = self","        textfieldPassword.delegate = self","        textfieldClientId.delegate = self","        ","        textfieldTenant.becomeFirstResponder()","    }","    ","    \/\/ MARK: Control events","    ","    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {","        if let viewController = segue.destination as? AttestationViewController {","            viewController.accessToken = accessToken!","            viewController.rpUrl = rpUrl!","            viewController.server = isv","            viewController.userName = textfieldUsername.text!","            viewController.params = [\"authenticatorSelection\": [\"requireResidentKey\":true]]","            viewController.isModalInPresentation = true","        }","    }","    ","    @IBAction func onLogin(_ sender: UIButton) {","        \/\/ Validate before submitting.","        guard let tenantUrl = textfieldTenant.text, !tenantUrl.isEmpty, let clientId = textfieldClientId.text, !clientId.isEmpty, let username = textfieldUsername.text, !username.isEmpty, let password = textfieldPassword.text, !password.isEmpty else {","            let alertController = UIAlertController(title: \"FIDO2 Example\", message: \"Please enter all fields.\", preferredStyle: .alert)","            alertController.addAction(UIAlertAction(title: \"OK\", style: .default, handler: nil))","            ","            self.present(alertController, animated: true)","            return","        }","        ","        buttonLogin.setActivity(true)","        ","        \/\/ Perform the login attempt.","        login(url: tenantUrl, clientId: clientId, username: username, password: password) {","            result in","            ","            switch result {","            case .failure(let error):","                self.buttonLogin.setActivity(false)","                Logger.app.debug(\"Login error. \\(error.localizedDescription)\")","","                let alertController = UIAlertController(title: \"FIDO2 Example\", message: error.localizedDescription, preferredStyle: .alert)","                alertController.addAction(UIAlertAction(title: \"OK\", style: .default, handler: nil))","                ","                DispatchQueue.main.async {","                    self.present(alertController, animated: true)","                }","            case .success(let value):","                self.accessToken = value","                ","                self.fidoRegistration(url: tenantUrl, accessToken: value) { result in","                    self.buttonLogin.setActivity(false)","                    ","                    switch result {","                    case .failure(let error):","                        Logger.app.debug(\"Login error. \\(error.localizedDescription)\")","","                        let alertController = UIAlertController(title: \"FIDO2 Example\", message: error.localizedDescription, preferredStyle: .alert)","                        alertController.addAction(UIAlertAction(title: \"OK\", style: .default, handler: nil))","                        ","                        DispatchQueue.main.async {","                            self.present(alertController, animated: true)","                        }","                    case .success(let value):","                        \/\/ Create the replying party string.","                        self.rpUrl = self.createRelyingPartyUrl(baseUrl: tenantUrl, registrationId: value)","                        DispatchQueue.main.async {","                            self.performSegue(withIdentifier: \"ShowAttestation\", sender: nil)","                        }","                    }","                }","            }","        }","    }","    ","    private func login(url: String, clientId: String, username: String, password: String, completion: @escaping (Result<String, NetworkError>) -> Void) {","        ","        guard let url = URL(string: \"\\(url)\/v1.0\/endpoint\/default\/token\") else {","            completion(.failure(.badURL))","            return","        }","        ","        var request = URLRequest(url: url)","        request.httpMethod = \"POST\"","        request.setValue(\"application\/json\", forHTTPHeaderField: \"Accept\")","        request.setValue(\"application\/x-www-form-urlencoded; charset=utf-8\", forHTTPHeaderField: \"Content-Type\")","        ","        let parameters = \"client_id=\\(clientId)&grant_type=password&username=\\(username)&password=\\(password)\".addingPercentEncoding(withAllowedCharacters: .urlQueryAllowed)!","        ","        request.httpBody = parameters.data(using: .utf8)","        ","        URLSession.shared.dataTask(with: request) { (data, response, error) in","            guard let data = data, let _ = response, error == nil else {","                completion(.failure(.general(message: error!.localizedDescription)))","                return","            }","            ","            Logger.networking.info(\"HTTP response\\n\\(String(data: data, encoding: .utf8)!, privacy: .public)\")","            do {","                guard let dictionary = try? JSONSerialization.jsonObject(with: data, options: []) as? [String: Any], let value = dictionary[\"access_token\"] as? String  else {","                    completion(.failure(.general(message: \"\\(String(data: data, encoding: .utf8) ?? \"Invalid\")\")","                    ))","                    return","                }","                completion(.success(value))","            }","        }.resume()","    }","}"],"fileName":"LoginViewController.swift","identifier":"LoginViewController_5.swift","type":"file","fileType":"swift","highlights":[{"line":107},{"line":108},{"line":109},{"line":110},{"line":111},{"line":112},{"line":113},{"line":114},{"line":115},{"line":116},{"line":117},{"line":118},{"line":119},{"line":120},{"line":121},{"line":122},{"line":123},{"line":124},{"line":125},{"line":126},{"line":127},{"line":128},{"line":129},{"line":130},{"line":131},{"line":132},{"line":133},{"line":134},{"line":135},{"line":136},{"line":137},{"line":138},{"line":139},{"line":140}]},"doc://com.ibm.iOS-SDK/tutorials/fido2/FIDO2-Setup":{"role":"article","title":"FIDO2 Setup","abstract":[],"identifier":"doc:\/\/com.ibm.iOS-SDK\/tutorials\/fido2\/FIDO2-Setup","kind":"article","type":"topic","url":"\/tutorials\/fido2\/fido2-setup"},"AssertionViewController_3.swift":{"syntax":"swift","content":["\/\/","\/\/ Copyright contributors to the IBM Security Verify FIDO2 Sample App for iOS project","\/\/","","import Foundation","import UIKit","import FIDO2","import CryptoKit","","class AssertionViewController: UIViewController {","    \/\/ MARK: Control variables","    @IBOutlet weak var buttonAuthenticate: UIButton!","    @IBOutlet weak var buttonRemove: UIButton!","    @IBOutlet weak var labelDisplayName: UILabel!","    @IBOutlet weak var labelHostName: UILabel!","    @IBOutlet weak var labelNickName: UILabel!","    @IBOutlet weak var labelCreatedDate: UILabel!","    @IBOutlet weak var imageView: UIImageView!","    @IBOutlet weak var switchEauthExt: UISwitch!","    ","    \/\/ Random messages for the user to acknowledge before signing the assertion.","    let reasons = [\"Please confirm your pizza order of $49.99\",","                   \"Please verify that you intended to transfer $2,877.34.\",","                   \"Please confirm you purchased a new Apple MacBook.\",","                   \"Are you trying to access to the server room?\",","                   \"Your confirmation of to access the registration resource on this server is required.\",","                   \"Please confirm your order of 10 widgets.\"]","    ","    override func viewDidLoad() {","        super.viewDidLoad()","        ","        navigationController?.navigationBar.isHidden = true","        ","        \/\/ Populate the stored values.","        if let value = UserDefaults.standard.string(forKey: Store.relyingPartyUrl.rawValue), let url = URL(string: value), let hostname = url.host {","            labelHostName.text = hostname","        }","        ","        if let value = UserDefaults.standard.string(forKey: Store.nickname.rawValue) {","            labelNickName.text = value","        }","        ","        if let value = UserDefaults.standard.string(forKey: Store.displayName.rawValue) {","            labelDisplayName.text = value","        }","        ","        if let value = UserDefaults.standard.string(forKey: Store.createdDate.rawValue) {","            labelCreatedDate.text = value","        }","        ","        \/\/ Animate the registration logo","        setTraitAppearance()","        animateLogo()","        ","        buttonAuthenticate.setCornerRadius()","    }","    ","    \/\/\/ Called when the iOS interface environment changes.","    \/\/\/ - parameter previousTraitCollection: The `UITraitCollection` object before the interface environment changed.","    override func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {","        super.traitCollectionDidChange(previousTraitCollection)","","        if traitCollection.hasDifferentColorAppearance(comparedTo: previousTraitCollection) {","            setTraitAppearance()","        }","    }","    ","    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {","        if let viewController = segue.destination as? AssertionInfoViewController, let assertion = sender as? PublicKeyCredential<AuthenticatorAssertionResponse> {","            viewController.assertion = assertion","            viewController.isModalInPresentation = true","        }","    }","    ","    @IBAction func unwindToAssertionView(sender: UIStoryboardSegue) {","        if let viewController = sender.source as? AssertionInfoViewController {","            imageView.tintColor = viewController.success ? UIColor.systemGreen : UIColor.systemRed","            ","            animateLogo {","                DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + 3) {","                    self.setTraitAppearance()","                }","            }","        }","    }","    ","    \/\/ MARK: Functions","    ","    private func animateLogo(completion: (() -> Void)? = nil) {","        \/\/ Animate the registration logo","        let animation = CASpringAnimation(keyPath: \"transform.scale\")","        animation.fromValue = 1.0","        animation.toValue = 1.50","        animation.autoreverses = true","        animation.repeatCount = 1","        animation.initialVelocity = 0.3","        animation.damping = 0.8","        imageView.layer.add(animation, forKey: nil)","        ","        completion?()","    }","    ","    \/\/ Set the appearence based on the device trait appearance","    private func setTraitAppearance() {","        if traitCollection.userInterfaceStyle == .light {","            imageView.tintColor = UIColor.black","        }","        else {","            imageView.tintColor = UIColor.white","        }","    }","}"],"fileName":"AssertionViewController.swift","identifier":"AssertionViewController_3.swift","type":"file","fileType":"swift","highlights":[{"line":86},{"line":87},{"line":88},{"line":89},{"line":90},{"line":91},{"line":92},{"line":93},{"line":94},{"line":95},{"line":96},{"line":97},{"line":98},{"line":99},{"line":100},{"line":101},{"line":102},{"line":103},{"line":104},{"line":105},{"line":106},{"line":107},{"line":108},{"line":109},{"line":110},{"line":111}]},"doc://com.ibm.iOS-SDK/tutorials/fido2":{"role":"overview","title":"Getting started with FIDO2","abstract":[{"type":"text","text":"Create an application that can utilise the power of the FIDO2 system to authenticate users via registered biometrics on their personal devices."}],"identifier":"doc:\/\/com.ibm.iOS-SDK\/tutorials\/fido2","kind":"overview","type":"topic","url":"\/tutorials\/fido2"},"LoginViewController_1.swift":{"syntax":"swift","content":["\/\/","\/\/ Copyright contributors to the IBM Security Verify FIDO2 Sample App for iOS project","\/\/","","import UIKit","import os.log","import FIDO2","","class LoginViewController: UIViewController {","    ","}"],"fileName":"LoginViewController.swift","identifier":"LoginViewController_1.swift","type":"file","fileType":"swift","highlights":[]}}}